# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distrirbuted on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Please adjust the following lines
# _000_commonConfig contains the most common configuration options. To go into the details you can look into the configurations option after _000_commonConfig
_000_commonConfig:
  serialNumber: "default"  # usually the hostname

  datamodel_v2:
    enabled: true
    bridges:
      - mode: mqtt-kafka
        brokerA: united-manufacturing-hub-mqtt:1883
        brokerB: united-manufacturing-hub-kafka:9092
        topic: umh.v1..*              # accept mqtt or kafka topic format. after the topic seprator, you can use # for mqtt wildcard, or .* for kafka wildcard
        topicMergePoint: 5
        partitions: 6                 # optional: number of partitions for the new kafka topic. default: 6
        replicationFactor: 1          # optional: replication factor for the new kafka topic. default: 1
    database:
      name: "umh_v2"
      host: "united-manufacturing-hub"
    grafana:
      dbreader: "grafanareader"
      dbpassword: "changeme"

  # This allows to specify data sources, which is mostly used for instances running on the edge
  datasources:

    # barcodereader reads out connected USB barcodereaders emulating a keyboard
    barcodereader:
      enabled: false
      USBDeviceName: "Datalogic ADC, Inc. Handheld Barcode Scanner"
      USBDevicePath: "" # Linux device path, if empty, USBDeviceName is used
      customerID: "raw"
      location: "barcodereader"
      machineID: "barcodereader"

    # sensorconnect searches for ifm IO-Link gateways and reads out the connected sensors
    sensorconnect:
      enabled: false
      iprange: "192.168.10.1/24"  # IP Range in CIDR notation
      enableKafka: true
      enableMQTT: false

    # iotsensorsmqtt simulates IoT sensor data and publishes it over MQTT.
    # Learn more : https://github.com/amine-amaach/simulators/tree/main/ioTSensorsMQTT
    iotsensorsmqtt:
      enabled: true


    # iotsensorsmqtt simulates IoT sensor data as over OPC UA.
    # Learn more : https://github.com/amine-amaach/simulators/tree/main/ioTSensorsOPCUA
    opcuasimulator:
       enabled: true

    # packmlmqttsimulator simulates PackML state data and publishes it over MQTT
    # Learn more: https://github.com/Spruik/PackML-MQTT-Simulator
    packmlmqttsimulator:
      enabled: true

  # dataprocessing involves microservices, whose main purpose is to process the data
  dataprocessing:
    nodered:
      enabled: true
      defaultFlows: false

  # Infrastructure
  infrastructure:

    # hivemq
    mqtt:
      enabled: true
      adminUser:
        enabled: false
        name: "admin-user"
        encryptedPassword: M0p0Y1hhR2VGbzRGTkV3aXVkOHFab05uTTE1dHl3R0U=:100:MaQCaaTWf260vQou02+Z5XKPtjxQJbS/cUfB0kxKf9qFzZQ1V4R2YtCH4GDSguE+CLIrhEG8m3XbuvdbWdKBnA==
      tls:
        useTLS: false
        insecureSkipVerify: true # Setting this to true will disable TLS certificate verification
        keystoreBase64: ""
        keystorePassword: "changeme"
        privateKeyPassword: "changeme"
        truststoreBase64: ""
        truststorePassword: "changeme"
        caCert: ""      
        mqtt_kafka_bridge:
          cert: ""  
          key: ""    
        sensorconnect:
          cert: ""
          key: ""
        iotsensorsmqtt:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZFekNDQXZ1Z0F3SUJBZ0lVYTQvMTlmUTNlYlFSWm1JZGNEVWNrUi83cW0wd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dURVhNQlVHQTFVRUF3d09hVzkwYzJWdWMyOXljMjF4ZEhRd0hoY05Nak13T1RFNU1UUXdOREkxV2hjTgpNalF3T1RFNE1UUXdOREkxV2pBWk1SY3dGUVlEVlFRRERBNXBiM1J6Wlc1emIzSnpiWEYwZERDQ0FpSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUtqNU8rbDVFc29kVkpYTDBzNW9zcXBHalJNeXNwZG8KbDRrdTN0ZldMS00vZS83NzBNTGlpYnhNK3Q0TnJXZUtnUy9uMGh0Wnlna0Z5UGRXTGk3U0kyTUxQc0RQS0h3TgpCUlNCdzVFQnVWOFFVaVpkOWRUbUlIdjJ3MVFQM3BYVVhqTjZUWHYvNENaaVlnV2NtU0V2L2JNWUNUWUhIbmdZCnJMZXBHdVkvQ1FKekQ2SFhiOWVXWTRWc1ovRVBtNGRnV0tRdXdkT1B4UXZxOGRVYllWRnhCYmxmSm5QZjA4TUEKMkZraGlvVFVvNHRObktsU0g3OEF1d0RHTHYreWdXbjFnU1ExejdJSEhDcSt5cmp0dDJPUk1UKzhBbE5CZHdkWQpMNmhodm9XWGtobUpyNDV0MldVUjZnZUNwZFM3OGlNZFpvTnJTYlcyeGdLNjJSdlZGU09MZ1dmQldvSkhpYWZIClNmOFZ5ODduU21IVVVIbFdURHBGR1F1MGlnVHBqZlB4dmZCcWlsSHBKOVFkaXZsT25xdE1ISDh4RTdzM3V0dWQKY0wvMDBycVI0N0hvNy95bUxtaE94ZE12WTltWFN0M0hMQjRuWEZ0d2VHdXN3aTYvdndrUVdRWGhueTV4YUxZYQpSRkVlb2RpQ0dCN3NMVVY5T0FTMDR3VGp0ZFlVdkp6eTMrdDExN0VUNzZ2aU1WR1Y2VlJrNWNXSzI4aXJkS2pvClVyK2hzM1hYdm1OdHB3YjRGcTNta1k1SWFiZ1lob3BQQlhuUVZZSWxQa01UZWJxSDlEY1plNzRDb3FmdHBocUoKSGREampCTFVCVGZ6cEkzN3dIcStpdHU5azBzbklWeGRnL00vT000d1BRVnBwenlkelZsTFpNQ3hLWENyWFlIcgpsbWV4dmRSVzlPeERBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlE2SXJRY3lkbFVIeHF3a0ZKQ213VGlZUk4yCnVqQWZCZ05WSFNNRUdEQVdnQlE2SXJRY3lkbFVIeHF3a0ZKQ213VGlZUk4ydWpBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQlZTeFhuOGhTMnB4UnRCZ2FrdnpRamk3UEhPUXhadzZMeQphOGJGWTEwanFRSjZyKzViZFhTeEh5aFZZYVVHMU1raUFldnloY0hyQ0pwVFhiRG5KN0JqUDdHeWt1NlQxRzJsCnRoM3hmTUhTaDRFRnJvMHBzQ3huUS9xN3VBemx6WHRZUFUzNkt3dTM3cGlSNG1WUFozZDloL3U5Uld6ZnV4QW0KcnhFRklXVjlLYVpPMjh4Vlo3b29tSkllOGZNb1hNcXp1ZWV6SDhFS3VvVW5NeGlNeS9CY1U5RkRLR2RjV2RhcQpKcDZTdEtzQzBuc2xwaEhtMnFkdVY5Y0ZJODlic1NPRFpzNGJhbEpwdWF5K1B4VVBWUU12cTJyQTJtV2o4eFZ1Cm1YRjV3TEtrUGFhdGY3ZWJONE8wdFU2bDhLYXk1dEJZOW9RVVNrTS9WODVaWCtlWmVBUkIyajZGVWFtbWNzemYKTHhRNmZqdnFNblk5MVFueUJERkVwaU5kK0svUG9WcFoxYjdjdDg5TlFoRHNPc09JTXlITCtIQmNWaTBCNVR1RwpjS2o4alNlT3VCemFwVThPS2h1aVRmcWF5YjBIZENLcUhkSXpWNzByYnVwc3ZacG9jVGgzdTE4VE9VMDlma3FkCk1yZitVNi8yS1RNWkcyS1VJNm5mUkt5SmpFZDV5eUVxZURLRDQrbTAraG9tVFZFUks1eFFtaWNyOTNhR2xkZHQKMlRFc2JvR2ZNcW5PYkxHbnowbHhnT0M2aTlPb1FLTUVHZGh3SjFqMXcvNGRCdFcxMThRYUxra2lTOU9JRTRTbwpvS3VzaC8zYklKSU5yMUsyeTlpUG9FZ1hjM1VsckVQT2MyazVsYzZValZISUpsSm9oczNqTFQ5eGxpRmRtMXhmCm5neE1mRVliUWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ28rVHZwZVJMS0hWU1YKeTlMT2FMS3FSbzBUTXJLWGFKZUpMdDdYMWl5alAzdisrOURDNG9tOFRQcmVEYTFuaW9FdjU5SWJXY29KQmNqMwpWaTR1MGlOakN6N0F6eWg4RFFVVWdjT1JBYmxmRUZJbVhmWFU1aUI3OXNOVUQ5NlYxRjR6ZWsxNy8rQW1ZbUlGCm5Ka2hMLzJ6R0FrMkJ4NTRHS3kzcVJybVB3a0NjdytoMTIvWGxtT0ZiR2Z4RDV1SFlGaWtMc0hUajhVTDZ2SFYKRzJGUmNRVzVYeVp6MzlQREFOaFpJWXFFMUtPTFRaeXBVaCsvQUxzQXhpNy9zb0ZwOVlFa05jK3lCeHdxdnNxNAo3YmRqa1RFL3ZBSlRRWGNIV0Mrb1liNkZsNUlaaWErT2JkbGxFZW9IZ3FYVXUvSWpIV2FEYTBtMXRzWUN1dGtiCjFSVWppNEZud1ZxQ1I0bW54MG4vRmN2TzUwcGgxRkI1Vmt3NlJSa0x0SW9FNlkzejhiM3dhb3BSNlNmVUhZcjUKVHA2clRCeC9NUk83TjdyYm5YQy85Tks2a2VPeDZPLzhwaTVvVHNYVEwyUFpsMHJkeHl3ZUoxeGJjSGhyck1JdQp2NzhKRUZrRjRaOHVjV2kyR2tSUkhxSFlnaGdlN0MxRmZUZ0V0T01FNDdYV0ZMeWM4dC9yZGRleEUrK3I0akZSCmxlbFVaT1hGaXR2SXEzU282Rksvb2JOMTE3NWpiYWNHK0JhdDVwR09TR200R0lhS1R3VjUwRldDSlQ1REUzbTYKaC9RM0dYdStBcUtuN2FZYWlSM1E0NHdTMUFVMzg2U04rOEI2dm9yYnZaTkxKeUZjWFlQelB6ak9NRDBGYWFjOApuYzFaUzJUQXNTbHdxMTJCNjVabnNiM1VWdlRzUXdJREFRQUJBb0lDQURmcFhITTVUa2ZWbzdiN1hqSlJmNGtMClZrUDdldy9SbW83WWxRRTdTOExxejBkRW9NUFR2UHF6U0RGd3VpZXdNMlljSWJCT0tpV0pKZ0g5b01ONlloNDAKU3R2MjBERVlCODNNMEY3cmdLQ2RvR2swbnhNRzRNblVFYmIvbDBuaG54Z09pSlFXeTE4NEg3STJxbzdLTi9ycQpZYVhnZmlzRUV5YWtqSk9TV1JOWDZsekZraXIyaHREUDJhYnc0S2hQYjVWSUtYZXRNMmpwb1lMQUVCZ29PMW9tCnkyejlLNjl6V0tOSmozRzdnTEFvQ3NZV09BMzJHbXE3cVRLUHFQWGNPQks0d1pScGVOOEdDY05lV1ZmWFk4SHcKbnA1WTQ1OXBCVUFFczh1MXB6RFBGK21ibkpzdWJjOTFZaFQ5NmJYSDFUTjRMVWcxQmRsQ1pYT3BzdGh6b1dvZQpySit1eG5kVlBUTlFhL1g5ZS92b0d4c09ranJVUDU4N2FvNy9VU256eEVTYnFTUmtBcUVKNFd5emUzS1NIcitHCkdFRk1vYUVmcWhUYk1DaWcwb2FMWVk4cW8rZU1ZV2dMZTZTUTJReTBsbWpFNHpoZjg4amh2STMrdUNQV0lVSkoKN3EvdU9ScEllcXlpMmdKRDUxcUdLUGZENVRMd2hYK3RvMTI1VUhyZVBWY0Q5WDZPQURGQzM4V1BsNWZrSm5xNwo5eC9FVllndlBiWkFvY2lnVzZWV2pIT2VYZTZ3Wkdpd05HTDhrZVVwcVNIbTlaMnRYdnJxUittRjI5TXI2NVZoCkk5UDVTZXBVWG1abHZxQkZFYVY2Vmw5MWNFb1dEQVFDbVMzVW5TWVkxeTBDMGEzNnc2dS9DaDFHVXd6Sjc1WVQKN280dk85eU5RL1ZKMHFIWjI3VDVBb0lCQVFEblFSQkhPU1pta2tHM2t4dTZ1dkZBK2x1YU96eHVybGMrN3NMUgo4K1FpU294OERlazJaeTI0dTN4SFlsTTZnZGFNbStCdURhSXJZYlA3eVQzZ3V4NVZqKzg0OS83SUdpZ254bFhPCjBYL1RoMnR4WXFvWFBxT1ZDOGM1ejRsaHRXQy9aenRuODdQNnFEQ3JFaUdxNWFUdmZIa2pNUGIvR1hzU3lrOGcKZExPdUdJb1U3SXc5WFFTMFdrVEdJd24xdUJFTzdVcnY5TlE4Z3ZYanNETzlIRXJaSWs4ZldxZ1dCeUxuYml0bAplcXZ6ekRBRDdSak0ybWNYbzJISXFDUDR0bmZBbjhWUVR5SGU5cmtIRThreDMyNmJxWDNhRDJhMllEMnBZNHEvCjJ1MmtOZ1RybWtqZW0xdjhaYVlUdFRHYnppWEJOaEN1blZNMXAxaHJ0MGVLRXpzckFvSUJBUUM3RGhFZUpuRkUKYlNYKzA3SkJBRTNOYjJhYkJyN3lMdHZzYU9rTU1MUXBmMlJKWFdEc08wQml0eXkrSXZybTVUVFhpaTFzelBvbgpvWVpGVEVoYXJ5VUhGL3pOZWdHUkdGUkg5bnBFcmlvdlJRbDJrM21hU3kyczZ4QjJpOFMzSWNRYnFUMGxDSTk2CklFdXA3Qm1JVUY0eEZuY0FreHlLWjNjRlRnTldOcnVMZWkyQ1hrUnR3aGErR3FvbTQzOHdRajNMeWY0c013YkIKemt0MjlRODc3U09NKzd4RkVFWjBwSDc2MndrNTY5bXZ6MVlvUi9DZFMzTG5POFhQeEdGZ0dKNzRnUlNrc2hUMgp6bnNXWkRUNlg4cFk2TC94RHIxajM1VmRoZ3hBOTc0enM5NjFZWSsrVTB5ZVNsbUI5bk0zR2MwaDZnOHdpNDdKCkFVQXZTN2JUb0tkSkFvSUJBQVhXR0lrVG9pcDRpbndObEdlVURENnRrdDVEbkhUV3BaRUxDWk91NmhVTGVKd3cKNWEvZnpzR1l5YndyZVJwQzZKMUgyZFF0TitpTVlMUjhFYm00UHoyOWtqWUgzRUJFbUxyWVFKWWxwMm81UXJicgozSXNWbzU5Qld0ZlVxd3p5UE96WHVDSVpmbk5YQjFOcDg3dVNiQ1UzS1ArQVh0dDFVeXZZTzBNQWJ3QjMwaFJSCkhBRDRkZ1B2TzBrYzNVVjhUY0hvcnpsN0hsZ2duZ0FQRkY4emRaZ2hTNG5wQ2REMGdTY0NHc3BHM0V3YzNTRmMKUElIL0NSY0pvcEFqM2pTS3RsOEFLVVNybXBrNzlOTis1bGNCNHBLL0psUDRpNGtTeUx1YnJZYkdDYlZaUDZxSwpqRWhCOTRKWk5tWE03dUdWeEZJcUFTWEhCckNWOXA5UlV0YmpRVjBDZ2dFQVNUQ2czQVk0clloenBIamF0M3BSCjl2OE95N3ZnL012KyswcTFYVEsxVzhOZnp5RDlhcEZvaVBlWlJ6QlNzZ09mSUhNTmdSUFhFYWl1Ni9DRUl3K0MKMG5xOVRQemZIaEhCOElKdHB1L3F5NkljcU12ZGVkVE9vMms2Z05nQmVaSjV0RVVOQ3ErRnpFaFVzc0VSNEhkcAowNVV4clFUaTF2alM1ajEzS3NXeHJrcDVBaGkyZDZmSTFFdUVwa0MvcEhkV3pLVlZrWi9KbGcyTkU1ZWhoVll0CllkMmg5ZmYvU1dhUDFNSGRvMDg0VndVdWRnWm9ESFBZR3NnVmgwMFV1TkFKYTd5K0FnODRDcllTRFZuYUxObE0KU0d1UnB0V1luenA5ckNGbUxBbUQzNkVTbEMvL1dYNG9iWXN6Nkprd3phK0h4eXhaRXlxWURPZ3pZQTRsRkRzNQpHUUtDQVFFQXlWZTNONmNQZzJkOG4xaFkyYk82YzlyOUZ5aHpmNkwxSDZrSzRwekRhVUZuaXB6WlNqVFFWQnlJCmsvMng5SUJiVmRuMVpzMjZFWmhDQzZUcXI3OUVBS0JUTjRPbWFsQWdQN1AzaCtXNWpaYmwybEFpZURWRkxMekoKblBSUkxIZStFU2tHMGVrS1ZVSStOZUNoK1VnaTM3dVljVFNoMWRUSElLS2JKcjNCVUxMWU5XNDNPVUVZV2tYVQp4aHBaRHJLd1BnOWZsVlZwRjJMSXBNaGhoV2QwYVNLdjJSSDQzMHdNUUhKeFRva2NlYUVObCsyZmJSZW8yd1duCjBPczcyOVFZR04vY1F3TjBwako2ZFJxVW5LUTkyd1QrVEVTVG9BMFViU0c0cklyRVFCbjVWUVYxNTV2Yjg4NGIKc2JCQ0JMOUpiM05rQkpHWncxb0xTSGJSWjNLZ3BBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
        packmlsimulator:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGVENDQXYyZ0F3SUJBZ0lVRmFXSkt1VUJudC84ZFAvSUdXNVpRNlRqdG44d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dqRVlNQllHQTFVRUF3d1BjR0ZqYTIxc2MybHRkV3hoZEc5eU1CNFhEVEl6TURreE9URTBNRFF5TmxvWApEVEkwTURreE9ERTBNRFF5Tmxvd0dqRVlNQllHQTFVRUF3d1BjR0ZqYTIxc2MybHRkV3hoZEc5eU1JSUNJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQW83cWlhbWxILzk0dGgwVWNpVHpTdjdqbkc1RUoKMXZYR0ZpQVJIcGY4RzRRWWdNK28yRDFjakdGdUtGaUVpSGJ0RlFhQitUMGpWbjRWTkQwTG9zb1NzUUZBR0dxZQo3L21lQVplSnd0VXpzbmpqbXh4UE1IZFFDRzBlRjdyODJ5Q3JaUFdGYUFzTzBFOU8rSldxTXBJdGh6ckc0QVZvCmVudEVxRk1RQ2cwWmZwTXY2VHJ3QlQ3QkNiNWFJUGlzWi8yQStmQXJPSStzQ2NqTDBmZ0h1dzdjZExWUWduL2kKTml3UWIzczVSRFVHL3RFem9xYW9Ycjh6T01wcEVtd3ZVb1JHVXg3SzFad0orZ3VlSTUwQWpSc016N1BhQUdyWApxSThKOXRjbVdzWGZ6ZVpidzNNWDhvNFA5dHV2NlZhQ2psbE9ldlBHOWRJaWI5bzVMbDZna3pVZkJYd21uTnBTCkxBOHZmTzlVdXRsTnFvN1VtR2U1RnJKRVlwWDFvL1JHY1BUUExVY0JtbHJKMkJkOExMQzdEemJOVUxZcyt0QzAKR2VJc3ZnOW1VZGN4NEVteUZIREVLSWRtdEQrVmlUSHNwVmlibVpNMEQ2R2JDZ2NSMmhidS8zN0xJSmhSZDlrZAovMWpLQmljeFZxUEdNakIxWCtVZ2NwUHNGaG5rTWMwNTkzWXh5UjJWSWhKRXlzMnJQYy9JS3pET1hZMWw5MmxSCm9tZVU3YktKQmhPOWpVdU8rZFhOeU15MkRKYVpsM05mUDJ2RnhSV2E1WitxL3JibE1xWEZ3QjJvbmNjVERjRDgKK1UzZlY0M0s4YnppeDREcHVvSTZPSVpOU1ZBMHN2cnQwNHNSc0cyZG9TcTk2dnBsTW50elRMY29jVkR3TUNXYgpBM21KMFJYVTAyajF0NjBDQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFRkhhallaY0xWbVpFZUJkblM1b2pjT3VJCkNvakVNQjhHQTFVZEl3UVlNQmFBRkhhallaY0xWbVpFZUJkblM1b2pjT3VJQ29qRU1BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBQ2c1a2NzeTlOc2FoRUhHNFMyZ2tiZWFpWlE0VjgyeQpRU2xkOHNnRGVUOGRXeEdBMU1DQ0FPMUE2Ni9WaCtRa2hFQTY5eUFlR0xsSE10QVdvcFlNUmN1MUFJNHk5djhVCktRcjkvTS8xZm9Nd3luQTh6OEF6VGJ0UlI2dk5CeThmUlAxbHdyeXZ0VXhqSzU0aGF0ZGNBZ2pad2ZIM2tEemwKUDd6TFNZN2JPYTRIWWk5TTJPemZMY29sR1NzTSttTXVBMHN5WTc3YmJIS0VDMnV6K1VadWt4SGNlYU5hMFk5Sgp4Sk1wRzRtUVRKV2FLZlBhSnhVOEZpeE9ncGM1ZS9qeWtUZEE2SStVbjhQLzJhSzlta2FyNFE3UFpnMzBRMllOCnpnbEFZMGZOc0xRcVY5L2tCaEVwS00xNUVSUWF6WEY2dG5Eb29ncWVJWWxpWlRIY3lMSGJ2VTRhRS9lNUJpbFYKUFUrQTZlU2JwWWxjakdrOXI4eGFMOUpiT0RxSXRUM1l2SVR3Ym1NbElDRnNhSUVZOFNsQ0JWYld6TzVTcGVVegpFVys3TGVEdXRhc1dOK2gxcnVSd2NKNi9UbjFFODFqdFBxVVRkUkFSOFJ3SXFQS2FwRFh5azFTVlR6UEJBZ056Cmw4YWRrc1JDOTZJdFFtZTJ0ZmdhSlV5YnB2UEg3dFRHYm5Wcks1QTYremIzSXJxMnhHWnNyeTNYKzQrWWVla3EKOXFDNFYrWW1hY0gvV2ZwaHVaQTYyaDJyUERrNEFtL1UvLzFqOE0wWHU4cFRKdUVEN2J6ajhaWkMyWlBQOXFraAptTXR4NS8yQXdYRldYUmFMQWJTdlRRTllIVEJCcUprWUI3VkF2bHZBMFNkdnhiMjdrZzlqOEVEMUJ3TDBNUEkyCjcwaHlUS0g2MTlGcgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ2p1cUpxYVVmLzNpMkgKUlJ5SlBOSy91T2Nia1FuVzljWVdJQkVlbC93YmhCaUF6NmpZUFZ5TVlXNG9XSVNJZHUwVkJvSDVQU05XZmhVMApQUXVpeWhLeEFVQVlhcDd2K1o0Qmw0bkMxVE95ZU9PYkhFOHdkMUFJYlI0WHV2emJJS3RrOVlWb0N3N1FUMDc0Cmxhb3lraTJIT3NiZ0JXaDZlMFNvVXhBS0RSbCtreS9wT3ZBRlBzRUp2bG9nK0t4bi9ZRDU4Q3M0ajZ3SnlNdlIKK0FlN0R0eDB0VkNDZitJMkxCQnZlemxFTlFiKzBUT2lwcWhldnpNNHlta1NiQzlTaEVaVEhzclZuQW42QzU0agpuUUNOR3d6UHM5b0FhdGVvanduMjF5WmF4ZC9ONWx2RGN4ZnlqZy8yMjYvcFZvS09XVTU2ODhiMTBpSnYyamt1ClhxQ1ROUjhGZkNhYzJsSXNEeTk4NzFTNjJVMnFqdFNZWjdrV3NrUmlsZldqOUVadzlNOHRSd0dhV3NuWUYzd3MKc0xzUE5zMVF0aXo2MExRWjRpeStEMlpSMXpIZ1NiSVVjTVFvaDJhMFA1V0pNZXlsV0p1Wmt6UVBvWnNLQnhIYQpGdTcvZnNzZ21GRjMyUjMvV01vR0p6RldvOFl5TUhWZjVTQnlrK3dXR2VReHpUbjNkakhKSFpVaUVrVEt6YXM5Cno4Z3JNTTVkaldYM2FWR2laNVR0c29rR0U3Mk5TNDc1MWMzSXpMWU1scG1YYzE4L2E4WEZGWnJsbjZyK3R1VXkKcGNYQUhhaWR4eE1Od1B6NVRkOVhqY3J4dk9MSGdPbTZnam80aGsxSlVEU3krdTNUaXhHd2JaMmhLcjNxK21VeQplM05NdHloeFVQQXdKWnNEZVluUkZkVFRhUFczclFJREFRQUJBb0lDQUNlSFl6ZjZ0Qm5YdTdrNVc5TGNYdXRQCnltZ3k0NlBFMGE2OHpqVkxMMkE3UzZrcHVaTi9lUTBoWnJXUjdXbC9BTzAvRlhrbHBCYjVPTWhVWnE5R1J5MzUKNWM0ZlM4RVhUR2tJKzRjUTd6ckxDZlNFYUxBRVZrdTZnSFh0UEtmdzRzQnNzR2sycGp4dnNWcTkwNG9ERmIvYwoxbS8yamt0bjRHTWRMcldtaFAyMHJuQUtQVEdlL1g4TE9IcFdYMVY1OUQ0am1HTysrQ09pbVdiWGtaSTlXOGRICmtTajRsQlpOSENpMklOVFJVcCtKeFlRaTVXcCtrZkRIbVllTG0vODVsVHJ6SjdoYnhHTGNsREQzOGs2ZTljQmQKcFNmTm84Ujd5RVdTbXgxMlFYclYvMWlZUEhOZ2pnVWs4L3NMV2xqZ3dkeFlaN1FvcUF6R0xHRUFFcGVIenpXaQpheGgvSW1YMnp2QXcxUEJJWDRSYnVhN0NLMWNiWkpkd2RiMy9qd2M3bndEMFM5N212QkpqcllQVEt6TE1ENGp2Ck1oWGI5WVU2VkNUZnpwb2k2cnNaMUJLOURkcER0WHpLYUpxNVM3S1VIWTdYa0hrSFJpYkI5SDU5YjU4Y3BFdDkKZk55Z1RXcHIycDB5V0tiUWxpVWp4NGc0aTBEc0k3N1RucUVuOUQ3TFZ2bURUcDc5UEQ0WExwZFpBV0FoV25yawplRGVnaUV4ZUlzZVkvOGMyOXdZTVNXekwvNWkyUU5YcERsdXdPYUNBZzQ4UmIxNXc0TU1mcWgyR0VJcGhGMCtyCmZxZE9pQ0VqY2ptQVYwbFNHbnNJZXIzVU9MdzF3cXBEOHoyUC9tSGhhZUZLeDEydnhEVHRqbGNMNmZYbEcrR3MKOS9yUUFTamV4TmhZNFo3aWtoUlhBb0lCQVFESWIyYmlIZXhpUmNmakMvVEVHdTJEcG9TM1I1RHFZckZPVFMrUgpCNmEwYWNWS1pPaWtYR253NEtEOTdNcDZBcTJ0QlZhY0pqOWZGUjRBVkRKZ1RuUXhqRk14QXFSZ3FzTkpRYmhwCiszNTdGRS85VlMzQ0Erd1dNdkFWeGRkTkpPQzdDL08ybkhpMVRkWDBaSGVDU1c0cmNGMkRQU1VuQ2lQVEk5MWUKdW84UXJ1aVUxcUJVb3d2dklwSmlFKzZCV1VSTGh4REtLYXJzUklGSHo0N0xOSTU0SEp3UTJ4YTVkSmNiRndqSgo3NDRBR0Y3NmRrWjJWTnpSREdtMlF5UmZQZ1BaTlJnNmJadEd1Tk9aem9yM2MrQVJua3VyRTgweXlHMlphcFZyCldGNUo0Z0RBTWQ3OHdDMyt4dWdXbWZZSmdXdzZMb2F0YlhYemJRL3dQanQxb09YdkFvSUJBUURSSGtCVUs0YkIKdHBhUHU0SSt5R0Q2ZTJwR3MyYW40QmZyK1ZnOUU5SVluNE44cndXNUVLM28vMlc2OWJiejBBaGxnK0U3emZJUwpaV2VrUzJ4cDdETUhQc1J0SHlxQ0FiVU5IaSs5ZFg1MjBaL3pGMzRyMzZwUC9HVGRXSDFGQUdoVk1EQ1N1ZXA2ClZ4Qkk5L2llSkpWMHpRYzhLR0dlZW1Yd0NidFF6MWFycHkrdC9zcU5BQ2ZlQjRReEUyMUk3UnNtci9oKytmQU0KWEdSK0ZkSzN3ZGVEUzBKVWhMcHhSQStvbVE4WjlhWEF2NFRBQld2czFIaE9PNmVjYTF2K2x0c20zc2VFS0kxTgpuVVlVNWdHa29leUI5aHI5cGV3K2w4TjVxK0EwVnlreXVjWmQyUDZ5WitXVXdMd3VJVHc1UnVhb1hwRHUrZThtCjd0ZmlLU2F5OWpnakFvSUJBQlpFa2lpUzdIMHFoWCtMQjRGMkFHYzg2OGUwOHJ1bmhVMU9zL2NuNDNSdHY5WjUKQ1lPaEpMLzNKTXV4TC9tSUxLVnBUMnIvc05DdWR1dlFidHhXT3dCNk40L2RYRWZGRVBjbGp3aHZRV2tKSTYzZwpkYm4xVjVoTHhuS1V6VXVyeWkvZHJ4RGRwMmQxSTAwSWtHSndLQVk1Y0pveEE5eW5lcjF0WVoyeG1rMWZNVVcvCjVvWWdxeVhCTUlRbTlMdDRJR2RIdFN6UW5rV3JnclZvc05PUW5qZG43a3JOSEdRME9NbHdzTEJHcGY4S3RocWIKWTA2b05QUWdyZW5xNGJLWElEUlVlc0diQmNKQXJIbU5BZEZtRlVHLzFXWkhSK2ZaYnB1NXhLbnRZbVJROElacAp3LzFPbUkyU3FaeEJOSjF2dklkbVBkNHNxQXNJVmRuNS8vOGNoZzhDZ2dFQkFNaVJGQy9tZzF2K0ROQVVqdW82CmM5RXFWNWN4OEE2cFB5aGp3WDdyS01IWEZGeWMzWWRQZVEyVkQzUk93VWQ5U3VCYXFjY2JVc2JVSGFDVmVvanAKTTFRS25vanVzRzE2eDdTcU5DMnBxRDY3OVlaSkRRbDFmenN5SDJld3ZJMVd3N3FZK3ExdnhYWExWV0kyKzJ4cQpPREtMaHhucXZSNHIxT054NGdleXBUVURxQlpnM3RKM3lNVUtQbjUzWElUcWJQVWhKOXhaU2lRQTVaMk12c3JpCkR4cnRMdFF6YlVLL2ZhaytEQjdnM1RaT09qdVZ0NXF4ZWlYR3o0NlY1ZWo3dFh2RmhtUzZKRFRCMkhxbzFBQ2MKRVdQZ3NLaUE0R0owV3RheXc5cFBrc01GTFQzTHB4VmowdTFtSWRhNHA3Tmp6a3pFVG92MmlhcTB2N2c1c2RWSgpsRE1DZ2dFQVZZRkloekdwdE8zTVl1UlUwRVhqaFZWL0JxN29YRjNHTkY5ckhRdGVyTmwxOXpoekxnUEVOV3RWCmlwdjlWSzk5TGRTUGEvREpCalpYcjIzSkpGTDlNb0NyYkFqcVJSOFQ4ZTZHTm9xVmZURXJhbFU2RGZmUVpiZ1MKbTRRQXQ5bUs2Q2dTUDB2bmNLTGhaL0pnZkRMcDFJeU1lZURuMzhHcWNkanMrM1NxMk9YZVV0MWFWOWJ5YjhvZApPckZxd0o3WTZ3YWlKbnpQdkFObER6NWVIaFVNY2hIWW5OZnhQZmtLVkc3R2pBSmI2L1M4aks0a2s0b3pQUjF3ClhuMDRkNFlkS1N5MDR6K2FtdWpzR2Y1QndlRUU1bjJiMXlYc203c09lVG5sRFE3SXNURzd5V3l1MTAxWWxUYXQKdnYxZUY5OWhlSk5CWFBRcmpHQXEwRHBiTEFJNWxBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
        node_red:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZCekNDQXUrZ0F3SUJBZ0lVTjVMdHYvZitZalM5V2RaMGVVV0lJNHJkZzNVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0V6RVJNQThHQTFVRUF3d0libTlrWlY5eVpXUXdIaGNOTWpNd09URTVNVFF3TkRFNVdoY05NalF3T1RFNApNVFF3TkRFNVdqQVRNUkV3RHdZRFZRUUREQWh1YjJSbFgzSmxaRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnSVBBRENDQWdvQ2dnSUJBTTA0azVCdzhhNDZvNzJocURUVFJXd0lyT2xDUHRzNWk4ZG11aFJBNUZlQ1gyNjEKN1dRYUlVK1BUN1pONmdhU0J4cWZSSEFPODFlRmlKSnZsTk1jZzVDNlBDVkMvb1pCVXJlbE5mMDlVV1FYajNKNwpLdVBvaWxtaWhwRm80SU81KzlRbXExSTZxWVN1bC91b2Z6ZUQ0ZEg4Z2xCd0R5a2VxMGdUOVAzK1I5UlNPdXFqCkRMVGpkSEI1VmdGbGdIbytRd1NCMFpkYnpuU1grdG9lcjFXdzdwNC9VaGM4ZEJESWcyeEl6Y25TcHZMbXNDbEMKMHduVVRRNDlZMHdWaDVVNlE0NW92eXRyQms0OWJ2OG9JVGdHSSs0MHltT29DTHBlZy90NDlZaTRHdXNyQU4xOQpySENJckI1KzFlQko0MHp3OUhRWDZ6eE9KNjJTSXdpcDl0dDNnZkFUOHc0dlFYRVdoZm5CMEsrY09PbUp4NnZNCnRUMDEraXd2TEtob3Y3REpHSS9DekVsN1lHWk9wTlN6RHM1ZVFjMnNJTDQ0TEdMYnNqVXBMM1hqYmdBeWlpMXkKS3B3VmV5WjZsZXdVdWVxeGdQVlVFTWtrTktYUnpjOTVPeklGN1FMVVNkajEyNnZFZWJZbVRFN1o0MktXdnFJUgp0L2NwZEVtUjVPMW9WUmJWbVdxU2xCdWNYdEpOTGI0bVAvYXdDdkdzSjVaRFZMTTN1dnFycGFqNVY5c1Ezc3AzCjYyZWt3MWVLaWNjcHJ5MGdrd0l4YmRTV3lNeDdxR1NUNlpaQ3NqbDJFU0VraHJyRmxGcythdDFOeWtua3pZZmMKZll1eHFCMEdGd0gzY2ZVVDdPL0UzR1JhWWpTYVl0SnpNVDQyZmZMSUs4eEE5UXNTYjc1ZVU5VGliS1NuQWdNQgpBQUdqVXpCUk1CMEdBMVVkRGdRV0JCU1VBNmVLanFhR3pUTmZQUENEb0tGTjBNeFVlakFmQmdOVkhTTUVHREFXCmdCU1VBNmVLanFhR3pUTmZQUENEb0tGTjBNeFVlakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElDQVFERVQ5TW1IWjZPU0MyMzJjdFdjRC9aanRrdXBPZmZ4dGdpNGkvdG15K0t3WDQxM2RUTwoxSTBRVXFoRVZkK2dVa2xpQ1k4em5oSURNc3R1bGVsOFV2b0tlR084QjVQajd3R25Mc09jOUdZVitSbk00bTU5Cm1SVXRvZDIyNTJrRlFScFN0Y2lza2lPTFNTTlVlWWxzZDBxQ0ZOU1RoK0hmZDJNcTdLazFXT2lBZGwzSzJOUWIKS2EwUkVzR0ZmdHV1UUs5UG9Qc1hRVXVDdlF1Qzhxdzh0dEZscU4xNks0YTZyeDVKYVQxZVBFNStpOHlHNlBRbgptaTl0Ri9VSzJhRzBMSXVaRTVDVTNYN3lVbWNad0RVb1E3MnlNQ1RJdzVtRCtHcURNeVpiNEl5dmM2MlFQUFhGCjRONndpZWI5UUxaMWNueEtKRnlnYUZFOSt1QWRYU1ZVeTVLZzNFa1VhU1VsUlc2ZjBEcjBqWDRkY21NdUFXalgKWVRPQnRMRGZpSmViNFdIZkRGem5KdStGSi8yYmtiM3JCbDlmNWJXSlhQamxFYjMxbE9zTFpvaHZtemdqVU5VZgpmNk9aMXdKdm5hSjU3d2FUc01DTlF4S3lzYWpvemw2cTVqbitzREZnT1VvWWdiWVhjZ2xYUkJxWXhSbEF6NmNiCms3VlFHeGJybGxDMWExSW9RaUdRYkhsWlJPa3RQYlhKUWdNVmhmV0hUcDlScXRDZUhHSUdMZ3VMeXlnYUhaelgKNnhBcTQvaXM2TW80aWpXVUpjN3VGVUlPTGdFaHJKZDl5b1dOUWp2MGJYWU14UzNGODYyVlo3blhqZGxVbnEwOApzRkkyVE1TT1U4QW0yeElWbTNwbVViS0dBc2VsWmRwb1dXaDJqQ3BxTDdNRThQZU5BRktUN08xK1FRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRRE5PSk9RY1BHdU9xTzkKb2FnMDAwVnNDS3pwUWo3Yk9Zdkhacm9VUU9SWGdsOXV0ZTFrR2lGUGowKzJUZW9Ha2djYW4wUndEdk5YaFlpUwpiNVRUSElPUXVqd2xRdjZHUVZLM3BUWDlQVkZrRjQ5eWV5cmo2SXBab29hUmFPQ0R1ZnZVSnF0U09xbUVycGY3CnFIODNnK0hSL0lKUWNBOHBIcXRJRS9UOS9rZlVVanJxb3d5MDQzUndlVllCWllCNlBrTUVnZEdYVzg1MGwvcmEKSHE5VnNPNmVQMUlYUEhRUXlJTnNTTTNKMHFieTVyQXBRdE1KMUUwT1BXTk1GWWVWT2tPT2FMOHJhd1pPUFc3LwpLQ0U0QmlQdU5NcGpxQWk2WG9QN2VQV0l1QnJyS3dEZGZheHdpS3dlZnRYZ1NlTk04UFIwRitzOFRpZXRraU1JCnFmYmJkNEh3RS9NT0wwRnhGb1g1d2RDdm5EanBpY2VyekxVOU5mb3NMeXlvYUwrd3lSaVB3c3hKZTJCbVRxVFUKc3c3T1hrSE5yQ0MrT0N4aTI3STFLUzkxNDI0QU1vb3RjaXFjRlhzbWVwWHNGTG5xc1lEMVZCREpKRFNsMGMzUAplVHN5QmUwQzFFblk5ZHVyeEhtMkpreE8yZU5pbHI2aUViZjNLWFJKa2VUdGFGVVcxWmxxa3BRYm5GN1NUUzIrCkpqLzJzQXJ4ckNlV1ExU3pON3I2cTZXbytWZmJFTjdLZCt0bnBNTlhpb25IS2E4dElKTUNNVzNVbHNqTWU2aGsKayttV1FySTVkaEVoSklhNnhaUmJQbXJkVGNwSjVNMkgzSDJMc2FnZEJoY0I5M0gxRSt6dnhOeGtXbUkwbW1MUwpjekUrTm4zeXlDdk1RUFVMRW0rK1hsUFU0bXlrcHdJREFRQUJBb0lDQUNjdm9HMjZRMHZEZ3JTWkE2ZGltQ1R5CjJ5R0hOcjFobGFFenFtQm5xN0pTQUtzQkxoMHBLQ2NxOUV1WlFSQ1VIYXNsc2ttN2NSZkxOYkxRZjVoNEgxOHAKVUliRTdoandyRHpJM1RCSDN4eS9xdkp2TmxkaWRkaDd3anBOem1FWXlFOVFPdkp1cFNQaXVyNmhBL216d3hEMwpxR0ozbzAxMHY3djVvNVJFVTY3bExMN1U5MzRxMkhjSmxEU2NEeFpJZ1QrQkVtWldiMnV3QVlSWXk1NFBOT0VlCnNpd2hyUC92YWJqcGhmSDl1VWMwYVhyWGViaXN3ekh1NHVFS1UyTlpSc0VRbTBCTkpWMFhPZlNhMHcwQmp5YlQKQ2JwUndhamtsMHNUWTc4QmVKSmpHYjB4WEJYNDR2VEh2MHNla0xxR1lBY3k4Z1lIM21lME9lQlRwQUZ3Sm0wNwpoei9HcUQ5bVV6VkVvOEdic2RiSDdLNi9UL2FXT2dFSDZZZzIvSHJTU05aUVp4YnZmeUYwMDJSVkZ4TVVQTGNTCjBBYUZYd3FmRkhQYkdUbnZoRU1GRUNYWHRSd2FYaGF3Tm5ySnd3SitCQjRQcmZUY3FrOS9LUnVPTTJjUE9ZUGYKMHM1VGhkSnVYN1NUYWNUQlRxeFRYRGc3ekFsNW40bzYxYWoxTTRISHpvZloxNzdHRUlqMTN0czAyZ0dERW1OagpEQm4yZUFKRlZrQjc5MmhNSktTNktiNnhuNlBDYTdRRWRoUG50OVIySWpaWU9mWU4zZk5qUU5lQ3hUWS9tcU02CjJMZEpUWGkrZHNUOHVzM1g1MWRyVUxqalVvdHkyM1BBS3BYdEh3NjFQa1BXNm1IY2JyZlBRdGM3a0dKKzNhU04KeHo3VGNSL1hPMjIyN3c1TVd2WVJBb0lCQVFEV1p3SnFKSldMY1NrYy9nLzlpWEZpVVk5Z2kwdzFCcE5RRVhsdwpKR0ZIQ0ZoaUcrelRpbXVHOXVuL3Yrc1IzbVNxNzV6U2tKMStBME55VU42WkhIRE1ZT3NkZXBCSkRuaW8ySTQ1ClVBbm54c3BKUEFRSlJyemJTYTBxL24ybzl5YVBoWDRLbFhEOFhFaUJuYXhOa3VLeElOK2VXNHJmcmlZcEhITGMKbHVRNlAyNTRjelgvc1FIdUFEVDQvaUVvWDNKM3BBYm1OYlJLWHNuNTZXbElWYUlLWVVkd1JBeXV5ZmIwS1hlQwpZT3JBbXRuczUwVmtJSnNoR2Nua09vVDJXTldzUTVzTDB6MTFZazBDSHRVcXhUS09NSVRBN2w1ZU15YklPekJZCkVteXBLdExGVTJobGczRTdrT0hNQ2g2TkxGSG9TM2cwTDN2TUJaOXlZZlNYcUFnMUFvSUJBUUQxQ1l0Q3JZZHAKZW5SRFF5eGdPSVdwSVI1WWVEWlpiOVBwa1pZbFpMd3BGUDIwU2UwbkNXT2syQk5iOS9FWnZhUFpVYXU5ZGMyQgpZU1d2UE1FVzRxdjRrYkhJczJlcFcyNjVOVTUzNmhrUW5uZTRPWnpBUjh1T2RZTlR5Q2U2Y0FIMno4UmptWktlCjFHc0FmSTEwamhVN3BjbDh6b0d4ZUh4NHlHYXZWQ3RCbnM4MktiakdJNkExSHpHZ1hXY2ZHR2FyRFlDQUQvY1YKeGNzWmsrYnF1Q1o1aUFKZUk3VEVKdEx3YlNhVWN4Nkk2U0hMVk9KQjFnZ3JZTmk0VjhiYjBTdGcwWExvU0w1VAp3OWdUVGlYSS9BV21aS0RVdFNFdnpWMXZXNklCSTArS1NINkRjQmV0L3JaUnR0aENnd1FFek5VM01QVXlYM1BhCjhxeEYwVWlETkN6ckFvSUJBRzI1b2g2NFFtQnV0Vi9GRm1IbTZVUXNBWGlqVVlrQnFIcWR0c3lSa2NkTW1nNzcKdzZRdmZ3QS9kVm9SMmpmMjNRWXVRcy93ZXVsMnVoblRFVmpDbVdlL1loUmdHVitLTEc0ZEJneUd6Y3IwamFvVgpNT3VlYkNDK0FBVzA0SktNaWd1QmdoUGdqMFpYNURPUmdoRGhUMnJmTEJKYlB5TmllTjBwVmc5V21jN0ZqNy9OCkZxR1k4U2ZncXp1U3MxMTZHNWJuTnpDeDQyYjhROW5HZnI4cU5CZWoyVyszSTlhQVBnYVBBajZUWXhEWEx4aHkKODZ4ZWs0WEpNTzNBbFRPT0d5eGlIUU5jUkdQQ3Z5NktvUVdXamx6K3I3SWRTK1podjBOU0oxZXJkampOVmJqdgpDc3FKRG5ZeG01MVV3SFgzYktPNW0vYjVKaDR2OG40VGE1NEJ2TkVDZ2dFQUZzNndtNkF6UG1vYmNEZE1aaGhjCnVJVlFvY051cTV4eENRaDRCVHIvR0lQUHFYeElDcDRoSERMUWVucjFnZ1BZd0YyTnNyRElWQWFLejJqRVFERVEKK0szMjhrdGdscTdmKzNVdXZKS1ppcVoxVmp4bWpxOGdEejU0M3M5K2d5Znh4dHRIMkUxdkRFR1JSQlpUeEVtRgpTR3dCK1Evdm1ta3dqTDE2Y1U5UVIyZFV1aUhnQlBGRDlDM1hIS29VOHh2K1VtV0xWR0FvQzJyQm9Mdlhmbmx0CmUxcGhmZ21zeGFVbmRTRnp1ZFdOUGdrVkVDdnljMVpNcEZ6N1R3MDhnVEZTN0V3U2VmUnJZcmlUNEJnaUJEY1EKLzQvV09IWXpoSk9FNHR5UWs3S0pzTUZXcFQxRnR2aENXQkRBeUZBUmk3RFZGN0lDNEpGcDR6TTdQYlJoSDNVMwp5UUtDQVFCZENUZmVWUUluTk5sREpQc0J4VmZYZGVBZGhicGVvQkEyV1pCb2xGcktHekIrdTJjUnZLU2dPbmdkCjlsVW9Sajc4azdDZWlyQzFiQ2VSaHVHWkk2Q2RNSVJpTE5ncCtUNjcwR0hDNng3Tlk5cStYQU5nR1FCRWdZbi8KczRVZUJuMElyY1dqejdiOFFIT2ZuQmdZUXRONUFia2tKWEIrdmUrVDJLYTlZOGYxS2k3RDkzTWhqMUVpbGRYOQoyS1pGejVZajdwSytBT0FYanFPa0tsTG9JYTZHUkZEOHV1LzlJSUVOMUpHVnpoelBwcGJ3clByMzRpNjhRVHNOClcwQU5tVHVZRjR3YkpnMGo1bEtnVUFaVWYrMUx4V2pNRVZFcUtYTWRSaFJPbmJHTTdOWXhTcGNiaWhzOFI0S1oKc21rNEhyUGFuSTZaR1FmbkJ3aTlNRzZ0NXlIWAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
        databridge:
          cert: ""
          key: ""   

    # apache kafka, mqttkafkabridge, kowl, kafkatopostgresql
    kafka:
      enabled: true
      defaultTopics: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic

  # timescaledb, factoryinsight, grafana, redis
  # datastorage is the basic infrastructure to get messages from MQTT, storing them in a database and exposing a REST API with KPIs that can be used in Grafana (contains timescaledb, factoryinsight, mqtt-to-postgresql, grafana, vernemq, )
  # If you want to enable only some of these components, set enabled to false and enable them in the detailed configuration below 000_commonConfig
  datastorage:
    enabled: true
    db_password: "changeme"




  kafkaBridge:
    enabled: false
    remotebootstrapServer: ""
    topicCreationLocalList: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic # ; seperated list of topics to create on local broker, if they do not exist
    topicCreationRemoteList: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic # ; seperated list of topics to create on remote broker, if they do not exist
    topicmap:
# Example topic map
#      - bidirectional: false
#        name: HighIntegrity
#        send_direction: to_remote
#        topic: ^ia\.(([^r.](\d|-|\w)*)|(r[b-z](\d|-|\w)*)|(ra[^w]))\.(\d|-|\w|_)+\.(\d|-|\w|_)+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$
#      - bidirectional: false
#        name: HighThroughput
#        send_direction: to_remote
#        topic: ^ia\.(([^r.](\d|-|\w)*)|(r[b-z](\d|-|\w)*)|(ra[^w]))\.(\d|-|\w|_)+\.(\d|-|\w|_)+\.(process[V|v]alue).*$

  kafkaStateDetector:
    enabled: false

  debug:
    enableFGTrace: false # Enables https://github.com/felixge/fgtrace. DO NOT USE IN PRODUCTION!
  tulipconnector:
    enabled: false
    domain: "tulip-connector.changeme.com"

  metrics:
    # Allow sending of non PII metrics to United Manufacturing Hub
    enabled: true

  racedetector:
    enabled: false

_001_customMicroservices:
  -
      name: example
      image: hello-world:latest
      enabled: false

      # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
      imagePullPolicy: Always

      # these will be passed as environment variables
      env:
        - name: LOGGING_LEVEL
          value: PRODUCTION
      # service type. NordPort or LoadBalancer
      serviceType: LoadBalancer
      # this will expose port 80 on the host on port 8080
      port: 80
      externalPort: 8080

      # startupProbe, livenessProbe, check whether port 9090 "/health" is accessible.
      # If not (e.g., due to container stuck), the container will be restarted
      # startupProbe: 100
      # livenessProbe: 50
      # probePort: 9090

      # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
      # Recommendation is to turn it off
      statefulEnabled: true
  -
      name: example1
      image: hello-world:latest
      enabled: false

      # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
      imagePullPolicy: Always

      # these will be passed as environment variables
      env:
        - name: LOGGING_LEVEL
          value: PRODUCTION
      # service type. NordPort or LoadBalancer
      serviceType: LoadBalancer
      # this will expose port 81 on the host on port 8081
      port: 81
      externalPort: 8081

      # startupProbe, livenessProbe, check whether port 9091 "/health" is accessible.
      # If not (e.g., due to container stuck), the container will be restarted
      startupProbe: 200
      livenessProbe: 500
      probePort: 9091

      # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
      # Recommendation is to turn it off
      statefulEnabled: false

##### DO NOT CHANGE ANYTHING BELOW HERE (except when you know what you are doing) #####

serviceAccount:
  create: true

### kafkastatedetector ###
kafkastatedetector:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafkastatedetector
    pullPolicy: IfNotPresent
  activityEnabled: true
  anomalyEnabled: true

### barcodereader ###
barcodereader:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/barcodereader
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "2m"
      memory: "30Mi"
    limits:
      cpu: "10m"
      memory: "60Mi"
  scanOnly: false # Debug mode, will not send data to kafka

### sensorconnect ###
sensorconnect:
  storageRequest: 1Gi
  image: management.umh.app/oci/united-manufacturing-hub/sensorconnect
  ioddfilepath: "/ioddfiles"
  lowerPollingTime: 100 # Fastest time, sensors should be requested to serve data
  upperPollingTime: 1000 # Slowest time, sensors should be requested to serve data
  pollingSpeedStepUpMs: 20 # Time to add to actual stepping in case of failure
  pollingSpeedStepDownMs: 1 # Time to add to actual stepping in case of no-failure
  sensorInitialPollingTimeMs: 100 # Time to begin retrieving sensor data (Set higher then lowerTickSpeedMs to not kill sensors instantly, after they recovered from overload)
  deviceFinderTimeSec: 20 # Time in sec, before finding new devices
  deviceFinderTimeoutSec: 1 # HTTP timeout for finding new sensors. NEVER set lower then DeviceFinderFrequenceySec
  maxSensorErrorCount: 50 # Errors before a sensor is temporarily disabled
  allowSubTwentyMs: 0 # Set to 1 to allow lowerTickSpeedMs of under 20ms. THIS IS DANGEROUS !!!
  additionalSleepTimePerActivePortMs: 0.0 # Additional time to add to sleep time, based on active ports (especially helpful if you mix devices with 1-2 sensors and devices with 8 sensors)
  additionalSlowDownMap: [] # JSON map, allowing for slowing down/speeding up sensors based on serialnumber, productcode or url
                            # Example:
                            # [{"serialnumber":"000200610104","slowdown_ms":-10},{"url":"http://192.168.0.13","slowdown_ms":20},{"productcode":"AL13500","slowdown_ms":20.01}]
  resources:
    requests:
      cpu: "10m"
      memory: "75Mi"
    limits:
      cpu: "100m"
      memory: "200Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: ""

### iotsensorsmqtt ###
iotsensorsmqtt:
  image: management.umh.app/oci/amineamaach/sensors-mqtt
  tag: v1.0.0
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "30m"
      memory: "50Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: ""

### opcuasimulator ###
opcuasimulator:
  image: management.umh.app/oci/united-manufacturing-hub/opcuasimulator
  tag: 0.1.0
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "30m"
      memory: "50Mi"
  service:
    annotations: {}
    # certadds can add hostnames and ip addresses to the certificate for the simulator so connection to the opcua client is easier
  certadds:
    hosts: "united-manufacturing-hub-opcuasimulator-service"
    #ips: "1.1.1.1"

### kafkabridge ###
kafkabridge:
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-bridge
    pullPolicy: IfNotPresent
  # tag: development
  initContainer:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-init
    pullPolicy: IfNotPresent

### nodered ###
nodered:
  mqtt:
    encryptedPassword: ""
  tag: 3.0.2
  port: 1880
  storageRequest: 1Gi
  env:
    NODE_RED_ENABLE_SAFE_MODE: false
  timezone: Berlin/Europe
  serviceType: LoadBalancer
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  flows: {}
  settings: {}



### factoryinsight ###
factoryinsight:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/factoryinsight
    pullPolicy: IfNotPresent
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2
  replicas: 2
  user: "factoryinsight"
  version: 2  # Minimum api version to host (e.g: 2 will host v1 and v2, 3 will host v1, v2 and v3)
  # Password will be generated automatically
  db_host: "united-manufacturing-hub"
  db_database: "factoryinsight"
  db_user: "factoryinsight"
  redis:
    URI: united-manufacturing-hub-redis-headless:6379
  service:
    annotations: {}
  pdb:
    enabled: false
  hpa:
    enabled: false
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 50m
        memory: 50Mi
  insecure_no_auth: false # DO NOT ENABLE IN PRODUCTION. This will disable authentication and authorization

### kafka-to-postgresql ###
kafkatopostgresql:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-to-postgresql
    pullPolicy: IfNotPresent
    # tag: latest
  initContainer:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-init
    pullPolicy: IfNotPresent
  replicas: 1
  storageRequest: 1Gi
  listenTopic:
    # All topics except processValue
    # Kafka doesn't seem to be able to do negative lookaheads
    #highIntegrity: '^ia\..+\..+\..+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$'
    #highThroughput: '^ia\..+\..+\..+\.(process[V|v]alue).*$'
  resources:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 150Mi

### timescaleDB ###
timescaledb-single:
  replicaCount: 1
  image:
    # Image was built from
    # https://github.com/timescale/timescaledb-docker-ha
    repository: management.umh.app/oci/timescale/timescaledb-ha
    tag: pg13.8-ts2.8.0-p1
    pullPolicy: IfNotPresent
  prometheus:
    image:
      repository: management.umh.app/oci/prometheuscommunity/postgres-exporter

  # This configuration will be passed on to Patroni directly, there are a few things that are
  # injected/changed, these are:
  #   - archive_command will be set to /bin/true if backup is disabled
  #   - any context sensitive parameter (scope, namespace, name) will be overridden by the Kubernetes context
  # https://patroni.readthedocs.io/en/latest/SETTINGS.html#settings
  patroni:
    postgresql:
      create_replica_methods:
        - basebackup

  postInit:
    - configMap:
        name: timescale-post-init
        optional: false
    - secret:
        name: timescale-post-init-pw
        optional: false
  service:
    primary:
      type: LoadBalancer
  serviceAccount:
    create: false

### grafana ###
grafana:
  image:
    repository: management.umh.app/oci/grafana/grafana
  downloadDashboardsImage:
    repository: management.umh.app/oci/curlimages/curl
  serviceAccount:
    create: false

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    minAvailable: 1
  #  maxUnavailable: 1

  testFramework:
    enabled: false
    image: management.umh.app/oci/bats/bats

  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: LoadBalancer
    port: 8080

  extraInitContainers:
    - image: management.umh.app/oci/united-manufacturing-hub/grafana-umh:1.2.1
      name: init-plugins
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'cp -r /plugins /var/lib/grafana/']
      volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana

  ## Enable persistence using Persistent Volume Claims0
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    size: 5Gi
  initChownData:
    ## If false, data ownership will not be reset at startup
    ## This allows the prometheus-server to be run with an arbitrary user
    enabled: true
    image:
      repository: management.umh.app/oci/library/busybox

  sidecar:
    image:
      repository: management.umh.app/oci/kiwigrid/k8s-sidecar
  imageRenderer:
    image:
      repository: management.umh.app/oci/grafana/grafana-image-renderer
  # Use an existing secret for the admin user.
  admin:
    existingSecret: "grafana-secret"
    userKey: adminuser
    passwordKey: adminpassword

  ## Extra environment variables that will be pass onto deployment pods
  ##
  ## to provide grafana with access to CloudWatch on AWS EKS:
  ## 1. create an iam role of type "Web identity" with provider oidc.eks.* (note the provider for later)
  ## 2. edit the "Trust relationships" of the role, add a line inside the StringEquals clause using the
  ## same oidc eks provider as noted before (same as the existing line)
  ## also, replace NAMESPACE and prometheus-operator-grafana with the service account namespace and name
  ##
  ##  "oidc.eks.us-east-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:sub": "system:serviceaccount:NAMESPACE:prometheus-operator-grafana",
  ##
  ## 3. attach a policy to the role, you can use a built in policy called CloudWatchReadOnlyAccess
  ## 4. use the following env: (replace 123456789000 and iam-role-name-here with your aws account number and role name)
  ##
  ## env:
  ##   AWS_ROLE_ARN: arn:aws:iam::123456789000:role/iam-role-name-here
  ##   AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
  ##   AWS_REGION: us-east-1
  ##
  ## 5. uncomment the EKS section in extraSecretMounts: below
  ## 6. uncomment the annotation section in the serviceAccount: above
  ## make sure to replace arn:aws:iam::123456789000:role/iam-role-name-here with your role arn

  env:
    GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: umh-datasource,umh-v2-datasource

  ## "valueFrom" environment variable references that will be added to deployment pods
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#envvarsource-v1-core
  ## Renders in container spec as:
  ##   env:
  ##     ...
  ##     - name: <key>
  ##       valueFrom:
  ##         <value rendered as YAML>
  envValueFrom:
    FACTORYINSIGHT_BASEURL:
      secretKeyRef:
        name: factoryinsight-secret
        key: baseURL
    FACTORYINSIGHT_APIKEY:
      secretKeyRef:
        name: factoryinsight-secret
        key: apiKey
    FACTORYINSIGHT_CUSTOMERID:
      secretKeyRef:
        name: factoryinsight-secret
        key: customerID
    FACTORYINSIGHT_PASSWORD:
      secretKeyRef:
        name: factoryinsight-secret
        key: password
    GRAFANAREADER_USER:
      secretKeyRef:
        name: grafana-secret
        key: databaseuser
    GRAFANAREADER_PASSWORD:
      secretKeyRef:
        name: grafana-secret
        key: databasepassword

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: umh-v2-datasource
          # <string, required> datasource type. Required
          type: umh-v2-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          jsonData:
            customerID: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            baseURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: false
          editable: false
        # <string, required> name of the datasource. Required
        - name: umh-datasource
          # <string, required> datasource type. Required
          type: umh-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          jsonData:
            customerId: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            serverURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: false
          editable: false
        # https://grafana.com/docs/grafana/latest/datasources/postgres/
        - name: UMH TimescaleDB 
          type: postgres
          url: united-manufacturing-hub:5432
          user: $GRAFANAREADER_USER
          isDefault: true
          secureJsonData:
            password: $GRAFANAREADER_PASSWORD
          jsonData:
            database: umh_v2
            sslmode: 'require' # disable/require/verify-ca/verify-full
            maxOpenConns: 100 # Grafana v5.4+
            maxIdleConns: 100 # Grafana v5.4+
            maxIdleConnsAuto: true # Grafana v9.5.1+
            connMaxLifetime: 14400 # Grafana v5.4+
            postgresVersion: 1300 # 903=9.3, 904=9.4, 905=9.5, 906=9.6, 1000=10
            timescaledb: true

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    database:
      host: united-manufacturing-hub
      user: "grafana"
      name: "grafana"
      password: "changeme"
      ssl_mode: require
      type: postgres
    log.console:
      format: json

### packmlmqttsimulator ###
packmlmqttsimulator:
  image:
    repository: management.umh.app/oci/spruiktec/packml-simulator
    pullPolicy: IfNotPresent
    hash: 01e2f0da3542f1b4e0de830a8d24135de03fd9174dce184ed329bed3ee688e19
  env:
    area: DefaultArea
    productionline: DefaultProductionLine
    site: testLocation
    mqtt:
      password: INSECURE_INSECURE_INSECURE
      encryptedPassword: ""
  replicas: 1
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "30m"
      memory: "50Mi"

### tulip-connector ###
tulipconnector:
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/tulip-connector
    pullPolicy: IfNotPresent
    # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
    tag: 0.1.0
  replicas: 1
  env:
    mode: prod
  resources:
    limits:
      cpu: 30m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 20Mi

### mqtt-kafka-bridge ###
mqttkafkabridge:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/mqtt-kafka-bridge
    pullPolicy: IfNotPresent
  pdb:
    enabled: true
    minAvailable: 1
  initContainer:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-init
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "400m"
      memory: "300Mi"
    limits:
      cpu: "500m"
      memory: "450Mi"
  mqttSenderThreads: 1
  kafkaSenderThreads: 1
  kafkaAcceptNoOrigin: "false"
  rawMessageLRUSize: 100000
  messageLRUSize: 100000
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: ""

### kafka-to-blob ###
kafkatoblob:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-to-blob
    pullPolicy: IfNotPresent
  replicas: 1
  pdb:
    enabled: true
    minAvailable: 1

##### CONFIG FOR APACHE KAFKA #####
redpanda:
  image:
    repository: management.umh.app/oci/redpandadata/redpanda
  serviceAccount:
    create: false
  fullnameOverride: united-manufacturing-hub-kafka
  statefulset:
    replicas: 1
    initContainerImage:
      repository: management.umh.app/oci/library/busybox
  rbac:
    enabled: true
  storage:
    persistentVolume:
      size: 10Gi
  listeners:
    kafka:
      port: 9092
  resources:
    cpu:
      cores: 1
    memory:
      enable_memory_locking: true
      container:
        max: 2Gi
  config:
    cluster:
      auto_create_topics_enabled: true
    tunable:
      default_topic_partitions: 6
  tls:
    enabled: false
  console:
    image:
      registry: management.umh.app/oci
    serviceAccount:
      create: false
    service:
      type: LoadBalancer
      port: 8090
      targetPort: 8080
    console:
      config:
        kafka:
          brokers:
            - united-manufacturing-hub-kafka:9092

##### CONFIG FOR REDIS #####
redis:
  image:
    registry: management.umh.app/oci
  architecture: standalone
  commonConfiguration: |-
    maxmemory-policy allkeys-lru
    maxmemory 50mb
    # Backwards compatability with Redis version 6.*
    replica-ignore-disk-write-errors yes
  master:
    extraFlags:
      - --maxmemory 50mb
    livenessProbe:
      initialDelaySeconds: 5
    readinessProbe:
      initialDelaySeconds: 120
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 50Mi
  metrics:
    enabled: true
    image:
      registry: management.umh.app/oci
  pdb:
    create: true
    minAvailable: 2
  serviceAccount:
    create: false
  auth:
    existingSecret: redis-secret
    existingSecretPasswordKey: redispassword
  sentinel:
    image:
      registry: management.umh.app/oci
  volumePermissions:
    image:
      registry: management.umh.app/oci
      repository: bitnami/os-shell
  sysctl:
    image:
      registry: management.umh.app/oci
      repository: bitnami/os-shell

##### CONFIG FOR HIVEMQ CE
##### you can set a tag if you want a version other than 2024.1
mqtt_broker:
  image:
    repository: management.umh.app/oci/hivemq/hivemq-ce
    tag: 2024.1
    pullPolicy: IfNotPresent
  rbacEnabled: false
  initContainer:
    hivemqextensioninit:
      image:
        repository: management.umh.app/oci/united-manufacturing-hub/hivemq-init
        tag:
        pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 700m
      memory: 1700Mi
    requests:
      cpu: 300m
      memory: 1000Mi
  persistence:
    extension:
      size: 100Mi
    storage:
      size: 2Gi
  service:
    mqtt:
      enabled: true
      port: 1883
    mqtts:
      enabled: true
      port: 8883
      tls_versions:
        - "TLSv1.3"
        - "TLSv1.2"
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA
    type: LoadBalancer
    ws:
      enabled: false
      port: 8080
    wss:
      enabled: false
      port: 8443
      tls_versions:
        - "TLSv1.3"
        - "TLSv1.2"
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA

metrics:
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/metrics
    pullPolicy: IfNotPresent
    #tag: latest
  cronJob:
    schedule: "0 */4 * * *" # Run every 4 hours

databridge:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/databridge
    pullPolicy: IfNotPresent
  pdb:
    enabled: true
    minAvailable: 1
  replicas: 1
  resources:
    requests:
      cpu: "400m"
      memory: "300Mi"
    limits:
      cpu: "500m"
      memory: "450Mi"


### kafka-to-postgresql ###
kafkatopostgresqlv2:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-to-postgresql-v2
    pullPolicy: IfNotPresent
    # tag: latest
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 150Mi
  probes:
    startup:
      failureThreshold: 30
      initialDelaySeconds: 10
      periodSeconds: 10
    liveness:
      periodSeconds: 5
    readiness:
      periodSeconds: 5
  logging:
    level: PRODUCTION
  asset:
    cache:
      lru:
        size: 1000
  workers:
    channel:
      size: 10000
    goroutines:
      multiplier: 16 # Logical CPU's * this value
  database:
    user: "kafkatopostgresqlv2"
    password: "changemetoo"
