# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Please adjust the following lines
# _000_commonConfig contains the most common configuration options. To go into the details you can look into the configurations option after _000_commonConfig
_000_commonConfig:
  serialNumber: "default"  # usually the hostname

  datamodel_v2:
    enabled: true
    bridges:
      - mode: mqtt-kafka
        brokerA: united-manufacturing-hub-mqtt:1883
        brokerB: united-manufacturing-hub-kafka:9092
        topic: umh.v1..*              # accept mqtt or kafka topic format. after the topic seprator, you can use # for mqtt wildcard, or .* for kafka wildcard
        topicMergePoint: 5
        partitions: 6                 # optional: number of partitions for the new kafka topic. default: 6
        replicationFactor: 1          # optional: replication factor for the new kafka topic. default: 1
    database:
      name: "umh_v2"
      host: "united-manufacturing-hub"
    grafana:
      dbreader: "grafanareader"
      dbpassword: "changeme"

  # This allows to specify data sources, which is mostly used for instances running on the edge
  datasources:

    # barcodereader reads out connected USB barcodereaders emulating a keyboard
    barcodereader:
      enabled: false
      USBDeviceName: "Datalogic ADC, Inc. Handheld Barcode Scanner"
      USBDevicePath: "" # Linux device path, if empty, USBDeviceName is used
      customerID: "raw"
      location: "barcodereader"
      machineID: "barcodereader"

    # sensorconnect searches for ifm IO-Link gateways and reads out the connected sensors
    sensorconnect:
      enabled: false
      iprange: "192.168.10.1/24"  # IP Range in CIDR notation
      enableKafka: true
      enableMQTT: false

    # iotsensorsmqtt simulates IoT sensor data and publishes it over MQTT.
    # Learn more : https://github.com/amine-amaach/simulators/tree/main/ioTSensorsMQTT
    iotsensorsmqtt:
      enabled: true


    # iotsensorsmqtt simulates IoT sensor data as over OPC UA.
    # Learn more : https://github.com/amine-amaach/simulators/tree/main/ioTSensorsOPCUA
    opcuasimulator:
       enabled: true

    # packmlmqttsimulator simulates PackML state data and publishes it over MQTT
    # Learn more: https://github.com/Spruik/PackML-MQTT-Simulator
    packmlmqttsimulator:
      enabled: true

  # dataprocessing involves microservices, whose main purpose is to process the data
  dataprocessing:
    nodered:
      enabled: true
      defaultFlows: false

  # Infrastructure
  infrastructure:

    # hivemq
    mqtt:
      enabled: true
      adminUser:
        enabled: false
        name: "admin-user"
        encryptedPassword: M0p0Y1hhR2VGbzRGTkV3aXVkOHFab05uTTE1dHl3R0U=:100:MaQCaaTWf260vQou02+Z5XKPtjxQJbS/cUfB0kxKf9qFzZQ1V4R2YtCH4GDSguE+CLIrhEG8m3XbuvdbWdKBnA==
      tls:
        useTLS: false
        insecureSkipVerify: true # Setting this to true will disable TLS certificate verification
        keystoreBase64: ""
        keystorePassword: "changeme"
        privateKeyPassword: "changeme"
        truststoreBase64: ""
        truststorePassword: "changeme"
        caCert: ""      
        mqtt_kafka_bridge:
          cert: ""  
          key: ""    
        mqtt_bridge:
          local_cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZHVENDQXdHZ0F3SUJBZ0lVRjBRY3Y5dm8yMDFKYlJ5RGRnQXh5TVpvRFJzd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0hERWFNQmdHQTFVRUF3d1JiWEYwZEY5aWNtbGtaMlZmYkc5allXd3dIaGNOTWpNd09URTVNVFF3TkRJeApXaGNOTWpRd09URTRNVFF3TkRJeFdqQWNNUm93R0FZRFZRUUREQkZ0Y1hSMFgySnlhV1JuWlY5c2IyTmhiRENDCkFpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBS3IwbWE4VDBzdHEwWDlmYVd0blpRQm4KaTVtOXY5YjZjWjc1QVd5VW91eXh5dlAyMW03VW43U2RrY2tXRGZuQXZUU0NZU0lEWDVMTEhhVGw3WGxCaTNkRApYL0hhbXlzdUt5aFVMaVVYb1I0VjNjV2J6aFJ4NlR4Z0t4TXRLajloand0ZC8wb25XU3dBK0VSbE1Gb0NVc0xsCllmTUM4U05zc3lBRGo1M3BHZ0JwMW1iSkk2OGttMVRERG1hTzBtSWxibzdWbUdsNWxUb2N6VUpxKy9xSHpQYVIKM2FFZlFFVnFqRjdDdnQ2dDUwOVBYQ0RROXF3SHhRaUEvS1o2UDR6UU02NjVNdWVoVElRVXZSRnZTYzhYSlRRcgpOclJXeDlabEx5S01ETER1by9kcTNPT2lBdGlmTlV6djY1YzQrNjlKd0VQSWdjS0MrVGpvVlJQdllJKzM3WmsyCjZPVDZ3bHU5WEVVNHVmeHFkNGZJNUdFaTF6Skh0aE9mNXZaaTBHamJpeWVyVFg2Tjd2cG9VNzg2RVFwSW9zdXoKeG91VDBReHdzbWFXSy9DaFhCZ1RPaGdMeU0vL1ZXZHVjR2o3NnlVRmdmT1lidjM3V1c2RVhKT1hCczEyTDVKYgozYzhETmVsclIzWG9EaUc1R0JkRUFNTnVQQW5kN2t2K3RjQUtzdFhnRFdhVWRBWTdyTWVteWgwREJybzZLc1NPClpZTlBVMXVvOVEzSXVLRmdTRXNleTEzeXgxSlVWVFpvaCtNejNuYm9remRyUTVVWWg1ZGVwOGZZbFdSR2QrZDQKVHFxVUlKUnNtSnV0UjF3ZkxTa2NHL1VBK2ZZaTNWZiszS2g1WU9BZHJyeVpEdzR1T3h3Z0lOaTZTcUhaRUR5awpmRU1pWlMrU3ZtTks0RWlNNy91NUFnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCUkVyWUxKV3JZRU5OWTNFUkFxCmpQNW9QK3lZRlRBZkJnTlZIU01FR0RBV2dCUkVyWUxKV3JZRU5OWTNFUkFxalA1b1AreVlGVEFQQmdOVkhSTUIKQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBSEY1U05mdDlNQUd4NjIzQ3FSc0gwY2NFWgpETi9Ea29YajZFTm5oZDNjMVI2USs0VUJYcy9jUklJM2tEV1NOU2NQc2ZkRS8wVjRuclUxY2FRZ2lBSXdSZnZoClN5Q2pLRS9rY2Y5NEJiUVBPZytqUzhpdlVybFBpTXBnRzhwREZMV0ttd1ZwVi80M0VSNkpHcmpEWUd3bEhaR2MKbGV5MDRxV3pLU2M4bWVtZ2dtcGRqQjRyVzlIcERHY0R6c0R6M1p0emR4V0FBTXlDQVhlSzRRc2Vocmp6N2RzdQpKcVo3RWs0TzhtZXhraU4rOUpiWEE0M1ZTS0hXOXJUeHdFTHk3QmR2R0VIMlFmSmJERjlHLzhHMG1UUGw1RDc2CnNOQXVwWFIxci93ZzR1OE1Db1d1TDljdEtKK21JWSt6Vk16QTRsWUxZcFhZT1RCQXFMRVdaVVNEejVlb254NGcKSEFXM3RObFgwdlZGd2xrd1VhN1IySFVrZlhsYSt1NUU0NThWbW5zK0FvcENrWmZJUnpUZ3lPWTF4RjI0c3RSLwpWaFNXK3lBTVIyNGdJdVplbVhNRHVCMzlyNUZQQW9xOFZVSmhIeTRwY1VvWmt1SWRrdHdrbGo3TmQ0L29xbC9xCmhKdnNFUm5MK3FnZFBMRGhCWmIxekNuOTZEVGF4NVh3SjUrMDJZU21RWmxOckVka1E1S2V3RVRwcWg5TDFneksKYTROLzBmb1BtVE00ZDJKU1AzOXdGdlJOY2cva0c5aTQxanJFVlYzdWpkR2NBSlVRQWdqUmFNNkZ1cmQwV0RydQpZa1lZTEpIcmNJeUsyOURibHg1V1p0WEZlZDdQV1ExSmsvRVU1UnJ1bjJSYlgxRTJ3L0pFS0tUNkxlZ0thbkt4Cmxqdjd0cGNPd3YzWVpVaUFZQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
          local_key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRQ3E5Sm12RTlMTGF0Ri8KWDJscloyVUFaNHVadmIvVytuR2UrUUZzbEtMc3Njcno5dFp1MUorMG5aSEpGZzM1d0wwMGdtRWlBMStTeXgyawo1ZTE1UVl0M1ExL3gycHNyTGlzb1ZDNGxGNkVlRmQzRm04NFVjZWs4WUNzVExTby9ZWThMWGY5S0oxa3NBUGhFClpUQmFBbExDNVdIekF2RWpiTE1nQTQrZDZSb0FhZFpteVNPdkpKdFV3dzVtanRKaUpXNk8xWmhwZVpVNkhNMUMKYXZ2Nmg4ejJrZDJoSDBCRmFveGV3cjdlcmVkUFQxd2cwUGFzQjhVSWdQeW1laitNMERPdXVUTG5vVXlFRkwwUgpiMG5QRnlVMEt6YTBWc2ZXWlM4aWpBeXc3cVAzYXR6am9nTFluelZNNyt1WE9QdXZTY0JEeUlIQ2d2azQ2RlVUCjcyQ1B0KzJaTnVqaytzSmJ2VnhGT0xuOGFuZUh5T1JoSXRjeVI3WVRuK2IyWXRCbzI0c25xMDEramU3NmFGTy8KT2hFS1NLTExzOGFMazlFTWNMSm1saXZ3b1Z3WUV6b1lDOGpQLzFWbmJuQm8rK3NsQllIem1HNzkrMWx1aEZ5VApsd2JOZGkrU1c5M1BBelhwYTBkMTZBNGh1UmdYUkFERGJqd0ozZTVML3JYQUNyTFY0QTFtbEhRR082ekhwc29kCkF3YTZPaXJFam1XRFQxTmJxUFVOeUxpaFlFaExIc3RkOHNkU1ZGVTJhSWZqTTk1MjZKTTNhME9WR0llWFhxZkgKMkpWa1JuZm5lRTZxbENDVWJKaWJyVWRjSHkwcEhCdjFBUG4ySXQxWC90eW9lV0RnSGE2OG1ROE9ManNjSUNEWQp1a3FoMlJBOHBIeERJbVV2a3I1alN1QklqTy83dVFJREFRQUJBb0lDQUNCTUxOcklUbnRTMTNpT2NJNnpqbi9vCmtCWEFKUVc2OUF0YU5Od3NLcW00SDBVL0haejd1NTUyWkd3T3FCNUd2UmcyQjU3UzcxUCszcjlnRnlEZzhyWFoKK3o3b2s0Y3haa0xzd0hrT2dVaDdUaFkrek16TkJvajdERGhId0tNUHplUVNZcUJDVmRUNzYrdVVDSElBM1Z6bgoxRDBDa2NjbENxUmlOOWhZQ1NzSjA5RkFiK2J2Ymc4eCtMOEVmWmZBUmFaamtUTmdIb0xIblRuT2w0TnA4NTJqCnlqRGVCQmo1TzhMTlhSMFowc2tIajdxOWI5VHBkTjZaNitHUjEvN0UrUGFxRTRWeVVrL2owU0tCbVhxdi96M2YKYWlyZytFazNmWk96ek5RQ2llUzlBalZaVHR0WkhNdEh5b1ViNVdUazlKZDV3cFlhZzNZdVlxQnRDWnV0WG94VAp2Z3E0UnYxNDRkMzdKMkV2aEhHQWtHVjBMZkhwcTB0YXp6citiQ2lFa1VBMDV1T2NGUGFKZW9YSytwNTRudVBHCkQ0Y0w2Ryt3UUhRb08wYk9sZVIvWGVPaHJjanMyYThmZnJwMVFyYVlsZmdQRFJzSWdmZXozUUhLaHo4QVpjVDEKR3VjOVBKa0tFZ3ExTk1HM2V3c2l5N1h1dXVhSjZuajFkeFo0THBmSVIrSUc3SXU0NmlJZkVBT0owN3ZSY29ZWgp0bFFQWDBpbHFKaXh5clczZFJYRkJtWTBZbHhrZUhrc2JUZGNYMzMxaTE1Qnc1TS9ZRjNCOW9XN1p3YWFYNWduCm1pT0hPblhzWE0wNG9lYnRYNlJBc0tVVnZDbXNTeVB4RGt1czYxQXdMVERhc09xYXhRamRERGVCakszNU5QQXEKTVBQMm5QNmxTNHBMZ2x4SnV1NDVBb0lCQVFEbjFMWXphYWV3Zm9Jb0xGWE9HeUdHekkrc2ZaYTZ1RnN1SDk2ZApDak5zanp3akxwdnQyTjNOTVBNb2RlQUFhdllVeHA1dEVDY1QrV1lOMEVITTNWcHVYaDRPRlpNVWZqMks2L2pYCnJJdkRNMjV2VGE3eWNJbnB6NmV0Y2dFeWIxcG5ZWExONUsyUU01eG5YMlhyUndjS1lvcVpSY3pWcVlSeHVrVDYKRzE4eUN6aGw4aUVFeVNjaTBvc1ZKSGJnZXZ4MVkvZXFQd05NN2xGNVRYa0Q2UW9lYnBka2dRT2JTWGNraDlBdgo5MVNFclFlQWt1MmQ2UXlNTndJbXpvRkpJNmFlSk43QyttRUMrZmhaRU51SHo3eERTQ0FKK2w2Q2dEK05EdE1qCnlrQjJYYjVXY0VGY1ovb3U3WkFEWnNMS2Rxeko2anZJRDBjYjR4anlGUjNBZDBvdEFvSUJBUUM4eHpKRzFKYTcKL0NzNjNxRzVHUkZQaGpKYjNieFowdk9nbTJzNlpPWDRrU2RnRWJtSVNXcXpVMXdHZytmYS8vMmhWSEtiSTV5Twozby9hMjFYM3FTMDAxQ1B1VHYrZTJwaXRhL0FkcjhyZGFyTFZZNDJMM3g2RlRUSGp2L1ZkbHh0NTltOC9lNkowCi9QSDN0R2tvTk8rNXlBNGdkcmxSMENESGdUdzBSRTR3T1B4ekUrLzAxN2VHR3ErbmYwREZ2aVBmcEZVWTdpMUYKbVIvd25GaUFYNFNjRkl5d0pxTHdrRkdYZ0t4UXozRnZFVm82Ty9BYXZnZHdteTllL3NOelRXWU4rMHNLQ2h2OQpoVmJVUHh6VmkrN3BzNEoxcjM3T1IxR2NFand4YW5wbjdSMzZ5KzRBTXJteEtrSUNoNHJJc2pNMlZxVGZKaGJsCmlBd0VtNmhzbk9zOUFvSUJBRm03dk5hRG85T3Q5QVZHdStPdUhya0ZmdXNlSlhTYW5UaHFQNGw3aEZJVjB3b3YKSlUzWDdtcFk4eFdMSXF3bXVwOXFEYkpiV1RUakNQeDV5cTVZVTRONnpKbFpBbmdoTVFNUHVWOEp1NE5QNmdRTgpCcFZ5dC84WFVHalRRdUZadHAxalc4T1VLeFl3MCs0elA4amswalhUMUovbEk1YmtLWTYzc2JFNVhReUt5VWEwCmhORk1adWlVcEI4SDRUZWNneEdSSXpEemVQeVRGbGdrZzUzZTJ2clNoYWp5UXdvZFVvK0NQalFDd09VbDhFeDEKRXFKWHJYS3NiQm5IUHNXbmxmdUtlK3J1YlJSdzJ3N21kb0xJQnEvb1AvWjh3WTR6dytWK2duMU04TXlnRm1kdwp4ZXZWbDBJSTFBQnRDeUxBOHJxby9vQytZU0RMTTBHb3FMNXhyZlVDZ2dFQUZMcGFqdVJ3Mkp0THM5OFdLdGpSCnljV1dhZmZpNG9vRExqTmlocnJsZFhHYXZUVzFCWDNxTlY2RjBFRlRoL3hyd1BjZ3ptQU9wTEZUWWxpTEMvS0wKZ0MxNjlJUEFGWlV6Qm5lL21jTGZwNGc3c3FxSHRELy9mZXVIK3RYcy95WEVZcFBvaXpQc0ZxUmZmUzlXREpBagpjbWJCQmxlQzZiVE1wSnRRSFAwVENNQjVGN21zczFtc1VSRkZFRU1zdlltdkxyTkFsTWd5T0Y0ajM2dUxIQzFnCnhqS0xjQndOOEJRb29WWURsYXZ4Ykp5Zko1M0ZNMnFDTHA4YmlIYTR4MFJNWEdTblRLYm5nK0xNTWVuc0pKYUUKMlN4WXVzdFdSUmdYb2VkdXJJNWdlbURTMWVMbWN5Y2V0SkZMUmpQVHpVMmp5ZWVobXM3MzNLUWZqYkg1d0ZOSwprUUtDQVFCQUlVRTdLd1EwVnR2UHg4aU9oNXk0bTlRekF2dURkYnYwd1lxYzZIWU9XNlZKaVFkRlhWa2tjTEhqCkM4RWJ2K1cremRFMXhRWVA0cURVdWRpeWlhbkFQQ3Y5aW1lUExxRDZZdDBaOStBMFpocVRKdUNwVnVrWDZyMXMKMjk0bWY1S0ptRU9BODllaWI0czRZa09EYm11RmpnT0ltYUhvb0VhWXMrMzBKdnBGczNmbjlZbzlBSWFvQ2JCTwpMWmJzbEtJYTlRbTYyTnZMRFdud25La3ZBVkkyZmVMUjEyUUcxKytGRDVWTlF5Y0NvSVo0a3lSNkNsYm5BYlBJCm1Hby81ellZU0lPd3dOb3k1YzluOUNRS2JvY1d2TlVHc2ZVV1hpbWN1MmV0R3hvK1dQaWcwVmo3OEtRWkc1MzcKQmpEcWllejV1d2k3VVg5TEZrTzFkL0ZRVGREagotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
          remote_cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZHekNDQXdPZ0F3SUJBZ0lVUmd6Rm01NHc0eFJRQzB4b2dBejVuTFQxR1JVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0hURWJNQmtHQTFVRUF3d1NiWEYwZEY5aWNtbGtaMlZmY21WdGIzUmxNQjRYRFRJek1Ea3hPVEUwTURReQpNbG9YRFRJME1Ea3hPREUwTURReU1sb3dIVEViTUJrR0ExVUVBd3dTYlhGMGRGOWljbWxrWjJWZmNtVnRiM1JsCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBbUJDM3RRNEZPSjBwQjd6VFJnaEsKQ3kweVNoazhEOTRqQUU2ZnYzYzh6TFhHMXNwRlpnam4zdmxMRWdEU1BuQi82cWRPanVFZktpb0MxcmdTTVFBbwplbXRlQTdVZm03TDhHUDlXa29QK3RQa1lUcHZQcUtjOHlXUXIwaGExVmM5U3h1SGE4ZUtGTVhFaE5UcDYvSjlVCm5hVU8yUFREL1pGYS9PLzdvVGd5Q3AxUXRGTGJmRGNjS0NOdU44SVJwSDNrYVNVcEI4eGlCMFhCOXRNTkVvdlMKWFY5RVJzVG8zWU9FeWlNQWtDdFVYUjlGV0MzYkkxUmt6eGI2YmNjQ3VpLytnZkpPeG5QdlpBU0l4VDR2bUxMZgpmQ0ZoVm9yNWovYml1d2ZhRVZSZDltYnM5am9LZk12UTJjTzMrbW9rZUF3Z1VjMkIxVTlrdXBpL01nM3lZZVZaCkkzY1l6WUxTWjVCQ1pDcmhtUmZBRDlSazg3eW9XUFg1RTRIdjM2QmUxazZNa1JwdHRoeVF4TEdVU3RaUXNnTkQKbjV0RHk5dVVud2RrbXlYMUtwK3RFQzVVVEIvTUgxVDhXWnRTcGRNU1lwd0xtMXRRK0RmOEcyejAvZFZmU2JITwpPRFhwQkxmcTFKS3BJRkw5NUM5d1V1ZmdrZ25nUDNjM1hVM0xEOG45T2tNZTI0ZHEvM0ZYQ3hVVjdicTdHVkJTCldDNmFxNnVtRUF6VXVSSUhaWWc2TkYwZXZOcDF5dmdVUml2NC9PTFVpTWhIb1oyZnZIT1RhZndvbTJVdnpFa1UKbHhGUmZ3SXZwYmJqbzJ0SmdzYmh4dE9YMUQvb1pJbTFuUXR3NWxUQU0rNTl3WUNtYnducCtBVXZDSXhHcksyMgo4WVRZcHU5UGVQSURQUDN1ZFA0VXZPRUNBd0VBQWFOVE1GRXdIUVlEVlIwT0JCWUVGRWt0eFB5c0FMT1JERWRqCnBxK3NEb2pFOEIzZU1COEdBMVVkSXdRWU1CYUFGRWt0eFB5c0FMT1JERWRqcHErc0RvakU4QjNlTUE4R0ExVWQKRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFKWVVmSFQ5OE9rUHJQQmVwYWR3bDJHZAo2UWtLOG5Rb0RkUjhnaGY2bnZVbjAzR3BUL2dZSTVVUEZsM3FKY3VqUTR0d0JESTkxRm9XNGZTczVQVFVqY29DCmEwNkZqRWdibFhhNEFiYmFSTUVad2pWNTZBYWsxRldlcUJRZHFmc2ptWmE0MWxubnk0ZzFmZllta09KQUo0TjcKZHRocW80Rzg1NWVISVdVN04xd1J2ZXRpTk5XcGtIUkFaeDZWcHF4ak5iYzlsUDZaVzhuanFpUFpRRjBORnBpUQpqSEZrK1hrNjFyUG1nemgvQ2pqM0tITnAyUTJ4UE1Wa1l6ZFZBSTBIZXdNYldPa2pVL2ZKZWxnTXFwQW9mV1FsCjllZzVBWnBNQzZta0hQUXgvbE1FVWJ6VkpibnNTNEh5eDhqdTREdVAwVmY3dWtNY3RkRWJDdGV2eGpPR2lJK2cKYlBtV2E2SjVoOU5hN2JncjJaUjVLUzk4OEJFNzhDZ1BlQUgrcDRsSXBSOFUwWHozWmlHbldYdkRaQTBvQ0N4eQpXSGJ1L0lPVy9nbDUyMDVlTWVUNWhwRU13NUJXWVJyWHFuNFZLS1VXdEJ4U0RaeTRhbEkvWXpZbXVlOW5KWEhRClFlclBIRDd6bG8zSTNVOWlSYTVtSEIyTjVFZUU4SGhCQlBqY01xd2R2VktObzVYZEV4T21WNDNwbERZMlhjRkgKRkExb1V6dm93SzNucEw4RUVCRjNIVlNNL2VGUjFub244NW9CQVR2ZldzNVBHSHF0Vmc1WjdCVlduYWV3Z0Y5RgorZXZQNnJOcmszUXhLTEJmSUpRd1FHWTI1dzFxZVF0Q3l1eXRIZFJQNFR5ekdjQlZqU0VuVHJNaWFGczI1ZVcxCkxoZlI1b0F1d1FaYm5IaFlXRXlOCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
          remote_key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ1lFTGUxRGdVNG5Ta0gKdk5OR0NFb0xMVEpLR1R3UDNpTUFUcCsvZHp6TXRjYld5a1ZtQ09mZStVc1NBTkkrY0gvcXAwNk80UjhxS2dMVwp1Qkl4QUNoNmExNER0Uitic3Z3WS8xYVNnLzYwK1JoT204K29wenpKWkN2U0ZyVlZ6MUxHNGRyeDRvVXhjU0UxCk9ucjhuMVNkcFE3WTlNUDlrVnI4Ny91aE9ESUtuVkMwVXR0OE54d29JMjQzd2hHa2ZlUnBKU2tIekdJSFJjSDIKMHcwU2k5SmRYMFJHeE9qZGc0VEtJd0NRSzFSZEgwVllMZHNqVkdUUEZ2cHR4d0s2TC82QjhrN0djKzlrQklqRgpQaStZc3Q5OElXRldpdm1QOXVLN0I5b1JWRjMyWnV6Mk9ncDh5OURadzdmNmFpUjREQ0JSellIVlQyUzZtTDh5CkRmSmg1VmtqZHhqTmd0Sm5rRUprS3VHWkY4QVAxR1R6dktoWTlma1RnZS9mb0Y3V1RveVJHbTIySEpERXNaUksKMWxDeUEwT2ZtMFBMMjVTZkIyU2JKZlVxbjYwUUxsUk1IOHdmVlB4Wm0xS2wweEppbkF1YlcxRDROL3diYlBUOQoxVjlKc2M0NE5la0V0K3JVa3FrZ1V2M2tMM0JTNStDU0NlQS9kemRkVGNzUHlmMDZReDdiaDJyL2NWY0xGUlh0CnVyc1pVRkpZTHBxcnE2WVFETlM1RWdkbGlEbzBYUjY4Mm5YSytCUkdLL2o4NHRTSXlFZWhuWis4YzVOcC9DaWIKWlMvTVNSU1hFVkYvQWkrbHR1T2phMG1DeHVIRzA1ZlVQK2hraWJXZEMzRG1WTUF6N24zQmdLWnZDZW40QlM4SQpqRWFzcmJieGhOaW03MDk0OGdNOC9lNTAvaFM4NFFJREFRQUJBb0lDQUFNNjlDOFd2eGhGdU9iWTNWZFhFdDBYCnlzSWhsUG04a1J0bklDdys0QUlVZ0xiRWZWcktlTVAvSVZmT29BaTY1ckc5Ti8xUHBaUUZpRkhIdjEydWZGMmsKNFI1MHF4a3BjVUxsN2pDdXVJTC9TV09XbWwvQm5UaEZQaXZRWnczZGlZdHZaZkYyVzVoYU9BK1BtR2djU1oydgpjV0E5RzFwOEsyM1Urb0JCVDRsVGtCRERrNVZvL1lweC9idjJIYjR6L1MyWllDeXg3Qmx0MHozdk8rOXJYRmEyCjBNNU16YXBTZWxnNXEvLzBCcTdUZkt0dnpuQmF3U2szeW80NVVIclViUXgxUVhTRVp4Y0ZwR0xseERpekFJMjgKVHdzNXlLMUU3Q28zVTR2amtoc3JVckIwbVU5UFBGYWE2bklwcmZDRnAreGE4RzJQeWlMUFhyemxTRk5KYmlZNwpBcE9XR0h4dnNQZlpzNWVIZFpiVkFUK0pQQ3dQcEFMMVhlcmFtT2s5QkxyVGdNMkcyalEyUW9DK0l5endRRWJ4CmlOYnJwZU5abk9TOWI0ZjgrYWhhcWdsU3NuNUNTckt0SFpEcTN1aitzOEZWa25yeFZyUXJQWXNQNk1sdHJTcHMKRWUzMmY5ZDNnMmNITWZBRW9rY24ybFBrODAxc1oyS1lpc2dDWWRMOFFqQVJ4VlpEdnBTdkd3NTVaMVI3RktLTQo4VFI0MlpDK2lxVEhRbzlGTzkxS2lPZU9JRW54NUZvcVB4VUpCN1plUVc3NnkxZytSb2NRZk5Hdll1WEk5eUp1Cm0wTkhEMVF0MHNaZmFwQVpaeU9hQWtYbUlwYVoxVXJqcXBPeEE5RGdtU1U5Lyt3dG14eE96REpvekY5YVh0NXIKMFI3aFo1SG45b3J5K01KdkVURXhBb0lCQVFDNloxa2k2ZEY0SEVPWHQ3NEF0cnpyeUFpa3VuZEl2S2ZmeDhFUwpqS2xYU242VG16SDhPTC9ySEUvNkNmOFNPNHJUUGRDRnR2bWhaWWpvaUxlZnZuUjdCTU0xWldzTTZybC9sSzRzCmFrMHY2UkhGRkRuUSs2d3JKQm1mRjJTY05ocXpaalZNRXVMNFF1a1dGQ25rbm1Tbkx1c2JkdXZnWGdFamtaaG0KUnJEVVNxVy96S2w2c1RrNUFXNEw3d3ZLRDNZMFY0WXMvVnFKUmxQU3RQTi9WVmZuQVYrb3NZaU9HeFJCQUxUMApKMjhzMHZIQ1FrMndMTzhhbHZnY1V3MnV5d0pkVndueitKdmhaUjk2anQzdWdOb2IvZG1hT0dLZDg2U2RhcnVUClFaSUdWUGhZb24xV3IzU00yeUlRWHhGS1pMb0xzcTBGS3Z3QXpOdXF4Z053L3EweEFvSUJBUURRMTBWV2U1SjIKNlpDRVh4cm1TUnk4MjJLWkF2QnU2N05RRTE1d2NXRThjeldTTUJpQXkwMDRiOUhVSkpNZXgyTXZTbTNaM0RpcQpiOFhWVjRBaWZKN1dFc0NUNnZ0WWtaMHpWb2JvWG54eUFmWGVUc0wydWJybW5lbGhpRjFDUXJIaUhKQ3BReExQCktkQmlId2F4c2J0NkZJQllXWGVBSVBLNHBFVWwyQTBMTGFlcktDTm5VTyt4NTFGWERVSzltYStkSmJxNm5BeTgKUDFNR3NWdXNaaDF5dS80bjFNWGJkSWtrRGZ3ZzkvdHgzWjQ0UEQ4TzFhZkh4Q2FuaVJTanFFUGdZb0t5REFNRApoKzBrMWx5S0Y2dGFuVFBYSHJna0JjaE9UM2g4c3E0RFV1bXpMMHZnelRBVmw5R1JjcHM5Wm9GUWJ2bmdJVWdzClZDeUdVZEs3RjE2eEFvSUJBQzJWdHBPMk1KYTUrc0d3bXBPY0hNbGdhdFMyRVJQRnB4d3Z3b1NoeDR2a1dONEsKRndoQ2JKUzNvTXRhQkhuVis5WTdDTEthazZPbnEvcUo3TFh4SXBVdkRmb1I2a01IYUFQT1BXWDVQUlVaWDFJZAo1eUczV2x4V2dMbUtRLzE3c2Izcm9kOFB3MWZKTFMxTUV3Nm91WjYwOTZRSXloaGRoTlBJK0VjU3hJMjJENkMvCkVUZEMvZVoxOWc2UEVBZ0REZm93NlV3NVRSbkREQjY4Ujh2ODkva3pPY3lNVmdQQ2xZcHIvTlMwakJpZklhWkwKQnFxdDRtOVRPaXZiRjc2R1FQYklvVk43bWN0ZUtudVRVcXpQOEFibVpuK3ppRkp1VWZSNU5KUUhkZ2w4WUJ0MAo2VWY0c256NzNmRzQvZ1orYVkwUXpnVTBoTnBCUHZzZFg1d1RmQkVDZ2dFQkFLMDdBOTc2M2NFWmVMRDBtc0dPCnYvSEFJUWMvTXVVdlNpd1FCUFJNZUJYR2t4ZFNJZUVqd2tnZ0tQTko2MmRLaVBGL1VhTzNVcUc5MldKZ0ZIK0cKMDlKSzk4YzYwWWJrTW51Vk9JNmpZYUxJRVlSMzNLei8zeExReGZnTFB5QnBabGhpelhRNW1PNlNockg5Zm5ZRApNYm5RSzY0ZGVFeW1CL0ExQXM2amFoNXRubmtROEYwUSsrS2NPQkozZzNiMmRuOXAvbnd3V1RnRlp2OVVPdkRFCk80VWlmMjNXeHRDRTJBVTZQSHUwZDdRNTJyWlc4dytCRm8xVUhhUTJ4eElCejF2Zkd2NUpqRzV2WDd5QXUzNG8KcUJDZitaSmxmdVVTanRhMmdRRWV6YzBnQjQ2RW12SThBYmpIbUNTSDVsR0dKNW5xbEFiZ1ZKZkFzcll3UlJiQQpDZUVDZ2dFQUt0THF1VUhZSExWTTRxL3haNHFsYVRGeVppTktCdmdlbWthR24rMm5RZEYvYk9yU1daVzhBd1NTCkVBTURvKzVmZVhjM0dsWi9ZaklFdE04RTdkemVJbkorVS91SkpLQmhsTy9yWU1tTVVLZ3hoQWt4NlgxbDNrdEgKVTNHV0swaGhrN0VFMkVZTy9hc212YjZ0b3hGeVBkWmxORzNVOC83b2YzV2JiVkZSOUVUcGJSaGZHNm5mQzZPQQpOVDNqcmcvZzF4bVZGSzEvZGliRnVyVFFmYi83Zk5telBpTVVRL1RicFRxN1lNbXh2QU1PSytEWjZiRWNnbkMvCmRhTGZCQWhIT2hzbG5rM1dNa05WWGJiTkJISlhhZytIUll6MFArcnRQei9uNzd4VUZlM2xBRmdpUVBXNEZFSC8KeVQ4ekpPQkI2TkwvWDVTSnJoelZuVW1jU3JVdHZnPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
        sensorconnect:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZFVENDQXZtZ0F3SUJBZ0lVUXMwcURxUldDczk3L3BrQ3hHOENQUXpRTHZ3d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dERVdNQlFHQTFVRUF3d05jMlZ1YzI5eVkyOXVibVZqZERBZUZ3MHlNekE1TVRreE5EQTBNak5hRncweQpOREE1TVRneE5EQTBNak5hTUJneEZqQVVCZ05WQkFNTURYTmxibk52Y21OdmJtNWxZM1F3Z2dJaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUUROUi9hZHBzRUtnWDhFZmpydW44SGd4QjFweStHR3FWQysKY0Foam1FTjhXeGM0NllXNGdjZzAvQXJHbzVKNmw5cmxxdjJvb1RleHk3Zm0zTHB2TlBrOFhKVTdNUnpHYjNwUwpMWXhaaDFRdHpiM3A0YjVlNHlpYXlEVE1Qd0pIUnhWdE9ETng5Y3RRcHArZjFid3BGTzBMZzFxb0Z6N09BcFhlCmZwVGFyd0JJY2szYWtkMmhvWGVlSGNMUHh6aTE0QjNIclA0M0FTZzN1QzRyMEkxaWt2MkJuSnIzR3dpZnB4a1cKaWRabTFCVFEvMTFaSWRGTGtHSzRPcFZhZU5pZ1NVRi9Fb2xRUm9kNkR5Tytma2tMSjlvTlRxMXUrSXNHSXVJVQpCQkl2LzR3bVpyMU92TUVJRDlMTnA3OHJqdnY5TWx2VVRsZk5ZZE1DVEdac1Q5dnZOQzB1Y3QvVi93OTBUMCt5CkdRRnNSd3ZxQTZDZTlVY2JiODZXeTk2V0JwSVRQWXFmeDg5SUZoZks0c1hYSUU3QjJWM3FES3RRaTRVejdHK08KNFRvcUVkQ1J5MHJvVmpJVWVVK013MHRybHNsUWJvZTB4WHRHNUFIQXptV29TNUNuUVNJeVFDZy9KS3psZUdZdgo1d0VSTmNRbHZwaTZvUmRYeGNYT2Qwc1F4UTdCRk9aaG5KWEdEN0RwTmVWa2hKUWQySHM5UFVwajF4MjdsMDJDCmU4cHd0SU43SjgyVlpjRVhRcGk0WnJ0NnJwYzJRMXYxYUNabUY1RGdGMkZFNFRHdklMcDVRRzRMbmNpVDA1NE4KU3l1SWd5TkUxRm9XOU5CL2xwWTNzU2JGeVJxM2ltbFQ2UkZZVVRjc3IyV3NOVy9wK0x1N3ZydUpGNWJ6N3NPRQo2Qytyb1ltUkVRSURBUUFCbzFNd1VUQWRCZ05WSFE0RUZnUVVLaG9lTmhNZVZLMk12cmRUaGpzZlhjTGdFcjB3Ckh3WURWUjBqQkJnd0ZvQVVLaG9lTmhNZVZLMk12cmRUaGpzZlhjTGdFcjB3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQVNTS2F3WUtvNUlIekdXZUFnTFBHZmxMM1VEVXFLbWlqandtOAorTHM3YjRvQzk2RFBaOGJFTEZLTVc3d0hxOGhlT0QweUJLNkRYS0hrZ1pkZ2xQUDczUU05UXNERDQvY3lvRXhxCmxXUkU2OGkxZXZ3RExTVFI1aDJEZWpUUG5wZC81T3Zkb3J6WmgvOXJiQkt0ejdsb1ZETjRheEdOT2hsWWU5OGwKekpwbkg5UlR5TW8wVmNCQmpyMWlVUVRWMVhKV1FEMkUyOExRV1N4b2UxRTQxREN1NnpKMFNkbDJxOE1MM1c2cAo5dzBVQW4vS0owQTduSjdPVDhNd0RPeGp5amRIcEl1eFFQVVZnUUNGSGdEK2lWSnN0aWwrcDRidlZoT3ZBamh4CnlMYUdSd3pRZmx0aWgxaHUwVHNJUzlhU3ptbUZZYy96ZG81c3ZobzZVU2lSdmNtbXBGazVyVnRRYURpNUF0am8KcWhSYy9ZRVJkeDZmKzl5UFhrRHpuUC9admc0QndFcE9zb01ydE1RVnoyc2VnSnVWeDVtQnEycnN0Znk1U05SeApxWVI4ekJPUHB0YjhiU3JlajVHT0daUUdwSzJzUE1ZaVE4NWxjVXUzZ1MyZitFOW91d081eDd2LzNFY3Y4Q0JnCnZRMWZnV0QyaVV1RzdiUGhBK3F6M0o1Q0RRQkhWZ2pCTVE1Wk94VTRSNnlyK2swTk96MXVObWRLVGF3SXRvQzAKMkdtaXJtUFZOdFY0cjhWd1J4MGhIR0JGQWNnRzEySC9IZEVLVXVvRHFINEpGeHZsRXJxY1FMTlgyanI1OVM5NApiTmZUTnh5MDZTZFpncFdYcTZBYzE1NEdiRUpsZDJmVE9YSDVZWlJ6SVEvZFJIVENzR20rQk9kU2RFTEMvTkNsCkpYR0dJZGs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRRE5SL2FkcHNFS2dYOEUKZmpydW44SGd4QjFweStHR3FWQytjQWhqbUVOOFd4YzQ2WVc0Z2NnMC9BckdvNUo2bDlybHF2Mm9vVGV4eTdmbQozTHB2TlBrOFhKVTdNUnpHYjNwU0xZeFpoMVF0emIzcDRiNWU0eWlheURUTVB3SkhSeFZ0T0ROeDljdFFwcCtmCjFid3BGTzBMZzFxb0Z6N09BcFhlZnBUYXJ3QkljazNha2QyaG9YZWVIY0xQeHppMTRCM0hyUDQzQVNnM3VDNHIKMEkxaWt2MkJuSnIzR3dpZnB4a1dpZFptMUJUUS8xMVpJZEZMa0dLNE9wVmFlTmlnU1VGL0VvbFFSb2Q2RHlPKwpma2tMSjlvTlRxMXUrSXNHSXVJVUJCSXYvNHdtWnIxT3ZNRUlEOUxOcDc4cmp2djlNbHZVVGxmTllkTUNUR1pzClQ5dnZOQzB1Y3QvVi93OTBUMCt5R1FGc1J3dnFBNkNlOVVjYmI4Nld5OTZXQnBJVFBZcWZ4ODlJRmhmSzRzWFgKSUU3QjJWM3FES3RRaTRVejdHK080VG9xRWRDUnkwcm9WaklVZVUrTXcwdHJsc2xRYm9lMHhYdEc1QUhBem1XbwpTNUNuUVNJeVFDZy9KS3psZUdZdjV3RVJOY1FsdnBpNm9SZFh4Y1hPZDBzUXhRN0JGT1pobkpYR0Q3RHBOZVZrCmhKUWQySHM5UFVwajF4MjdsMDJDZThwd3RJTjdKODJWWmNFWFFwaTRacnQ2cnBjMlExdjFhQ1ptRjVEZ0YyRkUKNFRHdklMcDVRRzRMbmNpVDA1NE5TeXVJZ3lORTFGb1c5TkIvbHBZM3NTYkZ5UnEzaW1sVDZSRllVVGNzcjJXcwpOVy9wK0x1N3ZydUpGNWJ6N3NPRTZDK3JvWW1SRVFJREFRQUJBb0lDQURDay92RzQxRUhURWZCVW9VNXVtUmpVCklFd3p2Z3VWRDhjdzhTdjRwdlZPK0ovSjVxQWtVUGNOU3RoclpvaWFkNHE1REVicmZURXFuemViMHFvTG1Zd08KUEdhOGFwOHpSMzgxdis1dlBTbGxlYjEwZXhJdExqQVBoVU5wSXZjVkJ5VE1qcFJRdEk4MkRObHBZcDh4a0VLTQpLKzF0SkxyWXJmNzlhL1N1UjVqalRVT2dFUzc5L2tSL3RPeGJ2enFLRTBSLzMvWFUxbHp0empNZnhvRTNaODlRCjl2L2JiaDIzRVNEZ0pPaFZGV0c1UWJ1ZlllTlFJYlNhWFU0RkdRQlNtNnlyRGRMeUE2U085ZDlzT1k3bE1LeTYKbWlxVHh3MzdNaXVnRTFkQWJVdWtTUFBoa3JTQVcyblVlRjZ3RVZLY25sb2UvbnR5MVBmVWR1anZ1NlJoYnRzSQpRRE5PaFhqSHJ1YzNhdG0rZUJ0cFJ1V1ZUZ3YyOWlBd2dOdGVGaUlXZldMQkFJellrT2dUMzczczdZdWFoSk4vCnFKanZxNklvT0NaWTZJUHRFVlM5dXhWd1hPKzhjck1NbmcyLzNsNzZhOXFQM3o4Njl4VjRoRlg1S0pUY3l1bGgKc054Tm5qTVpYczJ1RG9qUmhodTJlYzE4dXBMM0ZvZmxIYmRKOVErbE56UjdHaytCME0wMWl5RHRvL1Z5MWgzYgpRR3ZRZTkvTkRmbmtlOGVlM3MrNWozcG9VbmRUcit4QXVrUU5pQ3F3eVJZUTZvT3B3eHovbFR5aWVvU2pXaE9FCmlGa01Hd0JKVjdOaGQ1SlE3bExuNzFpQnlaNSthZXBmcHAzdVFCTmZlNUFET0lJQ1dSaWNEQXBtWFlpQXNQNUoKRHgxMFNoVUFHZmFaVWlxMGZDZnBBb0lCQVFEcEtNejRQbFBieWZZb0RXYTJXUWNLNlVueW94bDVwKytTU0ZVYgpBMHhXVVphSmtQRnJFeEtEOERyWlkrSHl4NUVEOFhyeDFhYVJZbU1UYnpoYnRyMU41YWNIeXp5S0l5RTBvUGJICm5HSEtralMrTldlTGFaUlVEMElzUjBBVkt5M1F3MHJuUW1ySW1GVFRFTHBZV1hPN014ZjFlSlY2SjY4V1BOTUwKVzQzdmdUTkR1ZjMramVSYlU3TjhTU0djazZ0c1lWZEhZVEhXSWFITzA0K3VvRkRQLytjdnAzQUtWTmo2WUh2ZwphN0t0WU5FTlVmOUtEaVNFQm4vUWR1c1lZUW01bC90d3ptejFTZXZKNjMxbmkxWXJ3Q2dLV0FLK1dGUkFSVU5PCk1PakllQWxNZ2ZnQlh1eTBqeFdDTXNpei8xcUVzZC83cCtIOEZHTTZxVElTTy9xZkFvSUJBUURoWkFjcklxTGoKYkNzMFZ2RGZURXB2eXdoMFNmdWRibkNGR2JOdjNrdEM0ajRlUGh3Nnc5UGk0RU0zM0JBaDdYTTllVTRwV2xUaQpGY3lzSnBVcy8xT1pRYnFTeGFpN3pTNjk1RFlCYzA1TlJXNnhCOWN6Q2NhY3FTeXpFenhLUkVKd1dMQ2RIWFFBClVJN3dodlV0cmY4ZDZXREIrTVNUWmZZSzRlekNvUEViRCtXTU5kZGN1bldJeE5GY25KQnljUWxldkd6WTduc0oKQzltRGo3Z1F3b1JPeUlGSFZBdk4wb2M0MFRVVEl1ZlR4SC9QS25DT2o2VFEzcXhIRzhZRFN4enVRcXNOMGpoMwp6QVp6bGVXVTEwUndNQ25IWStDMG9RdG41YXV0S0RrZS96N1VNOFVFTW1jZ3BHK3hHTkZBR0hvL3Q5dCtwaWZXCkJNV2tTQkN0S0laUEFvSUJBRjJLdmZrV1lHUjhlV0tHUmVBQWhiL042cG9LNzJ5TWdLUXFtdUpVaDJyV0h0UWcKTDRzcXdySG1UbVhyR2JwaWNINnBnZzdHRGFha1YyVnpxS083QStYZHJnNkZia3RwWHFnVHNBNVRZalI0UmVyTgoyRFhwYk5Yd3JUYkFleWhEQTRXTzVGMDFtMHZST2E3WU5qcTk0SjJKR1NLbGR5cmtBdTJrQjNPMkRwSzVQZ3o4CjhMY1F6RDRMcmFXK1hWckpMK3d5Zldhb3l1ckM0WHp1Q2VZZ2NXdVJtbm5XN2k5bTdRbytiVlNUUU1Nb1paYTMKZi9tQkJRdG01QjZKcHpaSHNEUWlrb0VtZ0RaRXF2RitwZmhGd1pPWjZ6YURLczZjOTJnMW9aUWNNVGhFV0U2MgprZjVTekJxQWtUdUVEbHVRcGdzNHBjajhDTUV1bU1UdkhxU01KYmNDZ2dFQUIyTWo2UUlGbkxhYTQraEZsTXdIClZJcXZDRUMwZ29Cd0o2eWorUEtzUE5EMWdFQkE1Snd1Z2EwZ0J1Q3JsckVWcWRvaithOEFRVGk5c0piREpPcHAKYndoOGVQc0pnTDVFM2V4dzZMTkN5YjJRMXpTT2xSbW83TkdPcVgvajVmcyt3amZsOGdCWklQbUM5ZGMyaWZ5OQo4OWtHVnRVMGZEQkhWQ3Y3ZXBXVDBYTS83c3lFOW9FV0FSbVNVeHEra1VHck1QTzBEWmdqYURSL09KU3BUOE5RCld0U3ZpQXIxS0JYU1lNWmFtdm4xNXpiMWlYQzJwN1dGaldMKytvV3FnOGtlZGFDeHdvNDFVNWZZVGttSGNNMXQKYk0vblRxV3pZN2d6aTRBM2xFRlJQZmJYdEZUT0RFa3FvQ05EbGVaZVZWOTRBa2FnWnhKREUveXNEYXBmQVkzbQplUUtDQVFBeUc1K2hkcTdDK0VydFk2RXRhSEJnUWdtN0prcWhzdU9aQzNiTTQ0TGkxNkgzUnNhWjZkczh6OE5lCktyZFN5bGFqTFRUOFZPQmRBclJZRHJjeWhibmQ3d0Q5K2hVZUVoRGF4SEh0dnpQSVV1dVRiWDNKQk1PUDRtWXAKVlFNVmVZREtKejRIS2t2TnBUYmY4TlRHM29nVGhuWkVuZFh6OWNWZFZqZ2kwYkJlN2gyUk9yY0oxMHVVQkZFcQptcEFkR29GK3pIZEtITmhhdUYyVFQvdXEyZU9hYTArVUlxaFREVlpxRndOZ3RxZTllLzB2NUhjK1pRd1lpMXVwCnlWajBSdEpMWmI3U1p6VzFUMit3UitiS1N2bUpXSlN3MWN4QVZNQ1dXTVl2dmVzT2NZQW0rV3I0cXBIWHl0RmQKS3hvdWs2QWJ2bEo0K2hvSFVzZ21rdzBZdU81OQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
        iotsensorsmqtt:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZFekNDQXZ1Z0F3SUJBZ0lVYTQvMTlmUTNlYlFSWm1JZGNEVWNrUi83cW0wd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dURVhNQlVHQTFVRUF3d09hVzkwYzJWdWMyOXljMjF4ZEhRd0hoY05Nak13T1RFNU1UUXdOREkxV2hjTgpNalF3T1RFNE1UUXdOREkxV2pBWk1SY3dGUVlEVlFRRERBNXBiM1J6Wlc1emIzSnpiWEYwZERDQ0FpSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUtqNU8rbDVFc29kVkpYTDBzNW9zcXBHalJNeXNwZG8KbDRrdTN0ZldMS00vZS83NzBNTGlpYnhNK3Q0TnJXZUtnUy9uMGh0Wnlna0Z5UGRXTGk3U0kyTUxQc0RQS0h3TgpCUlNCdzVFQnVWOFFVaVpkOWRUbUlIdjJ3MVFQM3BYVVhqTjZUWHYvNENaaVlnV2NtU0V2L2JNWUNUWUhIbmdZCnJMZXBHdVkvQ1FKekQ2SFhiOWVXWTRWc1ovRVBtNGRnV0tRdXdkT1B4UXZxOGRVYllWRnhCYmxmSm5QZjA4TUEKMkZraGlvVFVvNHRObktsU0g3OEF1d0RHTHYreWdXbjFnU1ExejdJSEhDcSt5cmp0dDJPUk1UKzhBbE5CZHdkWQpMNmhodm9XWGtobUpyNDV0MldVUjZnZUNwZFM3OGlNZFpvTnJTYlcyeGdLNjJSdlZGU09MZ1dmQldvSkhpYWZIClNmOFZ5ODduU21IVVVIbFdURHBGR1F1MGlnVHBqZlB4dmZCcWlsSHBKOVFkaXZsT25xdE1ISDh4RTdzM3V0dWQKY0wvMDBycVI0N0hvNy95bUxtaE94ZE12WTltWFN0M0hMQjRuWEZ0d2VHdXN3aTYvdndrUVdRWGhueTV4YUxZYQpSRkVlb2RpQ0dCN3NMVVY5T0FTMDR3VGp0ZFlVdkp6eTMrdDExN0VUNzZ2aU1WR1Y2VlJrNWNXSzI4aXJkS2pvClVyK2hzM1hYdm1OdHB3YjRGcTNta1k1SWFiZ1lob3BQQlhuUVZZSWxQa01UZWJxSDlEY1plNzRDb3FmdHBocUoKSGREampCTFVCVGZ6cEkzN3dIcStpdHU5azBzbklWeGRnL00vT000d1BRVnBwenlkelZsTFpNQ3hLWENyWFlIcgpsbWV4dmRSVzlPeERBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlE2SXJRY3lkbFVIeHF3a0ZKQ213VGlZUk4yCnVqQWZCZ05WSFNNRUdEQVdnQlE2SXJRY3lkbFVIeHF3a0ZKQ213VGlZUk4ydWpBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQlZTeFhuOGhTMnB4UnRCZ2FrdnpRamk3UEhPUXhadzZMeQphOGJGWTEwanFRSjZyKzViZFhTeEh5aFZZYVVHMU1raUFldnloY0hyQ0pwVFhiRG5KN0JqUDdHeWt1NlQxRzJsCnRoM3hmTUhTaDRFRnJvMHBzQ3huUS9xN3VBemx6WHRZUFUzNkt3dTM3cGlSNG1WUFozZDloL3U5Uld6ZnV4QW0KcnhFRklXVjlLYVpPMjh4Vlo3b29tSkllOGZNb1hNcXp1ZWV6SDhFS3VvVW5NeGlNeS9CY1U5RkRLR2RjV2RhcQpKcDZTdEtzQzBuc2xwaEhtMnFkdVY5Y0ZJODlic1NPRFpzNGJhbEpwdWF5K1B4VVBWUU12cTJyQTJtV2o4eFZ1Cm1YRjV3TEtrUGFhdGY3ZWJONE8wdFU2bDhLYXk1dEJZOW9RVVNrTS9WODVaWCtlWmVBUkIyajZGVWFtbWNzemYKTHhRNmZqdnFNblk5MVFueUJERkVwaU5kK0svUG9WcFoxYjdjdDg5TlFoRHNPc09JTXlITCtIQmNWaTBCNVR1RwpjS2o4alNlT3VCemFwVThPS2h1aVRmcWF5YjBIZENLcUhkSXpWNzByYnVwc3ZacG9jVGgzdTE4VE9VMDlma3FkCk1yZitVNi8yS1RNWkcyS1VJNm5mUkt5SmpFZDV5eUVxZURLRDQrbTAraG9tVFZFUks1eFFtaWNyOTNhR2xkZHQKMlRFc2JvR2ZNcW5PYkxHbnowbHhnT0M2aTlPb1FLTUVHZGh3SjFqMXcvNGRCdFcxMThRYUxra2lTOU9JRTRTbwpvS3VzaC8zYklKSU5yMUsyeTlpUG9FZ1hjM1VsckVQT2MyazVsYzZValZISUpsSm9oczNqTFQ5eGxpRmRtMXhmCm5neE1mRVliUWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ28rVHZwZVJMS0hWU1YKeTlMT2FMS3FSbzBUTXJLWGFKZUpMdDdYMWl5alAzdisrOURDNG9tOFRQcmVEYTFuaW9FdjU5SWJXY29KQmNqMwpWaTR1MGlOakN6N0F6eWg4RFFVVWdjT1JBYmxmRUZJbVhmWFU1aUI3OXNOVUQ5NlYxRjR6ZWsxNy8rQW1ZbUlGCm5Ka2hMLzJ6R0FrMkJ4NTRHS3kzcVJybVB3a0NjdytoMTIvWGxtT0ZiR2Z4RDV1SFlGaWtMc0hUajhVTDZ2SFYKRzJGUmNRVzVYeVp6MzlQREFOaFpJWXFFMUtPTFRaeXBVaCsvQUxzQXhpNy9zb0ZwOVlFa05jK3lCeHdxdnNxNAo3YmRqa1RFL3ZBSlRRWGNIV0Mrb1liNkZsNUlaaWErT2JkbGxFZW9IZ3FYVXUvSWpIV2FEYTBtMXRzWUN1dGtiCjFSVWppNEZud1ZxQ1I0bW54MG4vRmN2TzUwcGgxRkI1Vmt3NlJSa0x0SW9FNlkzejhiM3dhb3BSNlNmVUhZcjUKVHA2clRCeC9NUk83TjdyYm5YQy85Tks2a2VPeDZPLzhwaTVvVHNYVEwyUFpsMHJkeHl3ZUoxeGJjSGhyck1JdQp2NzhKRUZrRjRaOHVjV2kyR2tSUkhxSFlnaGdlN0MxRmZUZ0V0T01FNDdYV0ZMeWM4dC9yZGRleEUrK3I0akZSCmxlbFVaT1hGaXR2SXEzU282Rksvb2JOMTE3NWpiYWNHK0JhdDVwR09TR200R0lhS1R3VjUwRldDSlQ1REUzbTYKaC9RM0dYdStBcUtuN2FZYWlSM1E0NHdTMUFVMzg2U04rOEI2dm9yYnZaTkxKeUZjWFlQelB6ak9NRDBGYWFjOApuYzFaUzJUQXNTbHdxMTJCNjVabnNiM1VWdlRzUXdJREFRQUJBb0lDQURmcFhITTVUa2ZWbzdiN1hqSlJmNGtMClZrUDdldy9SbW83WWxRRTdTOExxejBkRW9NUFR2UHF6U0RGd3VpZXdNMlljSWJCT0tpV0pKZ0g5b01ONlloNDAKU3R2MjBERVlCODNNMEY3cmdLQ2RvR2swbnhNRzRNblVFYmIvbDBuaG54Z09pSlFXeTE4NEg3STJxbzdLTi9ycQpZYVhnZmlzRUV5YWtqSk9TV1JOWDZsekZraXIyaHREUDJhYnc0S2hQYjVWSUtYZXRNMmpwb1lMQUVCZ29PMW9tCnkyejlLNjl6V0tOSmozRzdnTEFvQ3NZV09BMzJHbXE3cVRLUHFQWGNPQks0d1pScGVOOEdDY05lV1ZmWFk4SHcKbnA1WTQ1OXBCVUFFczh1MXB6RFBGK21ibkpzdWJjOTFZaFQ5NmJYSDFUTjRMVWcxQmRsQ1pYT3BzdGh6b1dvZQpySit1eG5kVlBUTlFhL1g5ZS92b0d4c09ranJVUDU4N2FvNy9VU256eEVTYnFTUmtBcUVKNFd5emUzS1NIcitHCkdFRk1vYUVmcWhUYk1DaWcwb2FMWVk4cW8rZU1ZV2dMZTZTUTJReTBsbWpFNHpoZjg4amh2STMrdUNQV0lVSkoKN3EvdU9ScEllcXlpMmdKRDUxcUdLUGZENVRMd2hYK3RvMTI1VUhyZVBWY0Q5WDZPQURGQzM4V1BsNWZrSm5xNwo5eC9FVllndlBiWkFvY2lnVzZWV2pIT2VYZTZ3Wkdpd05HTDhrZVVwcVNIbTlaMnRYdnJxUittRjI5TXI2NVZoCkk5UDVTZXBVWG1abHZxQkZFYVY2Vmw5MWNFb1dEQVFDbVMzVW5TWVkxeTBDMGEzNnc2dS9DaDFHVXd6Sjc1WVQKN280dk85eU5RL1ZKMHFIWjI3VDVBb0lCQVFEblFSQkhPU1pta2tHM2t4dTZ1dkZBK2x1YU96eHVybGMrN3NMUgo4K1FpU294OERlazJaeTI0dTN4SFlsTTZnZGFNbStCdURhSXJZYlA3eVQzZ3V4NVZqKzg0OS83SUdpZ254bFhPCjBYL1RoMnR4WXFvWFBxT1ZDOGM1ejRsaHRXQy9aenRuODdQNnFEQ3JFaUdxNWFUdmZIa2pNUGIvR1hzU3lrOGcKZExPdUdJb1U3SXc5WFFTMFdrVEdJd24xdUJFTzdVcnY5TlE4Z3ZYanNETzlIRXJaSWs4ZldxZ1dCeUxuYml0bAplcXZ6ekRBRDdSak0ybWNYbzJISXFDUDR0bmZBbjhWUVR5SGU5cmtIRThreDMyNmJxWDNhRDJhMllEMnBZNHEvCjJ1MmtOZ1RybWtqZW0xdjhaYVlUdFRHYnppWEJOaEN1blZNMXAxaHJ0MGVLRXpzckFvSUJBUUM3RGhFZUpuRkUKYlNYKzA3SkJBRTNOYjJhYkJyN3lMdHZzYU9rTU1MUXBmMlJKWFdEc08wQml0eXkrSXZybTVUVFhpaTFzelBvbgpvWVpGVEVoYXJ5VUhGL3pOZWdHUkdGUkg5bnBFcmlvdlJRbDJrM21hU3kyczZ4QjJpOFMzSWNRYnFUMGxDSTk2CklFdXA3Qm1JVUY0eEZuY0FreHlLWjNjRlRnTldOcnVMZWkyQ1hrUnR3aGErR3FvbTQzOHdRajNMeWY0c013YkIKemt0MjlRODc3U09NKzd4RkVFWjBwSDc2MndrNTY5bXZ6MVlvUi9DZFMzTG5POFhQeEdGZ0dKNzRnUlNrc2hUMgp6bnNXWkRUNlg4cFk2TC94RHIxajM1VmRoZ3hBOTc0enM5NjFZWSsrVTB5ZVNsbUI5bk0zR2MwaDZnOHdpNDdKCkFVQXZTN2JUb0tkSkFvSUJBQVhXR0lrVG9pcDRpbndObEdlVURENnRrdDVEbkhUV3BaRUxDWk91NmhVTGVKd3cKNWEvZnpzR1l5YndyZVJwQzZKMUgyZFF0TitpTVlMUjhFYm00UHoyOWtqWUgzRUJFbUxyWVFKWWxwMm81UXJicgozSXNWbzU5Qld0ZlVxd3p5UE96WHVDSVpmbk5YQjFOcDg3dVNiQ1UzS1ArQVh0dDFVeXZZTzBNQWJ3QjMwaFJSCkhBRDRkZ1B2TzBrYzNVVjhUY0hvcnpsN0hsZ2duZ0FQRkY4emRaZ2hTNG5wQ2REMGdTY0NHc3BHM0V3YzNTRmMKUElIL0NSY0pvcEFqM2pTS3RsOEFLVVNybXBrNzlOTis1bGNCNHBLL0psUDRpNGtTeUx1YnJZYkdDYlZaUDZxSwpqRWhCOTRKWk5tWE03dUdWeEZJcUFTWEhCckNWOXA5UlV0YmpRVjBDZ2dFQVNUQ2czQVk0clloenBIamF0M3BSCjl2OE95N3ZnL012KyswcTFYVEsxVzhOZnp5RDlhcEZvaVBlWlJ6QlNzZ09mSUhNTmdSUFhFYWl1Ni9DRUl3K0MKMG5xOVRQemZIaEhCOElKdHB1L3F5NkljcU12ZGVkVE9vMms2Z05nQmVaSjV0RVVOQ3ErRnpFaFVzc0VSNEhkcAowNVV4clFUaTF2alM1ajEzS3NXeHJrcDVBaGkyZDZmSTFFdUVwa0MvcEhkV3pLVlZrWi9KbGcyTkU1ZWhoVll0CllkMmg5ZmYvU1dhUDFNSGRvMDg0VndVdWRnWm9ESFBZR3NnVmgwMFV1TkFKYTd5K0FnODRDcllTRFZuYUxObE0KU0d1UnB0V1luenA5ckNGbUxBbUQzNkVTbEMvL1dYNG9iWXN6Nkprd3phK0h4eXhaRXlxWURPZ3pZQTRsRkRzNQpHUUtDQVFFQXlWZTNONmNQZzJkOG4xaFkyYk82YzlyOUZ5aHpmNkwxSDZrSzRwekRhVUZuaXB6WlNqVFFWQnlJCmsvMng5SUJiVmRuMVpzMjZFWmhDQzZUcXI3OUVBS0JUTjRPbWFsQWdQN1AzaCtXNWpaYmwybEFpZURWRkxMekoKblBSUkxIZStFU2tHMGVrS1ZVSStOZUNoK1VnaTM3dVljVFNoMWRUSElLS2JKcjNCVUxMWU5XNDNPVUVZV2tYVQp4aHBaRHJLd1BnOWZsVlZwRjJMSXBNaGhoV2QwYVNLdjJSSDQzMHdNUUhKeFRva2NlYUVObCsyZmJSZW8yd1duCjBPczcyOVFZR04vY1F3TjBwako2ZFJxVW5LUTkyd1QrVEVTVG9BMFViU0c0cklyRVFCbjVWUVYxNTV2Yjg4NGIKc2JCQ0JMOUpiM05rQkpHWncxb0xTSGJSWjNLZ3BBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
        packmlsimulator:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGVENDQXYyZ0F3SUJBZ0lVRmFXSkt1VUJudC84ZFAvSUdXNVpRNlRqdG44d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0dqRVlNQllHQTFVRUF3d1BjR0ZqYTIxc2MybHRkV3hoZEc5eU1CNFhEVEl6TURreE9URTBNRFF5TmxvWApEVEkwTURreE9ERTBNRFF5Tmxvd0dqRVlNQllHQTFVRUF3d1BjR0ZqYTIxc2MybHRkV3hoZEc5eU1JSUNJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQW83cWlhbWxILzk0dGgwVWNpVHpTdjdqbkc1RUoKMXZYR0ZpQVJIcGY4RzRRWWdNK28yRDFjakdGdUtGaUVpSGJ0RlFhQitUMGpWbjRWTkQwTG9zb1NzUUZBR0dxZQo3L21lQVplSnd0VXpzbmpqbXh4UE1IZFFDRzBlRjdyODJ5Q3JaUFdGYUFzTzBFOU8rSldxTXBJdGh6ckc0QVZvCmVudEVxRk1RQ2cwWmZwTXY2VHJ3QlQ3QkNiNWFJUGlzWi8yQStmQXJPSStzQ2NqTDBmZ0h1dzdjZExWUWduL2kKTml3UWIzczVSRFVHL3RFem9xYW9Ycjh6T01wcEVtd3ZVb1JHVXg3SzFad0orZ3VlSTUwQWpSc016N1BhQUdyWApxSThKOXRjbVdzWGZ6ZVpidzNNWDhvNFA5dHV2NlZhQ2psbE9ldlBHOWRJaWI5bzVMbDZna3pVZkJYd21uTnBTCkxBOHZmTzlVdXRsTnFvN1VtR2U1RnJKRVlwWDFvL1JHY1BUUExVY0JtbHJKMkJkOExMQzdEemJOVUxZcyt0QzAKR2VJc3ZnOW1VZGN4NEVteUZIREVLSWRtdEQrVmlUSHNwVmlibVpNMEQ2R2JDZ2NSMmhidS8zN0xJSmhSZDlrZAovMWpLQmljeFZxUEdNakIxWCtVZ2NwUHNGaG5rTWMwNTkzWXh5UjJWSWhKRXlzMnJQYy9JS3pET1hZMWw5MmxSCm9tZVU3YktKQmhPOWpVdU8rZFhOeU15MkRKYVpsM05mUDJ2RnhSV2E1WitxL3JibE1xWEZ3QjJvbmNjVERjRDgKK1UzZlY0M0s4YnppeDREcHVvSTZPSVpOU1ZBMHN2cnQwNHNSc0cyZG9TcTk2dnBsTW50elRMY29jVkR3TUNXYgpBM21KMFJYVTAyajF0NjBDQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFRkhhallaY0xWbVpFZUJkblM1b2pjT3VJCkNvakVNQjhHQTFVZEl3UVlNQmFBRkhhallaY0xWbVpFZUJkblM1b2pjT3VJQ29qRU1BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBQ2c1a2NzeTlOc2FoRUhHNFMyZ2tiZWFpWlE0VjgyeQpRU2xkOHNnRGVUOGRXeEdBMU1DQ0FPMUE2Ni9WaCtRa2hFQTY5eUFlR0xsSE10QVdvcFlNUmN1MUFJNHk5djhVCktRcjkvTS8xZm9Nd3luQTh6OEF6VGJ0UlI2dk5CeThmUlAxbHdyeXZ0VXhqSzU0aGF0ZGNBZ2pad2ZIM2tEemwKUDd6TFNZN2JPYTRIWWk5TTJPemZMY29sR1NzTSttTXVBMHN5WTc3YmJIS0VDMnV6K1VadWt4SGNlYU5hMFk5Sgp4Sk1wRzRtUVRKV2FLZlBhSnhVOEZpeE9ncGM1ZS9qeWtUZEE2SStVbjhQLzJhSzlta2FyNFE3UFpnMzBRMllOCnpnbEFZMGZOc0xRcVY5L2tCaEVwS00xNUVSUWF6WEY2dG5Eb29ncWVJWWxpWlRIY3lMSGJ2VTRhRS9lNUJpbFYKUFUrQTZlU2JwWWxjakdrOXI4eGFMOUpiT0RxSXRUM1l2SVR3Ym1NbElDRnNhSUVZOFNsQ0JWYld6TzVTcGVVegpFVys3TGVEdXRhc1dOK2gxcnVSd2NKNi9UbjFFODFqdFBxVVRkUkFSOFJ3SXFQS2FwRFh5azFTVlR6UEJBZ056Cmw4YWRrc1JDOTZJdFFtZTJ0ZmdhSlV5YnB2UEg3dFRHYm5Wcks1QTYremIzSXJxMnhHWnNyeTNYKzQrWWVla3EKOXFDNFYrWW1hY0gvV2ZwaHVaQTYyaDJyUERrNEFtL1UvLzFqOE0wWHU4cFRKdUVEN2J6ajhaWkMyWlBQOXFraAptTXR4NS8yQXdYRldYUmFMQWJTdlRRTllIVEJCcUprWUI3VkF2bHZBMFNkdnhiMjdrZzlqOEVEMUJ3TDBNUEkyCjcwaHlUS0g2MTlGcgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ2p1cUpxYVVmLzNpMkgKUlJ5SlBOSy91T2Nia1FuVzljWVdJQkVlbC93YmhCaUF6NmpZUFZ5TVlXNG9XSVNJZHUwVkJvSDVQU05XZmhVMApQUXVpeWhLeEFVQVlhcDd2K1o0Qmw0bkMxVE95ZU9PYkhFOHdkMUFJYlI0WHV2emJJS3RrOVlWb0N3N1FUMDc0Cmxhb3lraTJIT3NiZ0JXaDZlMFNvVXhBS0RSbCtreS9wT3ZBRlBzRUp2bG9nK0t4bi9ZRDU4Q3M0ajZ3SnlNdlIKK0FlN0R0eDB0VkNDZitJMkxCQnZlemxFTlFiKzBUT2lwcWhldnpNNHlta1NiQzlTaEVaVEhzclZuQW42QzU0agpuUUNOR3d6UHM5b0FhdGVvanduMjF5WmF4ZC9ONWx2RGN4ZnlqZy8yMjYvcFZvS09XVTU2ODhiMTBpSnYyamt1ClhxQ1ROUjhGZkNhYzJsSXNEeTk4NzFTNjJVMnFqdFNZWjdrV3NrUmlsZldqOUVadzlNOHRSd0dhV3NuWUYzd3MKc0xzUE5zMVF0aXo2MExRWjRpeStEMlpSMXpIZ1NiSVVjTVFvaDJhMFA1V0pNZXlsV0p1Wmt6UVBvWnNLQnhIYQpGdTcvZnNzZ21GRjMyUjMvV01vR0p6RldvOFl5TUhWZjVTQnlrK3dXR2VReHpUbjNkakhKSFpVaUVrVEt6YXM5Cno4Z3JNTTVkaldYM2FWR2laNVR0c29rR0U3Mk5TNDc1MWMzSXpMWU1scG1YYzE4L2E4WEZGWnJsbjZyK3R1VXkKcGNYQUhhaWR4eE1Od1B6NVRkOVhqY3J4dk9MSGdPbTZnam80aGsxSlVEU3krdTNUaXhHd2JaMmhLcjNxK21VeQplM05NdHloeFVQQXdKWnNEZVluUkZkVFRhUFczclFJREFRQUJBb0lDQUNlSFl6ZjZ0Qm5YdTdrNVc5TGNYdXRQCnltZ3k0NlBFMGE2OHpqVkxMMkE3UzZrcHVaTi9lUTBoWnJXUjdXbC9BTzAvRlhrbHBCYjVPTWhVWnE5R1J5MzUKNWM0ZlM4RVhUR2tJKzRjUTd6ckxDZlNFYUxBRVZrdTZnSFh0UEtmdzRzQnNzR2sycGp4dnNWcTkwNG9ERmIvYwoxbS8yamt0bjRHTWRMcldtaFAyMHJuQUtQVEdlL1g4TE9IcFdYMVY1OUQ0am1HTysrQ09pbVdiWGtaSTlXOGRICmtTajRsQlpOSENpMklOVFJVcCtKeFlRaTVXcCtrZkRIbVllTG0vODVsVHJ6SjdoYnhHTGNsREQzOGs2ZTljQmQKcFNmTm84Ujd5RVdTbXgxMlFYclYvMWlZUEhOZ2pnVWs4L3NMV2xqZ3dkeFlaN1FvcUF6R0xHRUFFcGVIenpXaQpheGgvSW1YMnp2QXcxUEJJWDRSYnVhN0NLMWNiWkpkd2RiMy9qd2M3bndEMFM5N212QkpqcllQVEt6TE1ENGp2Ck1oWGI5WVU2VkNUZnpwb2k2cnNaMUJLOURkcER0WHpLYUpxNVM3S1VIWTdYa0hrSFJpYkI5SDU5YjU4Y3BFdDkKZk55Z1RXcHIycDB5V0tiUWxpVWp4NGc0aTBEc0k3N1RucUVuOUQ3TFZ2bURUcDc5UEQ0WExwZFpBV0FoV25yawplRGVnaUV4ZUlzZVkvOGMyOXdZTVNXekwvNWkyUU5YcERsdXdPYUNBZzQ4UmIxNXc0TU1mcWgyR0VJcGhGMCtyCmZxZE9pQ0VqY2ptQVYwbFNHbnNJZXIzVU9MdzF3cXBEOHoyUC9tSGhhZUZLeDEydnhEVHRqbGNMNmZYbEcrR3MKOS9yUUFTamV4TmhZNFo3aWtoUlhBb0lCQVFESWIyYmlIZXhpUmNmakMvVEVHdTJEcG9TM1I1RHFZckZPVFMrUgpCNmEwYWNWS1pPaWtYR253NEtEOTdNcDZBcTJ0QlZhY0pqOWZGUjRBVkRKZ1RuUXhqRk14QXFSZ3FzTkpRYmhwCiszNTdGRS85VlMzQ0Erd1dNdkFWeGRkTkpPQzdDL08ybkhpMVRkWDBaSGVDU1c0cmNGMkRQU1VuQ2lQVEk5MWUKdW84UXJ1aVUxcUJVb3d2dklwSmlFKzZCV1VSTGh4REtLYXJzUklGSHo0N0xOSTU0SEp3UTJ4YTVkSmNiRndqSgo3NDRBR0Y3NmRrWjJWTnpSREdtMlF5UmZQZ1BaTlJnNmJadEd1Tk9aem9yM2MrQVJua3VyRTgweXlHMlphcFZyCldGNUo0Z0RBTWQ3OHdDMyt4dWdXbWZZSmdXdzZMb2F0YlhYemJRL3dQanQxb09YdkFvSUJBUURSSGtCVUs0YkIKdHBhUHU0SSt5R0Q2ZTJwR3MyYW40QmZyK1ZnOUU5SVluNE44cndXNUVLM28vMlc2OWJiejBBaGxnK0U3emZJUwpaV2VrUzJ4cDdETUhQc1J0SHlxQ0FiVU5IaSs5ZFg1MjBaL3pGMzRyMzZwUC9HVGRXSDFGQUdoVk1EQ1N1ZXA2ClZ4Qkk5L2llSkpWMHpRYzhLR0dlZW1Yd0NidFF6MWFycHkrdC9zcU5BQ2ZlQjRReEUyMUk3UnNtci9oKytmQU0KWEdSK0ZkSzN3ZGVEUzBKVWhMcHhSQStvbVE4WjlhWEF2NFRBQld2czFIaE9PNmVjYTF2K2x0c20zc2VFS0kxTgpuVVlVNWdHa29leUI5aHI5cGV3K2w4TjVxK0EwVnlreXVjWmQyUDZ5WitXVXdMd3VJVHc1UnVhb1hwRHUrZThtCjd0ZmlLU2F5OWpnakFvSUJBQlpFa2lpUzdIMHFoWCtMQjRGMkFHYzg2OGUwOHJ1bmhVMU9zL2NuNDNSdHY5WjUKQ1lPaEpMLzNKTXV4TC9tSUxLVnBUMnIvc05DdWR1dlFidHhXT3dCNk40L2RYRWZGRVBjbGp3aHZRV2tKSTYzZwpkYm4xVjVoTHhuS1V6VXVyeWkvZHJ4RGRwMmQxSTAwSWtHSndLQVk1Y0pveEE5eW5lcjF0WVoyeG1rMWZNVVcvCjVvWWdxeVhCTUlRbTlMdDRJR2RIdFN6UW5rV3JnclZvc05PUW5qZG43a3JOSEdRME9NbHdzTEJHcGY4S3RocWIKWTA2b05QUWdyZW5xNGJLWElEUlVlc0diQmNKQXJIbU5BZEZtRlVHLzFXWkhSK2ZaYnB1NXhLbnRZbVJROElacAp3LzFPbUkyU3FaeEJOSjF2dklkbVBkNHNxQXNJVmRuNS8vOGNoZzhDZ2dFQkFNaVJGQy9tZzF2K0ROQVVqdW82CmM5RXFWNWN4OEE2cFB5aGp3WDdyS01IWEZGeWMzWWRQZVEyVkQzUk93VWQ5U3VCYXFjY2JVc2JVSGFDVmVvanAKTTFRS25vanVzRzE2eDdTcU5DMnBxRDY3OVlaSkRRbDFmenN5SDJld3ZJMVd3N3FZK3ExdnhYWExWV0kyKzJ4cQpPREtMaHhucXZSNHIxT054NGdleXBUVURxQlpnM3RKM3lNVUtQbjUzWElUcWJQVWhKOXhaU2lRQTVaMk12c3JpCkR4cnRMdFF6YlVLL2ZhaytEQjdnM1RaT09qdVZ0NXF4ZWlYR3o0NlY1ZWo3dFh2RmhtUzZKRFRCMkhxbzFBQ2MKRVdQZ3NLaUE0R0owV3RheXc5cFBrc01GTFQzTHB4VmowdTFtSWRhNHA3Tmp6a3pFVG92MmlhcTB2N2c1c2RWSgpsRE1DZ2dFQVZZRkloekdwdE8zTVl1UlUwRVhqaFZWL0JxN29YRjNHTkY5ckhRdGVyTmwxOXpoekxnUEVOV3RWCmlwdjlWSzk5TGRTUGEvREpCalpYcjIzSkpGTDlNb0NyYkFqcVJSOFQ4ZTZHTm9xVmZURXJhbFU2RGZmUVpiZ1MKbTRRQXQ5bUs2Q2dTUDB2bmNLTGhaL0pnZkRMcDFJeU1lZURuMzhHcWNkanMrM1NxMk9YZVV0MWFWOWJ5YjhvZApPckZxd0o3WTZ3YWlKbnpQdkFObER6NWVIaFVNY2hIWW5OZnhQZmtLVkc3R2pBSmI2L1M4aks0a2s0b3pQUjF3ClhuMDRkNFlkS1N5MDR6K2FtdWpzR2Y1QndlRUU1bjJiMXlYc203c09lVG5sRFE3SXNURzd5V3l1MTAxWWxUYXQKdnYxZUY5OWhlSk5CWFBRcmpHQXEwRHBiTEFJNWxBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
        node_red:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZCekNDQXUrZ0F3SUJBZ0lVTjVMdHYvZitZalM5V2RaMGVVV0lJNHJkZzNVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0V6RVJNQThHQTFVRUF3d0libTlrWlY5eVpXUXdIaGNOTWpNd09URTVNVFF3TkRFNVdoY05NalF3T1RFNApNVFF3TkRFNVdqQVRNUkV3RHdZRFZRUUREQWh1YjJSbFgzSmxaRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnSVBBRENDQWdvQ2dnSUJBTTA0azVCdzhhNDZvNzJocURUVFJXd0lyT2xDUHRzNWk4ZG11aFJBNUZlQ1gyNjEKN1dRYUlVK1BUN1pONmdhU0J4cWZSSEFPODFlRmlKSnZsTk1jZzVDNlBDVkMvb1pCVXJlbE5mMDlVV1FYajNKNwpLdVBvaWxtaWhwRm80SU81KzlRbXExSTZxWVN1bC91b2Z6ZUQ0ZEg4Z2xCd0R5a2VxMGdUOVAzK1I5UlNPdXFqCkRMVGpkSEI1VmdGbGdIbytRd1NCMFpkYnpuU1grdG9lcjFXdzdwNC9VaGM4ZEJESWcyeEl6Y25TcHZMbXNDbEMKMHduVVRRNDlZMHdWaDVVNlE0NW92eXRyQms0OWJ2OG9JVGdHSSs0MHltT29DTHBlZy90NDlZaTRHdXNyQU4xOQpySENJckI1KzFlQko0MHp3OUhRWDZ6eE9KNjJTSXdpcDl0dDNnZkFUOHc0dlFYRVdoZm5CMEsrY09PbUp4NnZNCnRUMDEraXd2TEtob3Y3REpHSS9DekVsN1lHWk9wTlN6RHM1ZVFjMnNJTDQ0TEdMYnNqVXBMM1hqYmdBeWlpMXkKS3B3VmV5WjZsZXdVdWVxeGdQVlVFTWtrTktYUnpjOTVPeklGN1FMVVNkajEyNnZFZWJZbVRFN1o0MktXdnFJUgp0L2NwZEVtUjVPMW9WUmJWbVdxU2xCdWNYdEpOTGI0bVAvYXdDdkdzSjVaRFZMTTN1dnFycGFqNVY5c1Ezc3AzCjYyZWt3MWVLaWNjcHJ5MGdrd0l4YmRTV3lNeDdxR1NUNlpaQ3NqbDJFU0VraHJyRmxGcythdDFOeWtua3pZZmMKZll1eHFCMEdGd0gzY2ZVVDdPL0UzR1JhWWpTYVl0SnpNVDQyZmZMSUs4eEE5UXNTYjc1ZVU5VGliS1NuQWdNQgpBQUdqVXpCUk1CMEdBMVVkRGdRV0JCU1VBNmVLanFhR3pUTmZQUENEb0tGTjBNeFVlakFmQmdOVkhTTUVHREFXCmdCU1VBNmVLanFhR3pUTmZQUENEb0tGTjBNeFVlakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElDQVFERVQ5TW1IWjZPU0MyMzJjdFdjRC9aanRrdXBPZmZ4dGdpNGkvdG15K0t3WDQxM2RUTwoxSTBRVXFoRVZkK2dVa2xpQ1k4em5oSURNc3R1bGVsOFV2b0tlR084QjVQajd3R25Mc09jOUdZVitSbk00bTU5Cm1SVXRvZDIyNTJrRlFScFN0Y2lza2lPTFNTTlVlWWxzZDBxQ0ZOU1RoK0hmZDJNcTdLazFXT2lBZGwzSzJOUWIKS2EwUkVzR0ZmdHV1UUs5UG9Qc1hRVXVDdlF1Qzhxdzh0dEZscU4xNks0YTZyeDVKYVQxZVBFNStpOHlHNlBRbgptaTl0Ri9VSzJhRzBMSXVaRTVDVTNYN3lVbWNad0RVb1E3MnlNQ1RJdzVtRCtHcURNeVpiNEl5dmM2MlFQUFhGCjRONndpZWI5UUxaMWNueEtKRnlnYUZFOSt1QWRYU1ZVeTVLZzNFa1VhU1VsUlc2ZjBEcjBqWDRkY21NdUFXalgKWVRPQnRMRGZpSmViNFdIZkRGem5KdStGSi8yYmtiM3JCbDlmNWJXSlhQamxFYjMxbE9zTFpvaHZtemdqVU5VZgpmNk9aMXdKdm5hSjU3d2FUc01DTlF4S3lzYWpvemw2cTVqbitzREZnT1VvWWdiWVhjZ2xYUkJxWXhSbEF6NmNiCms3VlFHeGJybGxDMWExSW9RaUdRYkhsWlJPa3RQYlhKUWdNVmhmV0hUcDlScXRDZUhHSUdMZ3VMeXlnYUhaelgKNnhBcTQvaXM2TW80aWpXVUpjN3VGVUlPTGdFaHJKZDl5b1dOUWp2MGJYWU14UzNGODYyVlo3blhqZGxVbnEwOApzRkkyVE1TT1U4QW0yeElWbTNwbVViS0dBc2VsWmRwb1dXaDJqQ3BxTDdNRThQZU5BRktUN08xK1FRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRRE5PSk9RY1BHdU9xTzkKb2FnMDAwVnNDS3pwUWo3Yk9Zdkhacm9VUU9SWGdsOXV0ZTFrR2lGUGowKzJUZW9Ha2djYW4wUndEdk5YaFlpUwpiNVRUSElPUXVqd2xRdjZHUVZLM3BUWDlQVkZrRjQ5eWV5cmo2SXBab29hUmFPQ0R1ZnZVSnF0U09xbUVycGY3CnFIODNnK0hSL0lKUWNBOHBIcXRJRS9UOS9rZlVVanJxb3d5MDQzUndlVllCWllCNlBrTUVnZEdYVzg1MGwvcmEKSHE5VnNPNmVQMUlYUEhRUXlJTnNTTTNKMHFieTVyQXBRdE1KMUUwT1BXTk1GWWVWT2tPT2FMOHJhd1pPUFc3LwpLQ0U0QmlQdU5NcGpxQWk2WG9QN2VQV0l1QnJyS3dEZGZheHdpS3dlZnRYZ1NlTk04UFIwRitzOFRpZXRraU1JCnFmYmJkNEh3RS9NT0wwRnhGb1g1d2RDdm5EanBpY2VyekxVOU5mb3NMeXlvYUwrd3lSaVB3c3hKZTJCbVRxVFUKc3c3T1hrSE5yQ0MrT0N4aTI3STFLUzkxNDI0QU1vb3RjaXFjRlhzbWVwWHNGTG5xc1lEMVZCREpKRFNsMGMzUAplVHN5QmUwQzFFblk5ZHVyeEhtMkpreE8yZU5pbHI2aUViZjNLWFJKa2VUdGFGVVcxWmxxa3BRYm5GN1NUUzIrCkpqLzJzQXJ4ckNlV1ExU3pON3I2cTZXbytWZmJFTjdLZCt0bnBNTlhpb25IS2E4dElKTUNNVzNVbHNqTWU2aGsKayttV1FySTVkaEVoSklhNnhaUmJQbXJkVGNwSjVNMkgzSDJMc2FnZEJoY0I5M0gxRSt6dnhOeGtXbUkwbW1MUwpjekUrTm4zeXlDdk1RUFVMRW0rK1hsUFU0bXlrcHdJREFRQUJBb0lDQUNjdm9HMjZRMHZEZ3JTWkE2ZGltQ1R5CjJ5R0hOcjFobGFFenFtQm5xN0pTQUtzQkxoMHBLQ2NxOUV1WlFSQ1VIYXNsc2ttN2NSZkxOYkxRZjVoNEgxOHAKVUliRTdoandyRHpJM1RCSDN4eS9xdkp2TmxkaWRkaDd3anBOem1FWXlFOVFPdkp1cFNQaXVyNmhBL216d3hEMwpxR0ozbzAxMHY3djVvNVJFVTY3bExMN1U5MzRxMkhjSmxEU2NEeFpJZ1QrQkVtWldiMnV3QVlSWXk1NFBOT0VlCnNpd2hyUC92YWJqcGhmSDl1VWMwYVhyWGViaXN3ekh1NHVFS1UyTlpSc0VRbTBCTkpWMFhPZlNhMHcwQmp5YlQKQ2JwUndhamtsMHNUWTc4QmVKSmpHYjB4WEJYNDR2VEh2MHNla0xxR1lBY3k4Z1lIM21lME9lQlRwQUZ3Sm0wNwpoei9HcUQ5bVV6VkVvOEdic2RiSDdLNi9UL2FXT2dFSDZZZzIvSHJTU05aUVp4YnZmeUYwMDJSVkZ4TVVQTGNTCjBBYUZYd3FmRkhQYkdUbnZoRU1GRUNYWHRSd2FYaGF3Tm5ySnd3SitCQjRQcmZUY3FrOS9LUnVPTTJjUE9ZUGYKMHM1VGhkSnVYN1NUYWNUQlRxeFRYRGc3ekFsNW40bzYxYWoxTTRISHpvZloxNzdHRUlqMTN0czAyZ0dERW1OagpEQm4yZUFKRlZrQjc5MmhNSktTNktiNnhuNlBDYTdRRWRoUG50OVIySWpaWU9mWU4zZk5qUU5lQ3hUWS9tcU02CjJMZEpUWGkrZHNUOHVzM1g1MWRyVUxqalVvdHkyM1BBS3BYdEh3NjFQa1BXNm1IY2JyZlBRdGM3a0dKKzNhU04KeHo3VGNSL1hPMjIyN3c1TVd2WVJBb0lCQVFEV1p3SnFKSldMY1NrYy9nLzlpWEZpVVk5Z2kwdzFCcE5RRVhsdwpKR0ZIQ0ZoaUcrelRpbXVHOXVuL3Yrc1IzbVNxNzV6U2tKMStBME55VU42WkhIRE1ZT3NkZXBCSkRuaW8ySTQ1ClVBbm54c3BKUEFRSlJyemJTYTBxL24ybzl5YVBoWDRLbFhEOFhFaUJuYXhOa3VLeElOK2VXNHJmcmlZcEhITGMKbHVRNlAyNTRjelgvc1FIdUFEVDQvaUVvWDNKM3BBYm1OYlJLWHNuNTZXbElWYUlLWVVkd1JBeXV5ZmIwS1hlQwpZT3JBbXRuczUwVmtJSnNoR2Nua09vVDJXTldzUTVzTDB6MTFZazBDSHRVcXhUS09NSVRBN2w1ZU15YklPekJZCkVteXBLdExGVTJobGczRTdrT0hNQ2g2TkxGSG9TM2cwTDN2TUJaOXlZZlNYcUFnMUFvSUJBUUQxQ1l0Q3JZZHAKZW5SRFF5eGdPSVdwSVI1WWVEWlpiOVBwa1pZbFpMd3BGUDIwU2UwbkNXT2syQk5iOS9FWnZhUFpVYXU5ZGMyQgpZU1d2UE1FVzRxdjRrYkhJczJlcFcyNjVOVTUzNmhrUW5uZTRPWnpBUjh1T2RZTlR5Q2U2Y0FIMno4UmptWktlCjFHc0FmSTEwamhVN3BjbDh6b0d4ZUh4NHlHYXZWQ3RCbnM4MktiakdJNkExSHpHZ1hXY2ZHR2FyRFlDQUQvY1YKeGNzWmsrYnF1Q1o1aUFKZUk3VEVKdEx3YlNhVWN4Nkk2U0hMVk9KQjFnZ3JZTmk0VjhiYjBTdGcwWExvU0w1VAp3OWdUVGlYSS9BV21aS0RVdFNFdnpWMXZXNklCSTArS1NINkRjQmV0L3JaUnR0aENnd1FFek5VM01QVXlYM1BhCjhxeEYwVWlETkN6ckFvSUJBRzI1b2g2NFFtQnV0Vi9GRm1IbTZVUXNBWGlqVVlrQnFIcWR0c3lSa2NkTW1nNzcKdzZRdmZ3QS9kVm9SMmpmMjNRWXVRcy93ZXVsMnVoblRFVmpDbVdlL1loUmdHVitLTEc0ZEJneUd6Y3IwamFvVgpNT3VlYkNDK0FBVzA0SktNaWd1QmdoUGdqMFpYNURPUmdoRGhUMnJmTEJKYlB5TmllTjBwVmc5V21jN0ZqNy9OCkZxR1k4U2ZncXp1U3MxMTZHNWJuTnpDeDQyYjhROW5HZnI4cU5CZWoyVyszSTlhQVBnYVBBajZUWXhEWEx4aHkKODZ4ZWs0WEpNTzNBbFRPT0d5eGlIUU5jUkdQQ3Z5NktvUVdXamx6K3I3SWRTK1podjBOU0oxZXJkampOVmJqdgpDc3FKRG5ZeG01MVV3SFgzYktPNW0vYjVKaDR2OG40VGE1NEJ2TkVDZ2dFQUZzNndtNkF6UG1vYmNEZE1aaGhjCnVJVlFvY051cTV4eENRaDRCVHIvR0lQUHFYeElDcDRoSERMUWVucjFnZ1BZd0YyTnNyRElWQWFLejJqRVFERVEKK0szMjhrdGdscTdmKzNVdXZKS1ppcVoxVmp4bWpxOGdEejU0M3M5K2d5Znh4dHRIMkUxdkRFR1JSQlpUeEVtRgpTR3dCK1Evdm1ta3dqTDE2Y1U5UVIyZFV1aUhnQlBGRDlDM1hIS29VOHh2K1VtV0xWR0FvQzJyQm9Mdlhmbmx0CmUxcGhmZ21zeGFVbmRTRnp1ZFdOUGdrVkVDdnljMVpNcEZ6N1R3MDhnVEZTN0V3U2VmUnJZcmlUNEJnaUJEY1EKLzQvV09IWXpoSk9FNHR5UWs3S0pzTUZXcFQxRnR2aENXQkRBeUZBUmk3RFZGN0lDNEpGcDR6TTdQYlJoSDNVMwp5UUtDQVFCZENUZmVWUUluTk5sREpQc0J4VmZYZGVBZGhicGVvQkEyV1pCb2xGcktHekIrdTJjUnZLU2dPbmdkCjlsVW9Sajc4azdDZWlyQzFiQ2VSaHVHWkk2Q2RNSVJpTE5ncCtUNjcwR0hDNng3Tlk5cStYQU5nR1FCRWdZbi8KczRVZUJuMElyY1dqejdiOFFIT2ZuQmdZUXRONUFia2tKWEIrdmUrVDJLYTlZOGYxS2k3RDkzTWhqMUVpbGRYOQoyS1pGejVZajdwSytBT0FYanFPa0tsTG9JYTZHUkZEOHV1LzlJSUVOMUpHVnpoelBwcGJ3clByMzRpNjhRVHNOClcwQU5tVHVZRjR3YkpnMGo1bEtnVUFaVWYrMUx4V2pNRVZFcUtYTWRSaFJPbmJHTTdOWXhTcGNiaWhzOFI0S1oKc21rNEhyUGFuSTZaR1FmbkJ3aTlNRzZ0NXlIWAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
        databridge:
          cert: |
            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZDekNDQXZPZ0F3SUJBZ0lVQlpNb09aRzlIMkFBZU1wemZ5Qm4rcGx5b3FVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZURVRNQkVHQTFVRUF3d0taR0YwWVdKeWFXUm5aVEFlRncweU16QTVNVGt4TkRBME1qWmFGdzB5TkRBNQpNVGd4TkRBME1qWmFNQlV4RXpBUkJnTlZCQU1NQ21SaGRHRmljbWxrWjJVd2dnSWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElDRHdBd2dnSUtBb0lDQVFDKzVVbVB0S2dYVVdVQ0JhZk5MV2tHN0x5RTBxSXZIU0ZjOUUxSmxKUEgKTTVDVDB6c212ZU5vU2lNNGIybDZHS3BkKy9QdzNCK2dQN2x6aUwxV1EwZnZ5em5DTnp0eWlITHhoUExwS1pqdQpaV0hhWnBqUmdWMklkZjlKcmlMNUlWTld6S0ZWNEROeVpENHJRMVlKcjJ1a2wzTG1kNit0SjVRT1VmUDllYU5NCmFYd1FMNFVYak52VXF5VFIwbEJVMmF4R1ZMQTc3Qzk4Z0VtbjBNK21KQnd0Qm5ZamozZlduSTdhVGRxa0tFNE8KWTR5bmpKeUVEeldDVTFnU2dXWjd6bHVGSUhLTHVHWWpnMTgwTzh4djVlQ1RwYm11bXJGeDRocGVmOTRnSlV4bApkb3dHWG8vazdaR0RhRnI2UGkyaWJ6cVp0NzN6TmlCZ2xoMysyTFMxTkxYb1VZdmx6eXdUL0tuLzZmNExEMW0rCnVuQVo0d1lUUzhrN0JzeGdqMmR5dms5eXhOZFJkNGl3c3FtK2hQajlvamF2cHZweDdUcXdDd2E1c1g4SEFUYzEKWkprNlJ5cVJiRUtyeDdBYXpGeWc0cGZDQzM4aDR5NUI3MXNqc1dpU3hYUzdNZ2wyN1BiVWpoUmNDZlE5RHl5QwpVUGhtYnhQaTgyclVEMExCaTlrdFJQaVlEZDZ1QWwxb2N5N3dmeWRtSkc0cFNTRzhwRlJXR2J3dk1nSGorQ0hyCkM5WTRLZlkxL2kvWVIzMGEwd2NnMzF3ajkxbG91Mkw1VVkvVTBUNGUzN1Z0Ync0UkYxckwvRVp3UHlSZVRwM3cKUnBCUkNxREJ2Z2RRejR5NE91L3IzY2Z3R2Q5ZE1PNWl2Sm5vTTVnMktlYWNwVU5FRWMwYlJmWFdnMm9DWlBmMQpXd0lEQVFBQm8xTXdVVEFkQmdOVkhRNEVGZ1FVVkZ2MmgrMytTckIwcGNPa1Zyb0FLd2tiWmZ3d0h3WURWUjBqCkJCZ3dGb0FVVkZ2MmgrMytTckIwcGNPa1Zyb0FLd2tiWmZ3d0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FnRUFEQUNlTStHY1lIWmYrWnBHNGxBUDVneHNLU24wNHhkVWlueE40WEVwalFTVwpEbyt2emJzcS95MVZUVzNzbXFGOTBINVpIUlBobVJSMjZOMUhjeWFQMGdLRWhCRzI4ZmZ6MWlWV096WGw3UjE3Ci9QMFc3Tngxdi81VEh6bFhPUFdEVE9HWkNOdzZpMnlNTlFjU21WS0RqL29DRmNjRlFtQXdFYTdXUUJ6NHZYcWsKcDRSV3NPTHpxS2x1Mk80OFRyVjV4ZlV2eHVZWmdVNDlNZVVGZzlHZnBEYU42cm8zeUYvdXFJaHUrT0FHUnpUUgpqVEtUTFVhdVBJT0w4YnM2MFlYWHVqbG9iSzI1R1VCUUFpaUZrbWxLTElpQUFTV2xJeHJHMERJRTUySHJlVFVPCllaWlE1VUxNNzdSVjlsdHpyaHFzaUd4dDhjd3RVQmFJUDk1Q05NMDhEUFBzRHI3L0VpS2Fib2o3TGtGSGMycFgKdkxpdC91STZUUHJGOTRnWkp3UER2QVg4T3RtMEVLVnRscGgzQk1MbXNiN0k3MHh6N0c2eEJSMC91Y3hHOE0rTgpEdW1JWEpBRFkrWE9RUE9vMkdjbzhza255ajNoTGlGWXRhNzNmOWhXMzdIWllQYzZCT0o5MUsveWxHTnhXRjB4CkpleVA0djRhTklvZVBKOTVVVGFVU1pPNVZHend0NTV4akgraitTbTF3SDhmckJvSkhFVHRabVJBY3R0US9zS2kKdUcwL3AvUDlOUEc4cG55dHd6NEFRSVEwYVNLTWtXZUhtNzB0U1pQM0hxMW41d1B2K3pqUUxjcStranlmNE5TMwp0UzJacEVNdUxIYzNQajhDL1FtNGhXM20xSlVGL3B6dlNZc0UrQVdxcW50aW5HSkN6c29wTUJISUwrQkhCVGc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
          key: |
            LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQys1VW1QdEtnWFVXVUMKQmFmTkxXa0c3THlFMHFJdkhTRmM5RTFKbEpQSE01Q1QwenNtdmVOb1NpTTRiMmw2R0twZCsvUHczQitnUDdsegppTDFXUTBmdnl6bkNOenR5aUhMeGhQTHBLWmp1WldIYVpwalJnVjJJZGY5SnJpTDVJVk5XektGVjRETnlaRDRyClExWUpyMnVrbDNMbWQ2K3RKNVFPVWZQOWVhTk1hWHdRTDRVWGpOdlVxeVRSMGxCVTJheEdWTEE3N0M5OGdFbW4KME0rbUpCd3RCbllqajNmV25JN2FUZHFrS0U0T1k0eW5qSnlFRHpXQ1UxZ1NnV1o3emx1RklIS0x1R1lqZzE4MApPOHh2NWVDVHBibXVtckZ4NGhwZWY5NGdKVXhsZG93R1hvL2s3WkdEYUZyNlBpMmlienFadDczek5pQmdsaDMrCjJMUzFOTFhvVVl2bHp5d1QvS24vNmY0TEQxbSt1bkFaNHdZVFM4azdCc3hnajJkeXZrOXl4TmRSZDRpd3NxbSsKaFBqOW9qYXZwdnB4N1Rxd0N3YTVzWDhIQVRjMVpKazZSeXFSYkVLcng3QWF6RnlnNHBmQ0MzOGg0eTVCNzFzagpzV2lTeFhTN01nbDI3UGJVamhSY0NmUTlEeXlDVVBobWJ4UGk4MnJVRDBMQmk5a3RSUGlZRGQ2dUFsMW9jeTd3CmZ5ZG1KRzRwU1NHOHBGUldHYnd2TWdIaitDSHJDOVk0S2ZZMS9pL1lSMzBhMHdjZzMxd2o5MWxvdTJMNVVZL1UKMFQ0ZTM3VnRidzRSRjFyTC9FWndQeVJlVHAzd1JwQlJDcURCdmdkUXo0eTRPdS9yM2Nmd0dkOWRNTzVpdkpubwpNNWcyS2VhY3BVTkVFYzBiUmZYV2cyb0NaUGYxV3dJREFRQUJBb0lDQUNuSE5wVTczWG5VOTMwOHpaK3E2NHgzCmJUN0lkblJITk5FS0tvd0s5MWltWVdMbzNNNDZ5clU5WEgzeWJDd3JqOFduNlpoeUpIM0cxSWlEaWFTQ2J4RDgKOGpRZU1HVjlsV0prVFdGWUdEODhjdkVBZVR1SXkzYWRGSFVFcG1UTnRWYU96RlJtRC94ZUVma1g4SkdJRWMvZwowV1c5RmZhWWJkL0FjZHlzclYrQXlvVWtVVVY1TDNkWXlXTWVXelJtdXp4ZE5vQzJ6U0c3VmVOallMNmtzb0hzCkl4amZRa1AyMlpEUGJ5VjBLTGtmY2w0TStRZ3g1KzBRM25xV1ZWNk5LQngzb0hvUnJsRGhaSW1pK0xnWW9GRFAKK1ZaTVJyOTgwM2FSRjRVRGhMZkQvUnM3d05SQ1poRlRXbTNnQTg3RDl4aERUVkFZTFhmV0F0U09pdVlKbGpIVAo1TENZajFtSU8vSmEzY3lialZHczRVajBSekpaUGdweXZtckRwZ0JsRG1Jb1FsYWpoeXc4NzRDNEo0c21ZSHV1CmYvWTZBOWdpclpDWHJEdGgxWDBxeXRmMy9rcGhOQm5mOTM2Uml1SDlmeFVaVlZNUzVEL1pEdGhQZCtZQXJMRTUKN3M3MkhwRFIrakFsUUVqbS94MTN4aGZlK3dFUncwQXZSbXlTMER2S1BEM0J1SnU5R04yK2xyK0daNnU5d2h0dApUVU8rVHdmVlRNdHQ1SmlBbU9XRTByaUlLbzJvcnIrcHBmOFRabWFUMVhxYWlWTFk2dEo4dzlkM3VTVXY2NzlnCk4yRHJhTW1wTHpUaERrekxzVWtHeXo1VWpiREpRbUhoVUdscVAxM1dudkNza2N6QWp0ZCtsNXdWei9VZE4rSUIKTXZoeVdrM2tmLzYva2ZFR0dnMTVBb0lCQVFETFNuTmlzUmZxU0FITVAwd2dseTdLM1pwOTVuSnRaYStqUU1aQwoyazFmOHVyNFU0K21WM3VzQURNalMzR29VNENHRGhxUGhaNXRTUzk2SERVc0NpY1dCSzZrNkRpZ29RbmpXVGFPCmVENnA3NlAxcjBQQWFRL3I1Mm5TSC91WS9ZUXJzQ3BmMWFMM2VUdHZES2lRbUhxNTNSSEExQ3UwWWhkMDJoZmoKNlBSdUY5b3hxVy8zdmp5cDU0cGJxdnZsWTkwL0xPUzFnbHZLOTl2bGx2dFkxZWxTR1V1WFVNREtRdmFteGVEaQpsR1BYMlBSRWx2L21OY09IcXhqdGU2OXB3a1RwMGdjbFVrMDZ1cDRicWhoemJ6MjFJUkpZZ0NvbzN6SWNORDhLCjlvdnlzNWhWRjBoTjJpcEl1TEk5QlI2eCtJM0RmTHo4N1hTOW1pRTNqR0gxSzJwSEFvSUJBUUR3WkJtUjM3T2gKNlVxQ3c3TUE3bGNqZWVmTVd5MXEwRFlUdytmTHRTM2htdHAyR2dISnptdVdORGNOeVIzKzJ4a0R3K2JRZEIyZQpiSW4yVk9XYmk3VEJvWXNaN2FHdCtmK2hkR3ZSV1FnUDZFN0VydTRiTnZLekdwb3ZocitKWDBndkQzclZZM2RMCmFROXg1aXJUcEw3T2JVZDlSbWgzcVZaN29KV2t5RnNRZE5TSFFzTmtjUzJ3R3BSZEFnc285dVI1bXBWTFl0NW4KbWNlUm1RRU5wWWhLTXVucVdoclprYjI2UHJ5TUJrR011MnM5aUVDaVBqcjBSeE1hMkw5ZDhlTEFhQXozTWxTaQpYZ25iVURCZDV5RmVwcVRxMldnU0xwUWM2ZkZpZ2NWVlVUZjBKSkQvcE1xMmVHa2I5MTJPWFkyajE0YVRkWW1JClRvT0dYRTNqRUJKTkFvSUJBRUdWZ0VvcnBmS0FUb3d0TTRza0d3VjVucmpWV3I4dVdnNkovQ3hmTHkwd09sdm8KNFdRaHZ4VkxielFJeDk4dEtUNldXRDFMTjBROG95TjY3RENNQ2ZZUmhxSlBCTTNWaGxJaFd2ZDFsWW5QZFE3eQoveUdaQTNqd3pIUHN1NGVzNmpJS0FIR3dnNFhoUjZwWTVCemFCR1hvQ3kweGhmUUkzVlptY2VTbUtBMUlocTBVCjQ3bUNWeUhkUUFhNHo5RStlWWRESFhudFYxM1F2dEYvOXhDKzJpb1JYUkN4RGJGekR3M1lzdWVHUmZ2QjAzUTUKWHM5UE13aVd5MUQ2WVNuMmNiTVpmaEt0VFpzUHo2aFBKTnBBM2lDTVRkWGRhenlLWFNrNk5jaDhwOE9oNnhndwpqYlFJR1RJaTIrWFJ2QWhnanFPdG4yN2QwSmJHbmNiRTlHbGJHMHNDZ2dFQU5qNGdGdTVuVmkyU0JwZXFHSmV2ClNlNEVBL1MrOXM4c3BLRWIrTGRWTndiK0xKQUp2ME80dXhmbEpGTXhWWVNTekdxejltMTlFWFprV3hVbENrZ24KN1ZsS1RmdDA5QkRwUWNGSFl1RzRFLzdUWjBZaHJEcGw0VXdyWm5YOVdqNEp4N1N5ZnR3RzJ4bEZ4dW1zMkR6ZwpZU3YvYWFFdGlYTElkUFR6VDA5MlhPdy8ySldVQ1dJUWNTQk9RZjVvRGtKSG83amgzelRjQW55TXI2bmF0djJYCkYwY055VGV6djB4SGgzTUlrSUFJNG55WDRqYVFmd3VUdWZNZnVIc1lFMWExVjcwaXo5U25qRXV6NWF6ZWZSSGUKVWNGQWpVMnBVaEQ0a3QybS9oZFNNOEl6NGY4dVNNRWlqTEgyNWJ5WGU3eFliWlFBWmQycnZ2b1lhNFVBZmkvdQpNUUtDQVFFQXdIVlJKM0ZxcnI3ZytPL2dORWdRNU01TVUyT0NzQ2g0SXBLSGxvUHdYOE9OS09WdC9GNzNTUEwvCnlKVy9PSFpNemsrcmVldi90eWNqYVkxRU5YWmxGRjdCQzJGd2tndGpMWGVPNlFmRTRwaE93a2NUdzJGamE4MW8KQ2o0K2J2UWcydTJEREM2dDcxc2FvZjhib0ZzR2RsdjRuaHNTT2pwd2tYalhuL2Q4NHZIVU9MRXdSOXlKeEtKSwpHRjJqUFJrZDFLWGoybkUyRWNoM21iN1FPWnV3bmN2Q1lEalVkZkFZWTlvVm0wQWhuc0M3N1RFdHFsTlc3RmFFCjNFL1pOOVNtWS91TGJ0a215MFpxdm1LdC9oTnhVTnYxYmNpU1RzWk1xeGEzcDdYVjdIZ25ZSWN4aDQ1TmdiM0cKdHJnTU5kUnk1SjVyZFpSNHNKY0N0QWF4czdFWXJBPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
    

    # apache kafka, mqttkafkabridge, kowl, kafkatopostgresql
    kafka:
      enabled: true
      defaultTopics: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic

  # timescaledb, factoryinsight, grafana, redis
  # datastorage is the basic infrastructure to get messages from MQTT, storing them in a database and exposing a REST API with KPIs that can be used in Grafana (contains timescaledb, factoryinsight, mqtt-to-postgresql, grafana, vernemq, )
  # If you want to enable only some of these components, set enabled to false and enable them in the detailed configuration below 000_commonConfig
  datastorage:
    enabled: true
    db_password: "changeme"




  kafkaBridge:
    enabled: false
    remotebootstrapServer: ""
    topicCreationLocalList: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic # ; seperated list of topics to create on local broker, if they do not exist
    topicCreationRemoteList: ia.test.test.test.processValue;ia.test.test.test.count;umh.v1.kafka.newTopic # ; seperated list of topics to create on remote broker, if they do not exist
    topicmap:
# Example topic map
#      - bidirectional: false
#        name: HighIntegrity
#        send_direction: to_remote
#        topic: ^ia\.(([^r.](\d|-|\w)*)|(r[b-z](\d|-|\w)*)|(ra[^w]))\.(\d|-|\w|_)+\.(\d|-|\w|_)+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$
#      - bidirectional: false
#        name: HighThroughput
#        send_direction: to_remote
#        topic: ^ia\.(([^r.](\d|-|\w)*)|(r[b-z](\d|-|\w)*)|(ra[^w]))\.(\d|-|\w|_)+\.(\d|-|\w|_)+\.(process[V|v]alue).*$

  kafkaStateDetector:
    enabled: false

  debug:
    enableFGTrace: false # Enables https://github.com/felixge/fgtrace. DO NOT USE IN PRODUCTION!
  tulipconnector:
    enabled: false
    domain: "tulip-connector.changeme.com"

  metrics:
    # Allow sending of non PII metrics to United Manufacturing Hub
    enabled: true

  racedetector:
    enabled: false

_001_customMicroservices:
  -
      name: example
      image: hello-world:latest
      enabled: false

      # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
      imagePullPolicy: Always

      # these will be passed as environment variables
      env:
        - name: LOGGING_LEVEL
          value: PRODUCTION
      # service type. NordPort or LoadBalancer
      serviceType: LoadBalancer
      # this will expose port 80 on the host on port 8080
      port: 80
      externalPort: 8080

      # startupProbe, livenessProbe, check whether port 9090 "/health" is accessible.
      # If not (e.g., due to container stuck), the container will be restarted
      # startupProbe: 100
      # livenessProbe: 50
      # probePort: 9090

      # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
      # Recommendation is to turn it off
      statefulEnabled: true
  -
      name: example1
      image: hello-world:latest
      enabled: false

      # imagePullPolicy: Always is recommended when using latest tags. Otherwise, please use IfNotPresent
      imagePullPolicy: Always

      # these will be passed as environment variables
      env:
        - name: LOGGING_LEVEL
          value: PRODUCTION
      # service type. NordPort or LoadBalancer
      serviceType: LoadBalancer
      # this will expose port 81 on the host on port 8081
      port: 81
      externalPort: 8081

      # startupProbe, livenessProbe, check whether port 9091 "/health" is accessible.
      # If not (e.g., due to container stuck), the container will be restarted
      startupProbe: 200
      livenessProbe: 500
      probePort: 9091

      # statefulEnabled will automatically mount a volume under /data, which can be used to store data.
      # Recommendation is to turn it off
      statefulEnabled: false

##### DO NOT CHANGE ANYTHING BELOW HERE (except when you know what you are doing) #####

serviceAccount:
  create: true

### kafkastatedetector ###
kafkastatedetector:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafkastatedetector
    pullPolicy: IfNotPresent
  activityEnabled: true
  anomalyEnabled: true

### barcodereader ###
barcodereader:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/barcodereader
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "2m"
      memory: "30Mi"
    limits:
      cpu: "10m"
      memory: "60Mi"
  scanOnly: false # Debug mode, will not send data to kafka

### sensorconnect ###
sensorconnect:
  storageRequest: 1Gi
  image: management.umh.app/oci/united-manufacturing-hub/sensorconnect
  ioddfilepath: "/ioddfiles"
  lowerPollingTime: 100 # Fastest time, sensors should be requested to serve data
  upperPollingTime: 1000 # Slowest time, sensors should be requested to serve data
  pollingSpeedStepUpMs: 20 # Time to add to actual stepping in case of failure
  pollingSpeedStepDownMs: 1 # Time to add to actual stepping in case of no-failure
  sensorInitialPollingTimeMs: 100 # Time to begin retrieving sensor data (Set higher then lowerTickSpeedMs to not kill sensors instantly, after they recovered from overload)
  deviceFinderTimeSec: 20 # Time in sec, before finding new devices
  deviceFinderTimeoutSec: 1 # HTTP timeout for finding new sensors. NEVER set lower then DeviceFinderFrequenceySec
  maxSensorErrorCount: 50 # Errors before a sensor is temporarily disabled
  allowSubTwentyMs: 0 # Set to 1 to allow lowerTickSpeedMs of under 20ms. THIS IS DANGEROUS !!!
  additionalSleepTimePerActivePortMs: 0.0 # Additional time to add to sleep time, based on active ports (especially helpful if you mix devices with 1-2 sensors and devices with 8 sensors)
  additionalSlowDownMap: [] # JSON map, allowing for slowing down/speeding up sensors based on serialnumber, productcode or url
                            # Example:
                            # [{"serialnumber":"000200610104","slowdown_ms":-10},{"url":"http://192.168.0.13","slowdown_ms":20},{"productcode":"AL13500","slowdown_ms":20.01}]
  resources:
    requests:
      cpu: "10m"
      memory: "75Mi"
    limits:
      cpu: "100m"
      memory: "200Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: ZVF5bDJ4TWtjVXVWZVVESlRXZU1DSHA4cDdHbUhKSEc=:100:B42+ySldBE+uilWricvIif+UJ0oW5iXafloUyiZclbYoQOOthOet5NQAKCTHITDSHadxvjbgfiF/908QmwqZOw==

### iotsensorsmqtt ###
iotsensorsmqtt:
  image: management.umh.app/oci/amineamaach/sensors-mqtt
  tag: v1.0.0
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "30m"
      memory: "50Mi"
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: T3VSY2szQ0diWDkyOGpoSGpDQzVqc29VZlJ2UkxiOTI=:100:6qxZS+Bhn8QXrF1dUo6fU9Eg/esjw6zipq6xv9uct84Jyhv0mJTUi5SHSBW4TbF66vBOrE3JnZ//rUutEl8/Bw==

### opcuasimulator ###
opcuasimulator:
  image: management.umh.app/oci/united-manufacturing-hub/opcuasimulator
  tag: 0.1.0
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "30m"
      memory: "50Mi"
  service:
    annotations: {}
    # certadds can add hostnames and ip addresses to the certificate for the simulator so connection to the opcua client is easier
  certadds:
    hosts: "united-manufacturing-hub-opcuasimulator-service"
    #ips: "1.1.1.1"

### kafkabridge ###
kafkabridge:
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-bridge
    pullPolicy: IfNotPresent
  # tag: development
  initContainer:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-init
    pullPolicy: IfNotPresent

### nodered ###
nodered:
  mqtt:
    encryptedPassword: aVptalRWUk5Dd0QxQmtlekRYcnlZemJ3VTJKMTlDZWE=:100:PrJcg4O5Y371AnbS+Qt//rdNhjeBfkpWm24B0TBQPmNC+3ANbjIpFoJUh/gfBZHdE8fI6DwU8/u7RSjBuSTRkA==
  tag: 3.0.2
  port: 1880
  storageRequest: 1Gi
  env:
    NODE_RED_ENABLE_SAFE_MODE: false
  timezone: Berlin/Europe
  serviceType: LoadBalancer
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  flows: {}
  settings: {}



### factoryinsight ###
factoryinsight:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/factoryinsight
    pullPolicy: IfNotPresent
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2
  replicas: 2
  user: "factoryinsight"
  version: 2  # Minimum api version to host (e.g: 2 will host v1 and v2, 3 will host v1, v2 and v3)
  # Password will be generated automatically
  db_host: "united-manufacturing-hub"
  db_database: "factoryinsight"
  db_user: "factoryinsight"
  redis:
    URI: united-manufacturing-hub-redis-headless:6379
  service:
    annotations: {}
  pdb:
    enabled: false
  hpa:
    enabled: false
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 50m
        memory: 50Mi
  insecure_no_auth: false # DO NOT ENABLE IN PRODUCTION. This will disable authentication and authorization

### kafka-to-postgresql ###
kafkatopostgresql:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-to-postgresql
    pullPolicy: IfNotPresent
    # tag: latest
  initContainer:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-init
    pullPolicy: IfNotPresent
  replicas: 1
  storageRequest: 1Gi
  listenTopic:
    # All topics except processValue
    # Kafka doesn't seem to be able to do negative lookaheads
    #highIntegrity: '^ia\..+\..+\..+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$'
    #highThroughput: '^ia\..+\..+\..+\.(process[V|v]alue).*$'
  resources:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 150Mi

### timescaleDB ###
timescaledb-single:
  replicaCount: 1
  image:
    # Image was built from
    # https://github.com/timescale/timescaledb-docker-ha
    repository: management.umh.app/oci/timescale/timescaledb-ha
    tag: pg13.8-ts2.8.0-p1
    pullPolicy: IfNotPresent
  #prometheus:
  #  image:
  #  repository: management.umh.app/oci/prometheuscommunity/postgres-exporter

  # This configuration will be passed on to Patroni directly, there are a few things that are
  # injected/changed, these are:
  #   - archive_command will be set to /bin/true if backup is disabled
  #   - any context sensitive parameter (scope, namespace, name) will be overridden by the Kubernetes context
  # https://patroni.readthedocs.io/en/latest/SETTINGS.html#settings
  patroni:
    postgresql:
      create_replica_methods:
        - basebackup

  postInit:
    - configMap:
        name: timescale-post-init
        optional: false
    - secret:
        name: timescale-post-init-pw
        optional: false
  service:
    primary:
      type: LoadBalancer
  serviceAccount:
    create: false

### grafana ###
grafana:
  image:
    repository: management.umh.app/oci/grafana/grafana
  serviceAccount:
    create: false

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    minAvailable: 1
  #  maxUnavailable: 1

  testFramework:
    enabled: false
    image: management.umh.app/oci/bats/bats

  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: LoadBalancer
    port: 8080

  extraInitContainers:
    - image: management.umh.app/oci/united-manufacturing-hub/grafana-umh:1.2.1
      name: init-plugins
      imagePullPolicy: IfNotPresent
      command: ['sh', '-c', 'cp -r /plugins /var/lib/grafana/']
      volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana

  ## Enable persistence using Persistent Volume Claims0
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    size: 5Gi

  initChownData:
    ## If false, data ownership will not be reset at startup
    ## This allows the prometheus-server to be run with an arbitrary user
    enabled: true
    image:
      repository: management.umh.app/oci/library/busybox

  sidecar:
    image:
      repository: management.umh.app/oci/kiwigrid/k8s-sidecar
  imageRenderer:
    image:
      repository: management.umh.app/oci/grafana/grafana-image-renderer
  # Use an existing secret for the admin user.
  admin:
    existingSecret: "grafana-secret"
    userKey: adminuser
    passwordKey: adminpassword

  ## Extra environment variables that will be pass onto deployment pods
  ##
  ## to provide grafana with access to CloudWatch on AWS EKS:
  ## 1. create an iam role of type "Web identity" with provider oidc.eks.* (note the provider for later)
  ## 2. edit the "Trust relationships" of the role, add a line inside the StringEquals clause using the
  ## same oidc eks provider as noted before (same as the existing line)
  ## also, replace NAMESPACE and prometheus-operator-grafana with the service account namespace and name
  ##
  ##  "oidc.eks.us-east-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:sub": "system:serviceaccount:NAMESPACE:prometheus-operator-grafana",
  ##
  ## 3. attach a policy to the role, you can use a built in policy called CloudWatchReadOnlyAccess
  ## 4. use the following env: (replace 123456789000 and iam-role-name-here with your aws account number and role name)
  ##
  ## env:
  ##   AWS_ROLE_ARN: arn:aws:iam::123456789000:role/iam-role-name-here
  ##   AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
  ##   AWS_REGION: us-east-1
  ##
  ## 5. uncomment the EKS section in extraSecretMounts: below
  ## 6. uncomment the annotation section in the serviceAccount: above
  ## make sure to replace arn:aws:iam::123456789000:role/iam-role-name-here with your role arn

  env:
    GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: umh-datasource,umh-v2-datasource

  ## "valueFrom" environment variable references that will be added to deployment pods
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#envvarsource-v1-core
  ## Renders in container spec as:
  ##   env:
  ##     ...
  ##     - name: <key>
  ##       valueFrom:
  ##         <value rendered as YAML>
  envValueFrom:
    FACTORYINSIGHT_BASEURL:
      secretKeyRef:
        name: factoryinsight-secret
        key: baseURL
    FACTORYINSIGHT_APIKEY:
      secretKeyRef:
        name: factoryinsight-secret
        key: apiKey
    FACTORYINSIGHT_CUSTOMERID:
      secretKeyRef:
        name: factoryinsight-secret
        key: customerID
    FACTORYINSIGHT_PASSWORD:
      secretKeyRef:
        name: factoryinsight-secret
        key: password
    GRAFANAREADER_USER:
      secretKeyRef:
        name: grafana-secret
        key: databaseuser
    GRAFANAREADER_PASSWORD:
      secretKeyRef:
        name: grafana-secret
        key: databasepassword

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: umh-v2-datasource
          # <string, required> datasource type. Required
          type: umh-v2-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          jsonData:
            customerID: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            baseURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: false
          editable: false
        # <string, required> name of the datasource. Required
        - name: umh-datasource
          # <string, required> datasource type. Required
          type: umh-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          jsonData:
            customerId: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            serverURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: false
          editable: false
        # https://grafana.com/docs/grafana/latest/datasources/postgres/
        - name: UMH TimescaleDB 
          type: postgres
          url: united-manufacturing-hub:5432
          user: $GRAFANAREADER_USER
          isDefault: true
          secureJsonData:
            password: $GRAFANAREADER_PASSWORD
          jsonData:
            database: umh_v2
            sslmode: 'require' # disable/require/verify-ca/verify-full
            maxOpenConns: 100 # Grafana v5.4+
            maxIdleConns: 100 # Grafana v5.4+
            maxIdleConnsAuto: true # Grafana v9.5.1+
            connMaxLifetime: 14400 # Grafana v5.4+
            postgresVersion: 1300 # 903=9.3, 904=9.4, 905=9.5, 906=9.6, 1000=10
            timescaledb: true

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    database:
      host: united-manufacturing-hub
      user: "grafana"
      name: "grafana"
      password: "changeme"
      ssl_mode: require
      type: postgres
    log.console:
      format: json

### packmlmqttsimulator ###
packmlmqttsimulator:
  image:
    repository: management.umh.app/oci/spruiktec/packml-simulator
    pullPolicy: IfNotPresent
    hash: 01e2f0da3542f1b4e0de830a8d24135de03fd9174dce184ed329bed3ee688e19
  env:
    area: DefaultArea
    productionline: DefaultProductionLine
    site: testLocation
    mqtt:
      password: INSECURE_INSECURE_INSECURE
      encryptedPassword: ZzBCbzEyaWlnZkRjbndTa2RLTW1aSmlsOWtQSWtpak0=:100:9FWqFUN88VPio9yFR59XbE9fr/GUkM1fnKCNn2wvK06MMtKp5LPtUrTCOLhHgkFQ6IMw92wi9HTsLRFxnM+reQ==
  replicas: 1
  resources:
    requests:
      cpu: "10m"
      memory: "20Mi"
    limits:
      cpu: "30m"
      memory: "50Mi"

### tulip-connector ###
tulipconnector:
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/tulip-connector
    pullPolicy: IfNotPresent
    # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
    tag: 0.1.0
  replicas: 1
  env:
    mode: prod
  resources:
    limits:
      cpu: 30m
      memory: 50Mi
    requests:
      cpu: 10m
      memory: 20Mi

### mqtt-kafka-bridge ###
mqttkafkabridge:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/mqtt-kafka-bridge
    pullPolicy: IfNotPresent
  pdb:
    enabled: true
    minAvailable: 1
  initContainer:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-init
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "400m"
      memory: "300Mi"
    limits:
      cpu: "500m"
      memory: "450Mi"
  mqttSenderThreads: 1
  kafkaSenderThreads: 1
  kafkaAcceptNoOrigin: "false"
  rawMessageLRUSize: 100000
  messageLRUSize: 100000
  mqtt:
    password: INSECURE_INSECURE_INSECURE
    encryptedPassword: WDRkN1c4MnpVb3BsS25qZG5qbkcxSUFuQm5kVVZVbW4=:100:H/o0vsDqmVfzkoLU6rPG8C7+0gzYjkH2E7q3+/5aXKFlSYEyBO/tiin02gxpcB0A/1j7fudGbZhQfI+dZa1GCQ==

### kafka-to-blob ###
kafkatoblob:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-to-blob
    pullPolicy: IfNotPresent
  replicas: 1
  pdb:
    enabled: true
    minAvailable: 1

##### CONFIG FOR APACHE KAFKA #####
redpanda:
  image:
    repository: management.umh.app/oci/redpandadata/redpanda
  serviceAccount:
    create: false
  fullnameOverride: united-manufacturing-hub-kafka
  statefulset:
    replicas: 1
  rbac:
    enabled: true
  storage:
    persistentVolume:
      size: 10Gi
  listeners:
    kafka:
      port: 9092
  resources:
    cpu:
      cores: 1
    memory:
      enable_memory_locking: true
      container:
        max: 2Gi
  config:
    cluster:
      auto_create_topics_enabled: true
    tunable:
      default_topic_partitions: 6
  tls:
    enabled: false
  console:
    serviceAccount:
      create: false
    service:
      type: LoadBalancer
      port: 8090
      targetPort: 8080
    console:
      config:
        kafka:
          brokers:
            - united-manufacturing-hub-kafka:9092

##### CONFIG FOR REDIS #####
redis:
  image:
    registry: management.umh.app/oci
  architecture: standalone
  commonConfiguration: |-
    maxmemory-policy allkeys-lru
    maxmemory 50mb
    # Backwards compatability with Redis version 6.*
    replica-ignore-disk-write-errors yes
  master:
    extraFlags:
      - --maxmemory 50mb
    livenessProbe:
      initialDelaySeconds: 5
    readinessProbe:
      initialDelaySeconds: 120
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
      requests:
        cpu: 50m
        memory: 50Mi
  metrics:
    enabled: true
    image:
      registry: management.umh.app/oci/
  pdb:
    create: true
    minAvailable: 2
  serviceAccount:
    create: false
  auth:
    existingSecret: redis-secret
    existingSecretPasswordKey: redispassword
  sentinel:
    image:
      registry: management.umh.app/oci/
  volumePermissions:
    image:
      registry: management.umh.app/oci/
  sysctl:
    image:
      registry: management.umh.app/oci/

##### CONFIG FOR HIVEMQ CE
##### you can set a tag if you want a version other than 2023.7
mqtt_broker:
  image:
    repository: management.umh.app/oci/hivemq/hivemq-ce
    tag: 2023.7
    pullPolicy: IfNotPresent
  rbacEnabled: false
  initContainer:
    hivemqextensioninit:
      image:
        repository: management.umh.app/oci/united-manufacturing-hub/hivemq-init
        tag: 3.0.0
        pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 700m
      memory: 1700Mi
    requests:
      cpu: 300m
      memory: 1000Mi
  persistence:
    extension:
      size: 100Mi
    storage:
      size: 2Gi
  service:
    mqtt:
      enabled: true
      port: 1883
    mqtts:
      enabled: true
      port: 8883
      tls_versions:
        - "TLSv1.3"
        - "TLSv1.2"
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA
    type: LoadBalancer
    ws:
      enabled: false
      port: 8080
    wss:
      enabled: false
      port: 8443
      tls_versions:
        - "TLSv1.3"
        - "TLSv1.2"
      cipher_suites:
        - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
        - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
        - TLS_RSA_WITH_AES_128_GCM_SHA256
        - TLS_RSA_WITH_AES_128_CBC_SHA
        - TLS_RSA_WITH_AES_256_CBC_SHA

metrics:
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/metrics
    pullPolicy: IfNotPresent
    #tag: latest
  cronJob:
    schedule: "0 */4 * * *" # Run every 4 hours

databridge:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/databridge
    pullPolicy: IfNotPresent
  pdb:
    enabled: true
    minAvailable: 1
  replicas: 1
  resources:
    requests:
      cpu: "400m"
      memory: "300Mi"
    limits:
      cpu: "500m"
      memory: "450Mi"


### kafka-to-postgresql ###
kafkatopostgresqlv2:
  enabled: false
  image:
    repository: management.umh.app/oci/united-manufacturing-hub/kafka-to-postgresql-v2
    pullPolicy: IfNotPresent
    # tag: latest
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 300Mi
    requests:
      cpu: 100m
      memory: 150Mi
  probes:
    startup:
      failureThreshold: 30
      initialDelaySeconds: 10
      periodSeconds: 10
    liveness:
      periodSeconds: 5
    readiness:
      periodSeconds: 5
  logging:
    level: PRODUCTION
  asset:
    cache:
      lru:
        size: 1000
  workers:
    channel:
      size: 10000
    goroutines:
      multiplier: 16 # Logical CPU's * this value
  database:
    user: "kafkatopostgresqlv2"
    password: "changemetoo"