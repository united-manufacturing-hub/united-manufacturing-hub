name: Test UMH Full Deployment

on:
  pull_request:
    paths:
      - 'deployment/**'
      - 'golang/**'
      - 'test/**'
      - '!test/test-values-tiny.yaml'
      - '.github/workflows/test-umh-full-deployment.yml'

env:
  CHART_DIR: ./deployment/united-manufacturing-hub
  HELM_TIMEOUT: 10m
  K3D_VERSION: v5.4.6
  K3S_VERSION: v1.24.4-k3s1
  VALUES_FILE: ./test/test-values-full.yaml
  UMH: united-manufacturing-hub

jobs:
  data-flow-test:
    name: Data Flow Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare k3d cluster
        id: prepare-k3d
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "umh-full"
          k3d-version: ${{ env.K3D_VERSION }}
          args: --agents 1 --image rancher/k3s:${{ env.K3S_VERSION }} --volume '/tmp:/tmp'
      - name: Download IODD Context
        id: download-iodd-context
        run: |
          curl -sSl --request GET --url "https://ioddfinder.io-link.com/api/drivers?page=0&size=2000&status=APPROVED&status=UPLOADED&deviceIdString=278531" --output "context.json"
          mkdir -p /tmp/test-ioddfiles
      - name: Extract IODD Context Content
        id: extract-iodd-context
        run: |
          jq -c '.content[] | select(.ioddId == 515)' context.json > /tmp/test-ioddfiles/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1-context.json
      - name: Download IODD File
        id: download-iodd-file
        run: |
          curl -sSL --request GET --url "https://ioddfinder.io-link.com/api/vendors/42/iodds/515/files/zip/rated" --output "/tmp/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.zip"
      - name: Extract IODD File
        id: extract-iodd-file
        run: |
          unzip -q /tmp/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.zip -d /tmp
      - name: Move IODD File
        id: move-iodd-file
        run: |
          mv /tmp/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.xml /tmp/test-ioddfiles/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.xml
      - name: Install UMH
        id: install-umh
        run: |
          helm install ${{ env.UMH }} ${{ env.CHART_DIR }} \
            --values ${{ env.VALUES_FILE }} \
            --set "kafkastatedetector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttbridge.tag=${GITHUB_HEAD_REF##*/}" \
            --set "barcodereader.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "sensorconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "cameraconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinsight.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinput.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "grafanaproxy.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "tulipconnector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatoblob.image.tag=${GITHUB_HEAD_REF##*/}" \
            --namespace ${{ env.UMH }} \
            --create-namespace \
            --wait --timeout ${{ env.HELM_TIMEOUT }} \
            --debug
          kubectl apply -f ./test/generic-data-flow-test-script.yaml -n ${{ env.UMH }}
          kubectl apply -f ./test/sensorconnect-mock/sensorconnect-mock.yaml -n ${{ env.UMH }}
          kubectl get po,svc -n ${{ env.UMH }}
      - name: Debug Install UMH failure
        id: debug-install-umh-failure
        if: ${{ failure() && steps.install-umh.outcome == 'failure' }}
        run: |
          mkdir -p ./install-umh-step
          cd ./install-umh-step
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          helm status ${{ env.UMH }} -n ${{ env.UMH }} > helm-status.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Run Data Flow Test Job
        id: run-data-flow-test
        run: |
          kubectl apply -f ./test/data-flow-test/data-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/data-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Data Flow Test Job succeeded"
          kubectl logs job/data-flow-test -n ${{ env.UMH }} || true
      - name: Debug Data Flow failure
        id: debug-data-flow-failure
        if: ${{ failure() && steps.run-data-flow-test.outcome == 'failure'  }}
        run: |
          mkdir -p ./run-data-flow-test-step
          cd ./run-data-flow-test-step
          kubectl logs job/data-flow-test -n ${{ env.UMH }} > job-data-flow-test.log || true
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Run Sensorconnect test
        id: run-sensorconnect-test
        run: |
          sleep 120
          kubectl apply -f ./test/sensorconnect-mock/sensorconnect-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/sensorconnect-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Sensorconnect Flow Test Job succeeded"
          kubectl logs job/sensorconnect-flow-test -n ${{ env.UMH }} || true
      - name: Debug Sensorconnect Flow failure
        if: ${{ failure() && steps.run-sensorconnect-test.outcome == 'failure'  }}
        run: |
          mkdir -p ./run-sensorconnect-test-step
          cd ./run-sensorconnect-test-step
          kubectl logs job/sensorconnect-flow-test -n ${{ env.UMH }} > job-sensorconnect-flow-test.log || true
          kubectl logs deployment/sensorconnect-mock-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-sensorconnect-mock.log || true
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Upload failed test logs
        id: upload-failed-test-logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: data-flow-test-logs
          path: |
            ./install-umh-step
            ./run-data-flow-test-step
            ./run-sensorconnect-test-step
          if-no-files-found: ignore
          retention-days: 5
      - name: Delete k3d cluster
        id: delete-k3d
        if: always()
        run: |
          k3d cluster delete umh-full

  upgrade-test:
    name: Upgrade Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare k3d cluster
        id: prepare-k3d
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "umh-full"
          k3d-version: ${{ env.K3D_VERSION }}
          args: --agents 1 --image rancher/k3s:${{ env.K3S_VERSION }} --volume '/tmp:/tmp'
      - name: Download IODD Context
        id: download-iodd-context
        run: |
          curl -sSl --request GET --url "https://ioddfinder.io-link.com/api/drivers?page=0&size=2000&status=APPROVED&status=UPLOADED&deviceIdString=278531" --output "context.json"
          mkdir -p /tmp/test-ioddfiles
      - name: Extract IODD Context Content
        id: extract-iodd-context
        run: |
          jq -c '.content[] | select(.ioddId == 515)' context.json > /tmp/test-ioddfiles/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1-context.json
      - name: Download IODD File
        id: download-iodd-file
        run: |
          curl -sSL --request GET --url "https://ioddfinder.io-link.com/api/vendors/42/iodds/515/files/zip/rated" --output "/tmp/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.zip"
      - name: Extract IODD File
        id: extract-iodd-file
        run: |
          unzip -q /tmp/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.zip -d /tmp
      - name: Move IODD File
        id: move-iodd-file
        run: |
          mv /tmp/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.xml /tmp/test-ioddfiles/Siemens-SIRIUS-3SU1-4DI4DQ-20160602-IODD1.1.xml
      - name: Install UMH latest
        id: install-umh-latest
        run: |
          helm repo add united-manufacturing-hub https://repo.umh.app/
          helm repo update
          helm install ${{ env.UMH }} ${{ env.CHART_DIR }} \
            --values ${{ env.VALUES_FILE }} \
            --namespace ${{ env.UMH }} \
            --create-namespace \
            --wait --timeout ${{ env.HELM_TIMEOUT }} \
            --debug
      - name: Debug Install UMH failure
        id: debug-install-umh-failure
        if: ${{ failure() && steps.install-umh-latest.outcome == 'failure' }}
        run: |
          mkdir -p ./install-umh-latest-step
          cd ./install-umh-latest-step
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          helm status ${{ env.UMH }} -n ${{ env.UMH }} > helm-status.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Upgrade UMH
        id: upgrade-umh
        run: |
          kubectl delete deployment ${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} || true
          kubectl delete deployment ${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} || true
          kubectl delete deployment ${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} || true
          kubectl delete deployment ${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} || true
          kubectl delete statefulset ${{ env.UMH }}-nodered -n ${{ env.UMH }} || true
          helm upgrade ${{ env.UMH }} ${{ env.CHART_DIR }} \
            --values ${{ env.VALUES_FILE }} \
            --set "kafkastatedetector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttbridge.tag=${GITHUB_HEAD_REF##*/}" \
            --set "barcodereader.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "sensorconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "cameraconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinsight.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinput.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "grafanaproxy.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "tulipconnector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatoblob.image.tag=${GITHUB_HEAD_REF##*/}" \
            --namespace ${{ env.UMH }} \
            --wait --timeout ${{ env.HELM_TIMEOUT }} \
            --debug
          kubectl get po,svc -n ${{ env.UMH }}
      - name: Debug Upgrade UMH failure
        id: debug-upgrade-umh-failure
        if: ${{ failure() && steps.upgrade-umh.outcome == 'failure' }}
        run: |
          mkdir -p ./upgrade-umh-step
          cd ./upgrade-umh-step
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          helm status ${{ env.UMH }} -n ${{ env.UMH }} > helm-status.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Run Data Flow Test Job
        id: run-data-flow-test
        run: |
          kubectl apply -f ./test/data-flow-test/data-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/data-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Data Flow Test Job succeeded"
          kubectl logs job/data-flow-test -n ${{ env.UMH }} || true
      - name: Debug Data Flow failure
        id: debug-data-flow-failure
        if: ${{ failure() && steps.run-data-flow-test.outcome == 'failure' }}
        run: |
          mkdir -p ./run-data-flow-test-step
          cd ./run-data-flow-test-step
          kubectl logs job/data-flow-test -n ${{ env.UMH }} > jobs-data-flow-test.log || true
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Run Data Flow Test Job
        id: run-data-flow-test
        run: |
          kubectl apply -f ./test/data-flow-test/data-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/data-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Data Flow Test Job succeeded"
          kubectl logs job/data-flow-test -n ${{ env.UMH }} || true
      - name: Debug Data Flow failure
        id: debug-data-flow-failure
        if: ${{ failure() && steps.run-data-flow-test.outcome == 'failure'  }}
        run: |
          mkdir -p ./run-data-flow-test-step
          cd ./run-data-flow-test-step
          kubectl logs job/data-flow-test -n ${{ env.UMH }} > job-data-flow-test.log || true
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Run Sensorconnect test
        id: run-sensorconnect-test
        run: |
          sleep 120
          kubectl apply -f ./test/sensorconnect-mock/sensorconnect-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/sensorconnect-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Sensorconnect Flow Test Job succeeded"
          kubectl logs job/sensorconnect-flow-test -n ${{ env.UMH }} || true
      - name: Debug Sensorconnect Flow failure
        if: ${{ failure() && steps.run-sensorconnect-test.outcome == 'failure'  }}
        run: |
          mkdir -p ./run-sensorconnect-test-step
          cd ./run-sensorconnect-test-step
          kubectl logs job/sensorconnect-flow-test -n ${{ env.UMH }} > job-sensorconnect-flow-test.log || true
          kubectl logs deployment/sensorconnect-mock-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-sensorconnect-mock.log || true
          kubectl logs deployment/${{ env.UMH }}-opcuasimulator-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-opcuasimulator.log || true
          kubectl logs deployment/${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} --all-containers --prefix > deployment-factoryinsight.log || true
          kubectl logs deployment/${{ env.UMH }}-grafanaproxy -n ${{ env.UMH }} --all-containers --prefix > deployment-grafanaproxy.log || true
          kubectl logs deployment/${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} --all-containers --prefix > deployment-iotsensormqtt.log || true
          kubectl logs deployment/${{ env.UMH }}-grafana -n ${{ env.UMH }} --all-containers --prefix > deployment-grafana.log || true
          kubectl logs deployment/${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} --all-containers --prefix > deployment-kafkatopostgresql.log || true
          kubectl logs deployment/${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} --all-containers --prefix > deployment-mqttkafkabridge.log || true
          kubectl logs deployment/${{ env.UMH }}-console -n ${{ env.UMH }} --all-containers --prefix > deployment-console.log || true
          kubectl logs deployment/${{ env.UMH }}-packmlmqttsimulator -n ${{ env.UMH }} --all-containers --prefix > deployment-packmlmqttsimulator.log || true
          kubectl logs statefulset/${{ env.UMH }}-factoryinput -n ${{ env.UMH }} --all-containers --prefix > statefulset-factoryinput.log || true
          kubectl logs statefulset/${{ env.UMH }}-hivemqce -n ${{ env.UMH }} --all-containers --prefix > statefulset-hivemqce.log || true
          kubectl logs statefulset/${{ env.UMH }}-kafka -n ${{ env.UMH }} --all-containers --prefix > statefulset-kafka.log || true
          kubectl logs statefulset/${{ env.UMH }}-nodered -n ${{ env.UMH }} --all-containers --prefix > statefulset-nodered.log || true
          kubectl logs statefulset/${{ env.UMH }}-redis-node -n ${{ env.UMH }} --all-containers --prefix > statefulset-redis-node.log || true
          kubectl logs statefulset/${{ env.UMH }}-sensorconnect -n ${{ env.UMH }} --all-containers --prefix > statefulset-sensorconnect.log || true
          kubectl logs statefulset/${{ env.UMH }}-timescaledb -n ${{ env.UMH }} --all-containers --prefix > statefulset-timescaledb.log || true
          kubectl logs statefulset/${{ env.UMH }}-zookeeper -n ${{ env.UMH }} --all-containers --prefix > statefulset-zookeeper.log || true
          kubectl get po,svc -n ${{ env.UMH }} > po-svc.log || true
          kubectl describe po -n ${{ env.UMH }} > po-describe.log || true
          kubectl describe svc -n ${{ env.UMH }} > svc-describe.log || true
          kubectl get events -n ${{ env.UMH }} > events.log || true
          cd ..
      - name: Upload failed test logs
        id: upload-failed-test-logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: upgrade-test-logs
          path: |
            ./install-umh-latest-step
            ./upgrade-umh-step
            ./run-data-flow-test-step
          if-no-files-found: ignore
          retention-days: 5
      - name: Delete k3d cluster
        id: delete-k3d
        if: always()
        run: |
          k3d cluster delete umh-full
