---
{{if or .Values.factoryinput.enabled .Values._000_commonConfig.datainput.enabled}}

apiVersion: v1
kind: Secret
metadata:
  name: factoryinput-secret
  labels:
    {{- include "united-manufacturing-hub.labels.factoryinput" . | nindent 4}}
type: Opaque


# 1. Query your secret for "existance" and return in the $secret variable
{{- $secret := (lookup "v1" "Secret" .Release.Namespace "factoryinput-secret") -}}
{{- $password := uuidv4 -}}

# 2. If the secret exists, write it back out (it'll be Base64 encoded so used the "data" key)
{{if $secret -}}
data:
  baseURL: {{$secret.data.baseURL}}
  customerID: {{$secret.data.customerID}}
  apiKey: {{$secret.data.apiKey}}
  password: {{$secret.data.password}}

# 3. If it doesn't exist ... create it (this time as "stringData" as it will be a raw value) !
{{else -}}
stringData:
  baseURL: 'http://{{include "united-manufacturing-hub.fullname" .}}-factoryinput-service'
  customerID: '{{.Values.factoryinput.user}}'
  apiKey: 'Basic {{(printf "%s:%s" .Values.factoryinput.user $password )|b64enc}}'
  password: {{$password | quote}}
{{end}}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{include "united-manufacturing-hub.fullname" . }}-factoryinput-mqtt-secrets
  labels:
    {{- include "united-manufacturing-hub.labels.factoryinput" . | nindent 4}}
type: Opaque
data:
  ca.crt: |
    {{.Values._000_commonConfig.infrastructure.mqtt.tls.caCert | nindent 4}}
  tls.crt: |
    {{.Values._000_commonConfig.infrastructure.mqtt.tls.factoryinput.cert | nindent 4}}
  tls.key: |
    {{.Values._000_commonConfig.infrastructure.mqtt.tls.factoryinput.key | nindent 4}}

{{end}}
