# TODO: #11 Add all other APIs as well.
# TODO make inline schemas into proper models
openapi: '3.0.2'
info:
  title: factoryinsight
  version: '1.0'
  description: >
    this api is designed to be used with grafana

servers:
  - url: https://api.industrial-analytics.net/api/v1

components:
  
  parameters:

      customer:
        in: path
        name: customer
        schema:
          type: string
        required: true
        description: name of the customer
        example:
          DCCAachen

      location:
        in: path
        name: location
        schema:
          type: string
        required: true
        description: name of the location
        example:
          AachenPlant
      
      asset:
        in: path
        name: asset
        schema:
          type: string
        required: true
        description: name of the asset
        example:
          WeavingMachine
      
      from:
        in: query
        name: from
        schema:
          type: string
          format: date
        required: true
        description: Get data from this timestamp on (in RFC3339 format)
        example:
          "2020-11-10T00:00:00.000Z"

      to:
        in: query
        name: to
        schema:
          type: string
          format: date
        required: true
        description: Get data till this timestamp (in RFC3339 format)
        example:
          "2020-11-10T00:00:00.000Z"

      keepStatesInteger:
        in: query
        name: keepStatesInteger
        required: false
        schema:
          type: boolean
          default:
            false
        description: If set to true all returned states will be numbers at not strings
        example:
          true

      aggregationType:
        in: query
        name: aggregationType
        required: true
        schema:
          type: integer
        description: With this parameter you can specify how the data should be aggregated. 0 means aggregating it over the entire time range. 1 means aggregating it by hours in a day.
        example:
          1

      includeRunning:
        in: query
        name: includeRunning
        required: true
        schema:
          type: boolean
        description: If set to true the returned data will include running states as well. This makes sense for a pie chart showing the machine states, but for a pareto bar chart you would set this to false.
        example:
          true

      processValue:
        in: query
        name: processValue
        required: true
        schema:
          type: string
        description: name of the process value to retrieve data
        example:
          energyConsumption

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas: # todo move inline data objects to schemas
    blank:
      properties:
        none:
          type: string

paths:
  /{customer}:
    get:
      operationId: get_customer_locations
      parameters:
        - $ref: '#/components/parameters/customer'
      responses:
        '200':
          description: available locations for that customer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - AachenPlant
                  - DuesseldorfPlant
                  
  /{customer}/{location}:
    get:
      operationId: get_location_assets
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        
      responses:
        '200':
          description: available assets for that customer and location
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - Warping
                  - Weaving

  /{customer}/{location}/{asset}:
    get:
      operationId: get_asset_datapoints
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: available datapoints for that customer, location and asset
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - state
                  - count
                  - currentState
                  - recommendation
                  - aggregatedStates
                  - timeRange
                  - availability
                  - performance
                  - oee
                  - productionSpeed
                  - shifts
                  - stateHistogram
                  - factoryLocations
                  - averageCleaningTime
                  - averageChangeoverTime
                  - upcomingMaintenanceActivities
                  - maintenanceComponents
                  - maintenanceActivities
                  - uniqueProducts
                  - orderTable
                  - orderTimeline
                  - process_SignalLamp
                  - process_TotalActivePower
                  - process_TotalApparentPower

  /{customer}/{location}/{asset}/state:
    get:
      operationId: get_asset_states
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/keepStatesInteger'
      responses:
        '200':
          description: This returns all states in the selected time range in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-AachenPlant-WeavingMachine-state
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf:
                          - type: string
                          - type: integer
                          - type: number
                    example:
                      -
                        -   "No shift"
                        -   1605187036148
                      -
                        - "Producing"
                        - 1605201132835
                    description: the returned data

  /{customer}/{location}/{asset}/count:
    get:
      operationId: get_asset_counts
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the produced pieces in the selected time range in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-AachenPlant-WeavingMachine-count
                      - DCCAachen-AachenPlant-WeavingMachine-scrap
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf:
                          - type: number
                          - type: integer


                    description: the returned data
                    example:
                      - 
                        - 1250
                        - 0
                        - 1605201148990
                      - 
                        - 625
                        - 0
                        - 1605201408149


  /{customer}/{location}/{asset}/currentState:
    get:
      operationId: get_current_asset_state
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the current asset state in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-AachenPlant-WeavingMachine-state
                      - timestamp
                  datapoints:
                    type: array
                    maxLength: 1 # todo change to dict
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "Unbekannter Zustand 1"
                        - 1608298176825
  
  /{customer}/{location}/{asset}/recommendation:
    get:
      operationId: get_current_asset_recommendation
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the current recommendations for the asset in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - timestamp
                      - recommendationType
                      - recommendationValues
                      - recommendationTextEN
                      - recommendationTextDE
                      - diagnoseTextEN
                      - diagnoseTextDE
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                          - type: object # this will make problems with certain generators
                    description: the returned data
                    example:
                      - 
                        - 1600707538210
                        - 1
                        - {"Threshold":30,"StoppedForTime":612685}
                        - "Start machine DCCAachen-Demonstrator or specify stop reason."
                        - "Maschine DCCAachen-Demonstrator einschalten oder Stoppgrund auswählen."
                        - "Machine DCCAachen-Demonstrator is not running since 612685 seconds (status: 8, threshold: 30)"
                        - "Maschine DCCAachen-Demonstrator steht seit 612685 Sekunden still (Status: 8, Schwellwert: 30)"
  
  /{customer}/{location}/{asset}/timeRange:
    get:
      operationId: get_asset_data_timerange
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the first and last timepoint in the database in a data format that can be consumed easily by Grafana. This can be used to determine from and to parameters when you want to show all data
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames: # change to dictionary
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - firstTimestamp
                      - lastTimestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                            format: date-time
                    description: the returned data
                    example:
                      - 
                        - "2020-11-03T12:27:22Z"
                        - "2021-02-01T18:51:50Z"

  /{customer}/{location}/{asset}/aggregatedStates:
    get:
      operationId: get_asset_aggregatedStates
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/includeRunning'
        - $ref: '#/components/parameters/keepStatesInteger'
        - $ref: '#/components/parameters/aggregationType'
      responses:
        '200':
          description: This sums up the duration of all states in the selected time range in a data format that can be consumed easily by Grafana. 
            With aggregationType additional aggregations can be selected, e.g. grouping it additionally by the hour of the day.
            If aggregationType = 0, then the category column is omitted. 
            There is still a bug, that keepStatesInteger is not properly working in some cases #84
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example: #convert following entry into list of dicts with named keys
                        - 
                          - "category"
                          - "state"
                          - "duration"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data. duration is the amount of seconds.
                    example:
                        - 
                          - 9
                          - 150000
                          - 3638.4260000000004
                        - 
                          - 9
                          - 160000
                          - 2001.471
                        -
                          - 10
                          - 150000
                          - 6185.870000000001

  /{customer}/{location}/{asset}/availability:
    get:
      operationId: get_asset_availability
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the availability in the selected time range in a data format that can be consumed easily by Grafana. 
            The way how availability is defined can be configured in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-availability
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: integer
                          - type: number
                    description: the returned data
                    maxLength: 1
                    minimum: 0
                    maximum: 1
                    example:
                      - 
                        - 0.039953472102622754

  /{customer}/{location}/{asset}/performance:
    get:
      operationId: get_asset_performance
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the performance in the selected time range in a data format that can be consumed easily by Grafana. 
            The way how performance is defined can be configured in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-performance
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                            # todo fix this data model, only doing triage to create a generatable client
                        type: number
                    description: the returned data
                    maxLength: 1
                    minimum: 0
                    maximum: 1
                    example:
                      - 
                        - 0.039953472102622754

  /{customer}/{location}/{asset}/quality:
    get:
      operationId: get_asset_quality
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the quality in the selected time range in a data format that can be consumed easily by Grafana. 
            Quality is defined by goodProducts / totalProducts
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-quality
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        type: number
                         # todo fix this data model, only doing triage to create a generatable client
                    description: the returned data
                    maxLength: 1
                    minimum: 0
                    maximum: 1
                    example:
                      - 
                        - 0.80

  /{customer}/{location}/{asset}/oee:
    get:
      operationId: get_asset_oee
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the OEE in the selected time range in a data format that can be consumed easily by Grafana. 
            The result is then split up for each day.
            The way how OEE is defined can be configured in the database.
            There is an open issue here #85
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-oee
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                            format: date-time
                          - type: number
                    description: the returned data
                    minimum: 0
                    maximum: 1
                    example:
                      -
                        - 0.1779839097022094,
                        - "2020-11-02T17:07:22Z"
                      -
                        - 0.018431700156319477,
                        - "2020-11-03T17:07:22Z"
                      -
                        - 0.036663254805344575,
                        - "2020-11-12T17:07:22Z"

  /{customer}/{location}/{asset}/shifts:
    get:
      operationId: get_asset_shifts
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns all shifts in the selected time range in a data format that can be consumed easily by Grafana. 
            The timestamp is returned as UNIX timestamp in milliseconds.
            shiftName = 0 means noShift, shiftName = 1 means shift.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - timestamp
                      - DCCAachen-Aachen-warping-shiftName
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                       type: integer # todo fix this data model, only doing triage to create a generatable client
                    description: the returned data
                    example:
                      - 
                        - 1608019200032
                        - 1 
                      - 
                        - 1608030000032
                        - 0
                      - 
                        - 1608033600016
                        - 1 

  /{customer}/{location}/{asset}/productionSpeed:
    get:
      operationId: get_asset_production_speed
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the production speed in the selected time range in a data format that can be consumed easily by Grafana. 
            The production speed is in units/hour.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-speed
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        type: number
                    description: the returned data
                    example:
                      - 
                        - 13560
                        - 1604077800000 
                      - 
                        - 1260
                        - 1604077860000
                      - 
                        - 36360
                        - 1604077920000   

  /{customer}/{location}/{asset}/qualityRate:
    get:
      operationId: get_asset_quality_rate
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the quality rate in the selected time range in a data format that can be consumed easily by Grafana. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-qualityRate
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: #todo only doing triage
                          - type: number
                          - type: integer
                    description: the returned data
                    example:
                      - 
                        - 0.80
                        - 1604077800000 
                      - 
                        - 0.85
                        - 1604077860000
                      - 
                        - 0.82
                        - 1604077920000   

  /{customer}/{location}/{asset}/stateHistogram:
    get:
      operationId: get_asset_state_histogram
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/includeRunning'
        - $ref: '#/components/parameters/keepStatesInteger'
      responses:
        '200':
          description: This returns the frequency of each state in the selected time range in a data format that can be consumed easily by Grafana. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - state
                      - occurances
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "Maschine läuft"
                        - 147
                      - 
                        - "Unbekannter Stopp"
                        - 6
                      - 
                        - "Mikrostopp"
                        - 1  

  /{customer}/{location}/{asset}/factoryLocations:
    get:
      operationId: get_asset_factory_location
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns all locations including a metric and geohash in the selected time range in a data format that can be consumed easily by Grafana. 
            **Work in progress, currently only returning dummy data!**
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - Location
                      - Metric
                      - Geohash
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "Aachen"
                        - 80
                        - u1h2fe
  
  /{customer}/{location}/{asset}/averageCleaningTime:
    get:
      operationId: get_asset_average_cleaning_time
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the average cleaning time in the selected time range in a data format that can be consumed easily by Grafana. 
            **Currently not working! See issue 93**
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - "DCCAachen-Aachen-warping-averageCleaningTime"
                      - "timestamp"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - 1556,
                        - "2020-11-02T17:07:22Z"
                      - 
                        - 1526,
                        - "2020-11-03T17:07:22Z"
                      - 
                        - 756,
                        - "2020-11-12T17:07:22Z"                 
  
  /{customer}/{location}/{asset}/averageChangeoverTime:
    get:
      operationId: get_asset_average_changeover_time
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the average changeover time in the selected time range in a data format that can be consumed easily by Grafana. 
            **Currently not working! See issue 93**
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - "DCCAachen-Aachen-warping-averageChangeoverTime"
                      - "timestamp"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                            format: date-time
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - 1556,
                        - "2020-11-02T17:07:22Z"
                      - 
                        - 1526,
                        - "2020-11-03T17:07:22Z"
                      - 
                        - 756,
                        - "2020-11-12T17:07:22Z"           
                        
  /{customer}/{location}/{asset}/upcomingMaintenanceActivities:
    get:
      operationId: get_asset_umpcoming_maintenance_activities
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the upcoming maintenance activities in the selected time range in a data format that can be consumed easily by Grafana. 
            The duration is in days. Negative values mean the maintenance activity is overdue.
            Status = 0 means the component is "critical".
            Status = 1 means the component is "orange" (under a third of the total runtime is remaining). 
            Status = 2 means the component is "green" (over a third of the total runtime is remaining).
            Activity is here as a string.
            **Work in progress**
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - Machine
                      - Component
                      - Activity
                      - Duration
                      - Status
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "bernd2"
                        - "Pumpe 21"
                        - "Austausch"
                        - -69.5
                        - 0    
                      - 
                        - "bernd2"
                        - "Pumpe 20"
                        - "Austausch"
                        - -79.08
                        - 0  
                      - 
                        - "bernd2"
                        - "Pumpe 20"
                        - "Inspektion"
                        - -61.06
                        - 0     
                        
  /{customer}/{location}/{asset}/maintenanceComponents:

    get:
      operationId: get_asset_maintenance_components
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns all existing maintenance components for that asset.
            **This is not parsable by Grafana, therefore maintenanceComponents is not shown in the drop down menu.**
            **Work in progress**
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: the column names
                example:
                  - Pumpe 20
                  - Pumpe 21
  
  /{customer}/{location}/{asset}/maintenanceActivities:
    get:
      operationId: get_asset_maintenance_activities
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This shows all past maintenance activities in a data format that can be consumed easily by Grafana. 
            Activity is here an integer symbolizing a string. 
            The timestamp is a UNIX timestamp in milliseconds
            **Work in progress**
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - Component
                      - Activity
                      - Timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "Pumpe 20"
                        - 0
                        - 1605178879502
                      - 
                        - "Pumpe 21"
                        - 1
                        - 1605189835901                      
  
  /{customer}/{location}/{asset}/uniqueProducts:
    get:
      operationId: get_asset_unique_products
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the all unique products in the selected time range in a data format that can be consumed easily by Grafana. 
            The data model behind unique products is explained at mqtt.md
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - "UID"
                      - "Timestamp begin"
                      - "Timestamp end"
                      - "Product ID"
                      - "Is Scrap"
                      - "Quality class"
                      - "Station ID"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "161063193099727336211610631932133"
                        - 1610631930997
                        - 1610631932133
                        - "test123"
                        - false
                        - ""
                        - "1a"   
                      - 
                        - "16106319890449364101610631989682"
                        - 1610631989044
                        - 1610631989682
                        - "test123"
                        - false
                        - ""
                        - "1a"              

  /{customer}/{location}/{asset}/orderTable:
    get:
      operationId: get_asset_order_table
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns all orders with additional information in the selected time range in a data format that can be consumed easily by Grafana. 
            The backend calculates automatically for each order how many pieces were actually produced, 
            what the difference between target and actual duration is and 
            how long the machine has actually been running, 
            how long the total changeover time was, etc.
            All durations are in seconds.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - "Order ID"
                      - "Product ID"
                      - "Begin"
                      - "End"
                      - "Target units"
                      - "Actual units"
                      - "Target duration in seconds"
                      - "Actual duration in seconds"
                      - "Target time per unit in seconds"
                      - "Actual time per unit in seconds"
                      - "Producing"
                      - "Producing at lower than set speed"
                      - "No data"
                      - "Unknown stop"
                      - "Microstop"
                      - "Inlet jam"
                      - "Outlet jam"
                      - "Congestion in the bypass flow"
                      - "Other material issues"
                      - "Changeover"
                      - "Cleaning"
                      - "Emptying"
                      - "Setting up"
                      - "Operator missing"
                      - "Break"
                      - "No shift"
                      - "No order"
                      - "Equipment failure"
                      - "External failure"
                      - "External interference"
                      - "Maintenance"
                      - "Other technical issue"
                      - "Asset"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - "10463444"
                        - "product10463444"
                        - 1595824438000
                        - 1595825648000
                        - 1
                        - 0
                        - 0
                        - 1210
                        - 827
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - 0
                        - "redacted-redacted"                          

  /{customer}/{location}/{asset}/orderTimeline:
    get:
      operationId: get_asset_order_timeline
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns all orders in the selected time range for the discrete panel in Grafana.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - "timestamp"
                      - "redacted-redacted-redacted-order"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: string
                          - type: integer
                    description: the returned data
                    example:
                      - 
                        - 1592500042000
                        - "noOrder"
                      - 
                        - 1595824438000
                        - "104638"
                      - 
                        - 1595825648000
                        - "noOrder"

  /{customer}/{location}/{asset}/process_{processValue}:
    get:
      operationId: get_asset_process_value
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/processValue'
      responses:
        '200':
          description: This returns the selected process value in the selected time range in a data format that can be consumed easily by Grafana. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - "timestamp"
                      - "DCCAachen-Aachen-warping-Fadenueber_link_aktiv"
                  datapoints:
                    type: array
                    items:
                      type: array
                      items:
                        anyOf: # todo fix this data model, only doing triage to create a generatable client
                          - type: integer
                          - type: number
                    description: the returned data
                    example:
                      - 
                        - 1606236115808
                        - 1
                      - 
                        - 1606236192305
                        - 0
                      - 
                        - 1606236217103
                        - 0                      

security:
  - BasicAuth: []