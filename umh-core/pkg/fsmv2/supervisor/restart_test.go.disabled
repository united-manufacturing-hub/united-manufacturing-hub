// Copyright 2025 UMH Systems GmbH
package supervisor_test

import (
	"context"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/united-manufacturing-hub/united-manufacturing-hub/umh-core/pkg/fsmv2"
	"github.com/united-manufacturing-hub/united-manufacturing-hub/umh-core/pkg/fsmv2/container"
	"github.com/united-manufacturing-hub/united-manufacturing-hub/umh-core/pkg/fsmv2/supervisor"
)

var _ = Describe("Collector Restart Logic", func() {
	Context("when restart is successful", func() {
		It("should increment restart count", func() {
			store := &mockStore{}
			s := newSupervisorWithWorker(&mockWorker{}, store, supervisor.CollectorHealthConfig{
				MaxRestartAttempts: 3,
			})

			err := s.RestartCollector(context.Background(), "test-worker")
			Expect(err).ToNot(HaveOccurred())
			Expect(s.GetRestartCount()).To(Equal(1))
		})
	})

	Context("when max restart attempts exceeded", func() {
		It("should panic", func() {
			store := &mockStore{}
			s := newSupervisorWithWorker(&mockWorker{}, store, supervisor.CollectorHealthConfig{
				MaxRestartAttempts: 3,
			})

			s.SetRestartCount(3)

			Expect(func() {
				_ = s.RestartCollector(context.Background(), "test-worker")
			}).To(Panic())
		})
	})

	Context("when collector recovers", func() {
		It("should reset restart counter", func() {
			store := &mockStore{
				loadSnapshot: func() (fsmv2.Snapshot, error) {
					identity := mockIdentity()

					desired := &container.ContainerDesiredState{}
					observed := &container.ContainerObservedState{
						CollectedAt: time.Now(),
					}

					return fsmv2.Snapshot{
						Identity: identity,
						Desired:  desired,
						Observed: observed,
					}, nil
				},
			}

			s := newSupervisorWithWorker(&mockWorker{}, store, supervisor.CollectorHealthConfig{
				StaleThreshold: 10 * time.Second,
			})

			s.SetRestartCount(2)
			Expect(s.GetRestartCount()).To(Equal(2))

			err := s.Tick(context.Background())
			Expect(err).ToNot(HaveOccurred())
			Expect(s.GetRestartCount()).To(Equal(0))
		})
	})
})
