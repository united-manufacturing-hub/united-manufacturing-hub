# TODO: Add all other APIs as well.

openapi: '3.0.2'
info:
  title: factoryinsight
  version: '1.0'
servers:
  - url: https://api.industrial-analytics.net/api/v1

components:
  
  parameters:

      customer:
        in: path
        name: customer
        schema:
          type: string
        required: true
        description: name of the customer
        example:
          DCCAachen

      location:
        in: path
        name: location
        schema:
          type: string
        required: true
        description: name of the location
        example:
          AachenPlant
      
      asset:
        in: path
        name: asset
        schema:
          type: string
        required: true
        description: name of the asset
        example:
          WeavingMachine
      
      from:
        in: query
        name: from
        schema:
          type: string
        required: true
        description: Get data from this timestamp on (in RFC3339 format)
        example:
          2020-11-10T00:00:00.000Z

      to:
        in: query
        name: to
        schema:
          type: string
        required: true
        description: Get data till this timestamp (in RFC3339 format)
        example:
          2020-11-10T00:00:00.000Z

      keepStatesInteger:
        in: query
        name: keepStatesInteger
        required: false
        schema:
          type: boolean
          default:
            false
        description: If set to true all returned states will be numbers at not strings
        example:
          true

      aggregationType:
        in: query
        name: aggregationType
        required: true
        schema:
          type: integer
        description: With this parameter you can specify how the data should be aggregated. 0 means aggregating it over the entire time range. 1 means aggregating it by hours in a day.
        example:
          1

      includeRunning:
        in: query
        name: includeRunning
        required: true
        schema:
          type: boolean
        description: If set to true the returned data will include running states as well. This makes sense for a pie chart showing the machine states, but for a pareto bar chart you would set this to false.
        example:
          true

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

paths:
  /{customer}:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
      responses:
        '200':
          description: available locations for that customer
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - AachenPlant
                  - DuesseldorfPlant
                  
  /{customer}/{location}:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        
      responses:
        '200':
          description: available assets for that customer and location
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - Warping
                  - Weaving

  /{customer}/{location}/{asset}:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: available datapoints for that customer, location and asset
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - state
                  - count
                  - currentState
                  - recommendation
                  - aggregatedStates
                  - timeRange
                  - availability
                  - performance
                  - oee
                  - productionSpeed
                  - shifts
                  - stateHistogram
                  - factoryLocations
                  - averageCleaningTime
                  - averageChangeoverTime
                  - upcomingMaintenanceActivities
                  - maintenanceComponents
                  - maintenanceActivities
                  - uniqueProducts
                  - orderTable
                  - orderTimeline
                  - process_SignalLamp
                  - process_TotalActivePower
                  - process_TotalApparentPower

  /{customer}/{location}/{asset}/state:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/keepStatesInteger'
      responses:
        '200':
          description: This returns all states in the selected time range in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-AachenPlant-WeavingMachine-state
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    example:
                      - 
                        - "No shift"
                        - 1605187036148
                      - 
                        - "Producing"
                        - 1605201132835

  /{customer}/{location}/{asset}/count:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the produced pieces in the selected time range in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-AachenPlant-WeavingMachine-count
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    example:
                      - 
                        - 1250
                        - 1605201148990
                      - 
                        - 625
                        - 1605201408149


  /{customer}/{location}/{asset}/currentState:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the current asset state in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-AachenPlant-WeavingMachine-state
                      - timestamp
                  datapoints:
                    type: array
                    maxLength: 1
                    items:
                      type: array
                    description: the returned data
                    example:
                      - 
                        - "Unbekannter Zustand 1"
                        - 1608298176825
  
  /{customer}/{location}/{asset}/recommendation:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the current recommendations for the asset in a data format that can be consumed easily by Grafana
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - timestamp
                      - recommendationType
                      - recommendationValues
                      - recommendationTextEN
                      - recommendationTextDE
                      - diagnoseTextEN
                      - diagnoseTextDE
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    example:
                      - 
                        - 1600707538210
                        - 1
                        - {"Threshold":30,"StoppedForTime":612685}
                        - "Start machine DCCAachen-Demonstrator or specify stop reason."
                        - "Maschine DCCAachen-Demonstrator einschalten oder Stoppgrund auswählen."
                        - "Machine DCCAachen-Demonstrator is not running since 612685 seconds (status: 8, threshold: 30)"
                        - "Maschine DCCAachen-Demonstrator steht seit 612685 Sekunden still (Status: 8, Schwellwert: 30)"
  
  /{customer}/{location}/{asset}/timeRange:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
      responses:
        '200':
          description: This returns the first and last timepoint in the database in a data format that can be consumed easily by Grafana. This can be used to determine from and to parameters when you want to show all data
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - firstTimestamp
                      - lastTimestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    example:
                      - 
                        - "2020-11-03T12:27:22Z"
                        - "2021-02-01T18:51:50Z"

  /{customer}/{location}/{asset}/aggregatedStates:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/includeRunning'
        - $ref: '#/components/parameters/keepStatesInteger'
        - $ref: '#/components/parameters/aggregationType'
      responses:
        '200':
          description: This sums up the duration of all states in the selected time range in a data format that can be consumed easily by Grafana. 
            With aggregationType additional aggregations can be selected, e.g. grouping it additionally by the hour of the day.
            If aggregationType = 0, then the category column is omitted. 
            There is still a bug, that keepStatesInteger is not properly working in some cases #84
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                        - 
                          - "category"
                          - "state"
                          - "duration"
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data. duration is the amount of seconds.
                    example:
                        - 
                          - 9
                          - 150000
                          - 3638.4260000000004
                        - 
                          - 9
                          - 160000
                          - 2001.471
                        -
                          - 10
                          - 150000
                          - 6185.870000000001

  /{customer}/{location}/{asset}/availability:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the availability in the selected time range in a data format that can be consumed easily by Grafana. 
            The way how availability is defined can be configured in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-availability
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    maxLength: 1
                    minimum: 0
                    maximum: 1
                    example:
                      - 
                        - 0.039953472102622754

  /{customer}/{location}/{asset}/performance:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the performance in the selected time range in a data format that can be consumed easily by Grafana. 
            The way how performance is defined can be configured in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-performance
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    maxLength: 1
                    minimum: 0
                    maximum: 1
                    example:
                      - 
                        - 0.039953472102622754

  /{customer}/{location}/{asset}/oee:
    get:
      parameters:
        - $ref: '#/components/parameters/customer'
        - $ref: '#/components/parameters/location'
        - $ref: '#/components/parameters/asset'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      responses:
        '200':
          description: This returns the OEE in the selected time range in a data format that can be consumed easily by Grafana. 
            The result is then split up for each day.
            The way how OEE is defined can be configured in the database.
            There is an open issue here #85
          content:
            application/json:
              schema:
                type: object
                properties:
                  columnNames:
                    type: array
                    items:
                      type: string
                    description: the column names
                    example:
                      - DCCAachen-Aachen-warping-oee
                      - timestamp
                  datapoints:
                    type: array
                    items:
                      type: array
                    description: the returned data
                    maxLength: 1
                    minimum: 0
                    maximum: 1
                    example:
                      - 
                        - 0.1779839097022094,
                        - "2020-11-02T17:07:22Z"
                      - 
                        - 0.018431700156319477,
                        - "2020-11-03T17:07:22Z"
                      - 
                        - 0.036663254805344575,
                        - "2020-11-12T17:07:22Z"
                        
# "shifts",
# "productionSpeed",
# "stateHistogram",
# "factoryLocations",
# "averageCleaningTime",
# "averageChangeoverTime",
# "upcomingMaintenanceActivities",
# "maintenanceActivities",
# "uniqueProducts",
# "orderTable",
# "orderTimeline",
# "process_Fadenueber_link_aktiv",

security:
  - BasicAuth: []