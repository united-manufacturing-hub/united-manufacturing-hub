// Copyright 2025 UMH Systems GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package topicbrowser

import (
	"encoding/hex"
	"strconv"
	"strings"
	"time"

	"github.com/united-manufacturing-hub/united-manufacturing-hub/umh-core/pkg/constants"
	s6svc "github.com/united-manufacturing-hub/united-manufacturing-hub/umh-core/pkg/service/s6"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

// benthos log from samples for topic_browser plugin
const rawLog = `STARTSTARTSTART

ENDDATAENDDATAENDDATA
1751888949547
ENDENDENDEND`

// --------------------------------------------------------------------------

var _ = Describe("extractRaw / parseBlock", func() {
	var (
		compressed []byte // hex line from rawLog
		payload    []byte // expected decoded payload
		epochMS    int64  // timestamp parsed from rawLog
		rb         *Ringbuffer
		service    *Service
	)

	BeforeEach(func() {
		lines := strings.Split(rawLog, "\n")
		hexLine := strings.TrimSpace(lines[1])           // second line is the hex payload
		tsLine := strings.TrimSpace(lines[len(lines)-2]) // epoch
		var err error
		epochMS, err = strconv.ParseInt(tsLine, 10, 64)
		Expect(err).NotTo(HaveOccurred())

		// decode hex to get the expected payload
		payload, err = hex.DecodeString(hexLine)
		Expect(err).NotTo(HaveOccurred())

		compressed = []byte(hexLine)

		rb = NewRingbuffer(4)
		service = &Service{ringbuffer: rb}
	})

	Context("extraction and hex-decoding", func() {
		It("extracts, hex-decodes and stores the block", func() {
			logs := buildLogs(true, string(compressed), epochMS)

			Expect(service.parseBlock(logs)).To(Succeed())
			Expect(rb.Len()).To(Equal(1))

			got := rb.GetSnapshot().Items[0]
			Expect(got.Payload).To(Equal(payload))
			Expect(got.Timestamp).To(Equal(time.UnixMilli(epochMS)))
		})
	})

	Context("incomplete block", func() {
		It("returns without error and without writing", func() {
			logs := []s6svc.LogEntry{
				{Content: constants.BLOCK_START_MARKER},
				{Content: string(compressed)},
			}

			Expect(service.parseBlock(logs)).To(Succeed())
			Expect(rb.Len()).To(Equal(0))
		})
	})

	Context("missing timestamp line", func() {
		It("fails with a clear error", func() {
			logs := buildLogs(false, string(compressed), epochMS)

			err := service.parseBlock(logs)
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("timestamp line is missing"))
			Expect(rb.Len()).To(Equal(0))
		})
	})

	Context("corrupt hex data", func() {
		It("propagates the hex decode error", func() {
			logs := buildLogs(true, "not-hex-bytes", epochMS)

			err := service.parseBlock(logs)
			Expect(err).To(HaveOccurred())
			Expect(rb.Len()).To(Equal(0))
		})
	})

	Context("origin benthos block ", func() {
		It("processes the full benthos sample", func() {
			var logs []s6svc.LogEntry
			for _, l := range strings.Split(rawLog, "\n") {
				l = strings.TrimSpace(l)
				if l != "" {
					logs = append(logs, s6svc.LogEntry{Content: l})
				}
			}

			Expect(service.parseBlock(logs)).To(Succeed())
			Expect(rb.Len()).To(Equal(1))

			got := rb.GetSnapshot().Items[0]

			Expect(got.Timestamp).To(Equal(time.UnixMilli(epochMS)))
			Expect(got.Payload).To(Equal(payload))
			// check if e.g. the "umh_topic" exists in the payload
			Expect(string(got.Payload)).To(ContainSubstring("umh_topic"))
		})
	})

	Context("duplicate block processing prevention", func() {
		It("does not process the same block multiple times", func() {
			logs := buildLogs(true, string(compressed), epochMS)

			// First call should process the block
			Expect(service.parseBlock(logs)).To(Succeed())
			Expect(rb.Len()).To(Equal(1))

			// Second call with same logs should not add another block
			Expect(service.parseBlock(logs)).To(Succeed())
			Expect(rb.Len()).To(Equal(1)) // Still only 1 block

			// Third call should also not add another block
			Expect(service.parseBlock(logs)).To(Succeed())
			Expect(rb.Len()).To(Equal(1)) // Still only 1 block
		})

		It("processes new blocks when they appear", func() {
			logs1 := buildLogs(true, string(compressed), epochMS)
			logs2 := append(logs1, buildLogs(true, string(compressed), epochMS+1000)...)

			// Process first block
			Expect(service.parseBlock(logs1)).To(Succeed())
			Expect(rb.Len()).To(Equal(1))

			// Process with both blocks - should add the second block
			Expect(service.parseBlock(logs2)).To(Succeed())
			Expect(rb.Len()).To(Equal(2))
		})
	})
})

// buildLogs creates a synthetic Benthos log block for tests.  It wraps the
// supplied hex-encoded data line between BLOCK_START / DATA_END / BLOCK_END
// markers and, if includeTimestamp is true, inserts the given epochMS as the
// timestamp line.  The returned slice is ready to be fed into parseBlock.
func buildLogs(includeTimestamp bool, dataLine string, epochMS int64) []s6svc.LogEntry {
	logs := []s6svc.LogEntry{
		{Content: constants.BLOCK_START_MARKER},
		{Content: dataLine},
		{Content: constants.DATA_END_MARKER},
	}
	if includeTimestamp {
		logs = append(logs, s6svc.LogEntry{Content: strconv.FormatInt(epochMS, 10)})
	}
	logs = append(logs, s6svc.LogEntry{Content: constants.BLOCK_END_MARKER})
	return logs
}
