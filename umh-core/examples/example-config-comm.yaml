# Copyright 2025 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

agent:
  metricsPort: 8080
  communicator:
    apiUrl: https://management.umh.app/api
    # authToken is provided via AUTH_TOKEN environment variable
  releaseChannel: stable
  location:
      0: Example Location 0
      1: Example Location 1
      2: Example Location 2
      3: Example Location 3
      4: Example Location 4
      5: Example Location 5
      6: Example Location 6

dataFlow:
  - name: hello-world-dfc
    desiredState: active
    dataFlowComponentConfig:
      benthos:
        input:
          generate:
            mapping: root = "hello world from DFC!"
            interval: 1s # Output every 2 seconds
            count: 0 # Set to 0 for unlimited messages
        pipeline:
          processors:
            - bloblang: root = content()
        output:
            stdout: {}
  
  - name: vanakam-thamizha-dfc
    desiredState: active
    dataFlowComponentConfig:
      benthos:
        input:
          opcua:
            endpoint: opc.tcp://10.13.37.102:49320
            nodeIDs:
              - i=84
            password: ""
            subscribeEnabled: true
            useHeartbeat: true
            username: ""
        pipeline:
          processors:
            - tag_processor:
                defaults: |-
                  // Set default location hierarchy and datacontract
                  msg.meta.location_path = "enterprise.plant1.machiningArea.cnc-line.cnc5.plc123";
                  msg.meta.data_contract = "_historian";
                  msg.meta.virtual_path = msg.meta.opcua_tag_path;
                  msg.meta.tag_name = msg.meta.opcua_tag_name;
                  msg.payload = msg.payload;
                  return msg;
        output:
            stdout: {}
internal:
  redpanda:
    desiredState: active
