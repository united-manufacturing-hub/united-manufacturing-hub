# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build Docker Images

on:
  pull_request:
    paths:
      - 'go.work'
      - 'go.work.sum'
      - 'golang/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_paths:
    runs-on: ubuntu-latest
    outputs:
      barcodereader: ${{ steps.filter.outputs.barcodereader }}
      factoryinsight: ${{ steps.filter.outputs.factoryinsight }}
      grafana_umh: ${{ steps.filter.outputs.grafana_umh }}
      hivemq_init: ${{ steps.filter.outputs.hivemq_init }}
      kafka_bridge: ${{ steps.filter.outputs.kafka_bridge }}
      kafka_init: ${{ steps.filter.outputs.kafka_init }}
      kafka_to_postgresql: ${{ steps.filter.outputs.kafka_to_postgresql }}
      kafka_to_postgresql_v2: ${{ steps.filter.outputs.kafka_to_postgresql_v2 }}
      metrics: ${{ steps.filter.outputs.metrics }}
      mqtt_kafka_bridge: ${{ steps.filter.outputs.mqtt_kafka_bridge }}
      sensorconnect: ${{ steps.filter.outputs.sensorconnect }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout actual branch (and not the refs/pull/<pr>/merge) to get the correct diff
        run: |
          git checkout ${{ github.head_ref }}
      - id: filter
        run: |
          echo "barcodereader=false" >> $GITHUB_OUTPUT
          echo "factoryinsight=false" >> $GITHUB_OUTPUT
          echo "grafana_umh=false" >> $GITHUB_OUTPUT
          echo "hivemq_init=false" >> $GITHUB_OUTPUT
          echo "kafka_bridge=false" >> $GITHUB_OUTPUT
          echo "kafka_init=false" >> $GITHUB_OUTPUT
          echo "kafka_to_postgresql=false" >> $GITHUB_OUTPUT
          echo "kafka_to_postgresql_v2=false" >> $GITHUB_OUTPUT
          echo "metrics=false" >> $GITHUB_OUTPUT
          echo "mqtt_kafka_bridge=false" >> $GITHUB_OUTPUT
          echo "sensorconnect=false" >> $GITHUB_OUTPUT
          
          currentSHA=$(git rev-parse HEAD)
          previousSHA=$(git rev-parse HEAD^)
          
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/barcodereader/)'; then
            echo "Building barcodereader"
            echo "barcodereader=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/factoryinsight/)'; then
            echo "Building factoryinsight"
            echo "factoryinsight=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/grafana-umh/)'; then
              echo "Building grafana_umh"
              echo "grafana_umh=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/hivemq-init/)'; then
              echo "Building hivemq_init"
              echo "hivemq_init=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/kafka-bridge/)'; then
              echo "Building kafka_bridge"
              echo "kafka_bridge=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/kafka-init/)'; then
              echo "Building kafka_init"
              echo "kafka_init=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/kafka-to-postgresql/)'; then
              echo "Building kafka_to_postgresql"
              echo "kafka_to_postgresql=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/kafka-to-postgresql-v2/)'; then
            echo "Building kafka_to_postgresql_v2"
            echo "kafka_to_postgresql_v2=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/metrics/)'; then
            echo "Building metrics"
            echo "metrics=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/mqtt-kafka-bridge/)'; then
            echo "Building mqtt_kafka_bridge"
            echo "mqtt_kafka_bridge=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(go.work|go.work.sum|golang/internal/|golang/pkg/|golang/test/|golang/go.mod|golang/go.sum|golang/cmd/sensorconnect/)'; then
            echo "Building sensorconnect"
            echo "sensorconnect=true" >> $GITHUB_OUTPUT
          fi

          # Special case: We have changes to the deployment/Chart.yaml file (build everything)
          if git diff --name-only $previousSHA $currentSHA | grep -E '^(deployment/Chart.yaml)'; then
            echo "Building all images"
            echo "barcodereader=true" >> $GITHUB_OUTPUT
            echo "factoryinsight=true" >> $GITHUB_OUTPUT
            echo "grafana_umh=true" >> $GITHUB_OUTPUT
            echo "hivemq_init=true" >> $GITHUB_OUTPUT
            echo "kafka_bridge=true" >> $GITHUB_OUTPUT
            echo "kafka_init=true" >> $GITHUB_OUTPUT
            echo "kafka_to_postgresql=true" >> $GITHUB_OUTPUT
            echo "kafka_to_postgresql_v2=true" >> $GITHUB_OUTPUT
            echo "metrics=true" >> $GITHUB_OUTPUT
            echo "mqtt_kafka_bridge=true" >> $GITHUB_OUTPUT
            echo "sensorconnect=true" >> $GITHUB_OUTPUT
          fi

          
          

  barcodereader:
    needs: check_paths
    if: needs.check_paths.outputs.barcodereader == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/barcodereader
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/barcodereader/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  factoryinsight:
    needs: check_paths
    if: needs.check_paths.outputs.factoryinsight == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/factoryinsight
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/factoryinsight/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}

  grafana-umh:
    needs: check_paths
    if: needs.check_paths.outputs.grafana_umh == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/grafana-umh
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/grafana-umh/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  hivemq-init:
    needs: check_paths
    if: needs.check_paths.outputs.hivemq_init == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/hivemq-init
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/hivemq-init/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  kafka-bridge:
    needs: check_paths
    if: needs.check_paths.outputs.kafka_bridge == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/kafka-bridge
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/kafka-bridge/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}

  kafka-init:
    needs: check_paths
    if: needs.check_paths.outputs.kafka_init == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/kafka-init
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/kafka-init/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}


  kafka-to-postgresql:
    needs: check_paths
    if: needs.check_paths.outputs.kafka_to_postgresql == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/kafka-to-postgresql
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/kafka-to-postgresql/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}


  kafka-to-postgresql-v2:
    needs: check_paths
    if: needs.check_paths.outputs.kafka_to_postgresql_v2 == 'true'
    permissions:
      packages: write
      contents: read
    runs-on: 
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/kafka-to-postgresql-v2
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/kafka-to-postgresql-v2/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}
          
  metrics:
    needs: check_paths
    if: needs.check_paths.outputs.metrics == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/metrics
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/metrics/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}

  mqtt-kafka-bridge:
    needs: check_paths
    if: needs.check_paths.outputs.mqtt_kafka_bridge == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/mqtt-kafka-bridge
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/mqtt-kafka-bridge/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}

  sensorconnect:
    needs: check_paths
    if: needs.check_paths.outputs.sensorconnect == 'true'
    permissions:
      packages: write
      contents: read
    runs-on:  
      group: large-runners
    steps:
      - uses: actions/checkout@v4
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/united-manufacturing-hub/sensorconnect
          tags: |
            type=ref,event=branch,branch=main,staging
            type=ref,event=pr
            type=semver,pattern={{version}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/sensorconnect/Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}
