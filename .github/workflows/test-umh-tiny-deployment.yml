name: Test UMH Tiny Deployment

on:
  pull_request:
    paths:
      - 'deployment/**'
      - 'golang/**'
      - 'test/**'
      - '!test/test-values-full.yaml'
      - '!test/sensorconnect-mock/**'
      - '.github/workflows/test-umh-tiny-deployment.yml'

env:
  CHART_DIR: ./deployment/united-manufacturing-hub
  HELM_TIMEOUT: 10m
  K3D_VERSION: v5.4.6
  K3S_VERSION: v1.24.4-k3s1
  VALUES_FILE: ./test/test-values-tiny.yaml
  UMH: united-manufacturing-hub

jobs:
  data-flow-test:
    name: Data Flow Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare k3d cluster
        id: prepare-k3d
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "umh-tiny"
          k3d-version: ${{ env.K3D_VERSION }}
          args: --agents 1 --image rancher/k3s:${{ env.K3S_VERSION }}
      - name: Install UMH
        id: install-umh
        run: |
          helm install ${{ env.UMH }} ${{ env.CHART_DIR }} \
            --values ${{ env.VALUES_FILE }} \
            --set "kafkastatedetector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttbridge.tag=${GITHUB_HEAD_REF##*/}" \
            --set "barcodereader.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "sensorconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "cameraconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinsight.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinput.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "grafanaproxy.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "tulipconnector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatoblob.image.tag=${GITHUB_HEAD_REF##*/}" \
            --namespace ${{ env.UMH }} \
            --create-namespace \
            --wait --timeout ${{ env.HELM_TIMEOUT }} \
            --debug
          kubectl apply -f ./test/generic-data-flow-test-script.yaml -n ${{ env.UMH }}
          kubectl get po,svc -n ${{ env.UMH }}
      - name: Debug Install UMH failure
        id: debug-install-umh-failure
        if: ${{ failure() && steps.install-umh.outcome == 'failure' }}
        run: |
          ./tools/save_logs.sh install-umh-step
      - name: Run Data Flow Test Job
        id: run-data-flow-test
        run: |
          kubectl apply -f ./test/data-flow-test/data-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/data-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Data Flow Test Job succeeded"
          kubectl logs job/data-flow-test -n ${{ env.UMH }} || true
      - name: Debug Data Flow failure
        id: debug-data-flow-failure
        if: ${{ failure() && steps.run-data-flow-test.outcome == 'failure'  }}
        run: |
          ./tools/save_logs.sh run-data-flow-test-step
      - name: Upload failed test logs
        id: upload-failed-test-logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: data-flow-test-logs
          path: |
            ./install-umh-step
            ./run-data-flow-test-step
          if-no-files-found: ignore
          retention-days: 5

  upgrade-test:
    name: Upgrade Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare k3d cluster
        id: prepare-k3d
        uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "umh-tiny"
          k3d-version: ${{ env.K3D_VERSION }}
          args: --agents 1 --image rancher/k3s:${{ env.K3S_VERSION }}
      - name: Install UMH latest
        id: install-umh-latest
        run: |
          helm repo add united-manufacturing-hub https://repo.umh.app/
          helm repo update
          helm install ${{ env.UMH }} ${{ env.CHART_DIR }} \
            --values ${{ env.VALUES_FILE }} \
            --namespace ${{ env.UMH }} \
            --create-namespace \
            --wait --timeout ${{ env.HELM_TIMEOUT }} \
            --debug
      - name: Debug Install UMH failure
        id: debug-install-umh-failure
        if: ${{ failure() && steps.install-umh-latest.outcome == 'failure' }}
        run: |
          ./tools/save_logs.sh install-umh-latest-step
      - name: Upgrade UMH
        id: upgrade-umh
        run: |
          kubectl delete deployment ${{ env.UMH }}-factoryinsight-deployment -n ${{ env.UMH }} || true
          kubectl delete deployment ${{ env.UMH }}-iotsensorsmqtt -n ${{ env.UMH }} || true
          kubectl delete deployment ${{ env.UMH }}-kafkatopostgresql -n ${{ env.UMH }} || true
          kubectl delete deployment ${{ env.UMH }}-mqttkafkabridge -n ${{ env.UMH }} || true
          kubectl delete statefulset ${{ env.UMH }}-nodered -n ${{ env.UMH }} || true
          helm upgrade ${{ env.UMH }} ${{ env.CHART_DIR }} \
            --values ${{ env.VALUES_FILE }} \
            --set "kafkastatedetector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttbridge.tag=${GITHUB_HEAD_REF##*/}" \
            --set "barcodereader.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "sensorconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "cameraconnect.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinsight.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "factoryinput.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "grafanaproxy.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatopostgresql.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "tulipconnector.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.image.tag=${GITHUB_HEAD_REF##*/}" \
            --set "mqttkafkabridge.initContainer.tag=${GITHUB_HEAD_REF##*/}" \
            --set "kafkatoblob.image.tag=${GITHUB_HEAD_REF##*/}" \
            --namespace ${{ env.UMH }} \
            --wait --timeout ${{ env.HELM_TIMEOUT }} \
            --debug
          kubectl apply -f ./test/generic-data-flow-test-script.yaml -n ${{ env.UMH }}
          kubectl get po,svc -n ${{ env.UMH }}
      - name: Debug Upgrade UMH failure
        id: debug-upgrade-umh-failure
        if: ${{ failure() && steps.upgrade-umh.outcome == 'failure' }}
        run: |
          ./tools/save_logs.sh upgrade-umh-step
      - name: Run Data Flow Test Job
        id: run-data-flow-test
        run: |
          kubectl apply -f ./test/data-flow-test/data-flow-test-job.yaml -n ${{ env.UMH }}
          kubectl wait --for=condition=complete job/data-flow-test -n ${{ env.UMH }} --timeout=2m
          echo "Data Flow Test Job succeeded"
          kubectl logs job/data-flow-test -n ${{ env.UMH }} || true
      - name: Debug Data Flow failure
        id: debug-data-flow-failure
        if: ${{ failure() && steps.run-data-flow-test.outcome == 'failure' }}
        run: |
          ./tools/save_logs.sh run-data-flow-test-step
      - name: Upload failed test logs
        id: upload-failed-test-logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: upgrade-test-logs
          path: |
            ./install-umh-latest-step
            ./upgrade-umh-step
            ./run-data-flow-test-step
          if-no-files-found: ignore
          retention-days: 5
