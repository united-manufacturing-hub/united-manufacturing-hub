# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# See https://github.com/rancher/k3os/blob/master/README.md#configuration


# This will be used as serial number as well
# HOSTNAME DOES NOT ALLOW UNDERSCORES
hostname: development

write_files:

# Write Helm values file
- content: |
    ---

  path: /home/rancher/configs/united-manufacturing-hub-development.yaml

- content: |
      #!/bin/bash
      # Copyright 2023 UMH Systems GmbH
      #
      # Licensed under the Apache License, Version 2.0 (the "License");
      # you may not use this file except in compliance with the License.
      # You may obtain a copy of the License at
      #
      #     http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing, software
      # distributed under the License is distributed on an "AS IS" BASIS,
      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      # See the License for the specific language governing permissions and
      # limitations under the License.

      LOCKDIR=/home/rancher/DO_NOT_DELETE

      # This runs as root

      if [ -d $LOCKDIR ]; then
      echo "Already configured. If you want to reconfigure delete /home/rancher/DO_NOT_DELETE"
      exit
      fi


      # Restart as rancher
      if [ $UID -eq 0 ]; then
      echo "Initial setup! Waiting 60 seconds for full startup..."
      sleep 60


      ###
      # Check if NTP server is reachable
      ###

      # Get both ntp servers from config
      NTP1=$(cat /k3os/system/config.yaml | grep ntp_servers -A2 | tail -n2 | grep - | sed 's/  - //g' | sed -n 1p)
      NTP2=$(cat /k3os/system/config.yaml | grep ntp_servers -A2 | tail -n2 | grep - | sed 's/  - //g' | sed -n 2p)

      echo "Testing NTP server $NTP1"
      echo "Testing NTP server $NTP2"

      # Try 5 times to reach either of them
      i="0"
      reachable_ntp_server_found=0
      while [ $i -lt 5 ]
      do
      if ! ping -c1 -W1 $NTP1 > /dev/null 2>&1 ; then
      echo "$NTP1 not reachable !"
      sleep 10
      else
      echo "$NTP1 is reachable !"
      reachable_ntp_server_found=1
      fi

      if ! ping -c1 -W1 $NTP2 > /dev/null 2>&1 ; then
      echo "$NTP2 not reachable !"
      sleep 10
      else
      echo "$NTP2 is reachable !"
      reachable_ntp_server_found=1
      fi
      if [ $reachable_ntp_server_found -eq 1 ]; then
      break
      fi
      i=$[$i+1]
      done

      if [ $reachable_ntp_server_found -eq 0 ]; then
      echo "No reachable NTP server found."
      echo "This can happen when you either have no connection to the internet or when you are in a limited network"
      echo "that blocks NTP requests (some universities do that). The solution is to connect ot the internet and / or"
      echo "to specify the allowed NTP servers manually in the development.yaml. Fore more information visit docs.umh.app"
      fi


      echo "Testing DNS lookup of umh.app"
      i="0"
      dns_query_successfull=0
      while [ $i -lt 10 ]
      do
      if ! nslookup umh.app  > /dev/null 2>&1 ; then
      echo "Failed to lookup umh.app"
      sleep 10
      else
      echo "DNS lookup successfull"
      dns_query_successfull=1
      break
      fi
      i=$[$i+1]
      done

      if [ $dns_query_successfull -eq 0 ]; then
      echo "Failed to resolve umh.app."
      echo "This can happen when you either have no connection to the internet or when you are in a limited network"
      echo "that blocks DNS requests (some universities do that). The solution is to connect ot the internet and / or"
      echo "to specify the allowed DNS servers manually in the development.yaml. Fore more information visit docs.umh.app"
      exit
      fi

      if [ $(date +%s) -lt 1609455600 ]; then
      echo "Current Date is < 01.01.2021, aborting setup"
      exit
      fi

      exec su "rancher" "$0" -- "$@"
      exit
      fi

      # The following code is run as rancher
      echo "Continuing with installation. Installing helm..."
      export VERIFY_CHECKSUM=false
      if ! curl -fsSL -o /home/rancher/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 ; then
      echo "Failed to download helm installer, aborting setup"
      exit
      fi

      if ! chmod 700 /home/rancher/get_helm.sh ; then
      echo "Failed to change permission on get_helm.sh, aborting setup"
      exit
      fi

      if ! /home/rancher/get_helm.sh ; then
      echo "Failed to execute get_helm.sh, aborting setup"
      exit
      fi
      echo "Helm installed!"

      echo "Adding helm repo..."
      if ! helm repo add united-manufacturing-hub https://repo.umh.app/; then
      echo "Failed to add umh repository, aborting setup"
      exit
      fi
      echo "Added helm repo!"

      echo "Creating namespace united-manufacturing-hub..."
      if ! kubectl create namespace united-manufacturing-hub; then
      echo "Failed to create kubernetes namespace for united-manufacturing-hub, aborting setup"
      exit
      fi
      echo "Created namespace!"

      echo "Install Helm chart united-manufacturing-hub..."
      if ! helm install united-manufacturing-hub united-manufacturing-hub/united-manufacturing-hub --values "/home/rancher/configs/united-manufacturing-hub-development.yaml" --set serialNumber=$(hostname) --kubeconfig /etc/rancher/k3s/k3s.yaml -n united-manufacturing-hub; then
      echo "Failed to install united-manufacturing-hub using helm, aborting setup"
      exit
      fi
      echo "Installed Helm chart!"

      echo "Enabling SSH password authentification..."
      if ! sudo sed -i 's/PasswordAuthentication  no/PasswordAuthentication  yes/g' /etc/ssh/sshd_config ; then
      echo "Failed to enable password authentication, aborting setup"
      exit
      fi
      if ! sudo service sshd restart ; then
      echo "Failed to restart sshd, aborting setup"
      exit
      fi
      echo "Enabled SSH password authentification!"

      if ! mkdir $LOCKDIR ; then
      echo "Failed to create $LOCKDIR, setup failed !"
      exit
      fi

      num1=$(k3s -v | grep -o 'v1.[0-9][0-9]' | sed 's/v//g')
      num2="1.20"
      num3="1.21"

      if (( $(echo "$num1 < $num2" |bc -l) )); then
      echo "k3os version outdated ! This can cause various issues."
      echo "Installed version:   $num1"
      echo "Minimal version:     $num2"
      echo "Maximal version:     $num3"
      fi

      if (( $(echo "$num1 > $num3" |bc -l) )); then
      echo "k3os version too new! This can cause various issues."
      echo "Installed version:   $num1"
      echo "Minimal version:     $num2"
      echo "Maximal version:     $num3"
      fi

      echo "Initial setup finished! This might take now awhile..."
      echo "You can press ENTER, to continue to the linux login screen."

  path: /home/rancher/initial_setup.sh

run_cmd:
- "chmod +x /home/rancher/initial_setup.sh && /home/rancher/initial_setup.sh &"

k3os:
  password: rancher
  dns_nameservers:
  - 8.8.8.8
  - 1.1.1.1
  ntp_servers:
  - pool.ntp.org
  - ntp1.rwth-aachen.de
