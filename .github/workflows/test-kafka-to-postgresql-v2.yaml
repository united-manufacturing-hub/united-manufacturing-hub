name: Run and Test kafka-to-postgresql-v2

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Teardown, allowing for repeated local testing
      - name: Teardown old tests
        run: |
          docker stop redpanda-1 || true
          docker stop timescaledb-1 || true
          docker stop kafka-to-postgresql-v2-1 || true          
          docker container prune -f || true
          docker volume prune -f || true
          docker system prune -f || true

      - name: Create Docker Network
        run: docker network create my_network

      - name: Start TimescaleDB
        run: |
          docker run -d --name timescaledb-1 --network=my_network \
          -e POSTGRES_PASSWORD=yourpassword \
          -p 5432:5432 \
          timescale/timescaledb:latest-pg15

      - name: Initialize Database
        run: |
          # Wait for TimescaleDB to be ready
          echo "Waiting for TimescaleDB to start..."
          until docker exec timescaledb-1 pg_isready -U postgres; do
            sleep 1
          done
          
          sleep 1

          # Create the database
          echo "Creating database..."
          docker exec -u postgres timescaledb-1 createdb yourdb
          echo "Created database"
          
          # Execute SQL commands
          echo "Setting up database schema..."
          docker exec -i timescaledb-1 psql -U postgres -d yourdb <<-EOSQL
            CREATE TABLE assets (
              id SERIAL PRIMARY KEY,
              enterprise TEXT NOT NULL,
              site TEXT,
              area TEXT,
              line TEXT,
              workcell TEXT,
              origin_id TEXT,
              UNIQUE (enterprise, site, area, line, workcell, origin_id)
            );
          
            CREATE TABLE tag (
              timestamp TIMESTAMPTZ NOT NULL,
              name TEXT NOT NULL,
              origin TEXT NOT NULL,
              asset SERIAL REFERENCES assets(id) NOT NULL,
              value REAL
            );

            CREATE TABLE tag_string (
              timestamp TIMESTAMPTZ NOT NULL,
              name TEXT NOT NULL,
              origin TEXT NOT NULL,
              asset SERIAL REFERENCES assets(id) NOT NULL,
              value TEXT
            );

            SELECT create_hypertable('tag', 'timestamp');
            SELECT create_hypertable('tag_string', 'timestamp');
            CREATE INDEX ON tag (asset, timestamp DESC);
            CREATE INDEX ON tag_string (asset, timestamp DESC);
            CREATE INDEX ON tag (name);
            CREATE INDEX ON tag_string (name);
            ALTER TABLE tag ADD UNIQUE (name, asset, timestamp);
            ALTER TABLE tag_string ADD UNIQUE (name, asset, timestamp);
          EOSQL
      

      - name: Start Redpanda
        run: |
          docker run -d --name=redpanda-1 --network=my_network --rm \
          -p 8081:8081 \
          -p 8082:8082 \
          -p 9092:9092 \
          -p 9644:9644 \
          docker.redpanda.com/redpandadata/redpanda:latest \
          redpanda start \
          --overprovisioned \
          --smp 1  \
          --memory 1G \
          --reserve-memory 0M \
          --node-id 0 \
          --check=false \
          --kafka-addr=0.0.0.0:9092 \
          --advertise-kafka-addr=redpanda-1:9092

      # Validate redpanda is reachable
      - name: Check Redpanda REST Interface
        run: |
          success=false
          for i in {1..5}; do
              echo "Attempt $i to check Redpanda REST interface..."
              if curl -f http://localhost:8082/topics; then
                  echo "Successfully connected to Redpanda REST interface!"
                  success=true
                  break
              else
                  echo "Failed to connect, retrying in 1 second..."
                  sleep 1
              fi
          done
          if [ "$success" = false ]; then
              echo "Failed to connect to Redpanda REST interface after 5 attempts."
              exit 1
          fi

      # Build the Docker image
      - name: Build Docker Image
        run: docker build -t kafka-to-postgresql-v2:latest -f ./deployment/kafka-to-postgresql-v2/Dockerfile .

      # Run the Docker image
      - name: Run Docker Image
        run: |
          docker run -d --name=kafka-to-postgresql-v2-1 --network=my_network \
          -e POSTGRES_HOST=timescaledb-1 \
          -e POSTGRES_PORT=5432 \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=yourpassword \
          -e POSTGRES_DATABASE=yourdb \
          -e POSTGRES_SSL_MODE=disable \
          -e KAFKA_BROKERS=redpanda-1:9092 \
          -e KAFKA_HTTP_BROKERS=redpanda-1:8082 \
          -e LOGGING_LEVEL=DEVELOPMENT \
          kafka-to-postgresql-v2:latest

      - name: Get Redpanda IP Address
        id: redpanda_ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' redpanda-1)
          echo "REDPANDA_IP=$IP" >> $GITHUB_ENV

      - name: Install kafkacat
        run: |
          sudo apt-get update -y
          sudo apt-get install -y kafkacat
      # Send message to Kafka
      - name: Use Redpanda IP with rpk
        run: |
          docker exec redpanda-1 rpk topic create umh.v1.test._historian --brokers localhost:9092
          
          docker run --network=my_network edenhill/kcat:1.7.1 -b redpanda-1 -L
          docker run --network=my_network edenhill/kcat:1.7.1 -b redpanda-1 -P -v -t umh.v1.test._historian
          
          echo '{"timestamp_ms": 1, "hello":"world"}' > /tmp/message.json
          docker run --network=my_network --mount type=bind,source=/tmp/message.json,target=/message.json edenhill/kcat:1.7.1 -P -b redpanda-1:9092 -t umh.v1.test._historian /message.json
          

      # Wait for 20 seconds
      - name: Wait for 20 seconds
        run: sleep 20

      # Check for entries in the tag table
      - name: Check Database
        env:
          PGPASSWORD: yourpassword
        run: |
          docker exec timescaledb-1 psql -U postgres -d yourdb -c "SELECT * FROM tag;"
          docker exec timescaledb-1 psql -U postgres -d yourdb -c "SELECT * FROM tag_string;"
          docker exec timescaledb-1 psql -U postgres -d yourdb -c "SELECT * FROM assets;"

      # Log
      - name: Log
        if: always()
        run: |
          docker logs redpanda-1 || true
          #docker logs timescaledb-1 || true      
          docker logs kafka-to-postgresql-v2-1 || true
          curl -vvv http://${{ env.REDPANDA_IP }}:8082/topics