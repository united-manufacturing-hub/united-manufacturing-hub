# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
{{if .Values.tags.classic }}

apiVersion: v1
kind: ConfigMap
metadata:
  # This is the name of the component, it should be unique within the namespace (63 chars max as per RFC 1035/1123)
  name: dfc-fcdec4de-a930-4229-befc-d318c9964a2e-kafka-t-mqtt-historian
  # To be scheduled in the open-source namespace
  namespace: united-manufacturing-hub
  labels:
    # This does not change over time
    data-flow-component-uuid: fcdec4de-a930-4229-befc-d318c9964a2e
    # This is the random UUID of the version of the component
    data-flow-component-version-uuid: 148530e8-c79a-4f45-9c76-9cc9d859b1c8
    # Timestamp of last change to the component in unix milliseconds since epoch
    data-flow-version: '1730983044602'
    # Generic label to indicate that this is a data flow component
    is-data-flow-component: 'true'
    # Required for mgmtcompanion to manage the component
    managed-by: mgmtcompanion
    # Do not allow mgmtcompanion to modify the component
    data-flow-component-is-read-only: 'true'
    # The type of the component
    data-flow-component-type: bridge
data:
  benthos.yaml: |
    # IMPORTANT
    #
    # Change the variables in the bloblang processor to match your setup.
    # Also, ensure to set the ORIGIN_NAME and DESTINATION_NAME in the client_id (output section) to match your setup.

    ## Input
    #
    # This configuration bridges umh.v1 messages from Kafka to MQTT.
    # umh.v1.* (as we have topic/key splitting)

    input:
      kafka_franz:
        seed_brokers:
          - united-manufacturing-hub-kafka.united-manufacturing-hub.svc.cluster.local:9092
        regexp_topics: true
        topics: ['umh.v1.*']
        consumer_group: "kafka_to_mqtt_historian_bridge"
        auto_replay_nacks: false
        metadata_max_age: 10s
        start_from_oldest: false

    ## Processors
    #
    # This part does the following:
    # 1. Reassemble the topic from the Kafka topic and key.
    # 2. Check if the reassembled topic contains the schema (_historian, etc.).
    # 3. Validate that the message is valid JSON.
    # 4. Check if we previously bridged this message, and drop it if we did.
    # 5. Add our own bridge name to the list of bridges in the payload.
    # 6. Prepare the MQTT topic by replacing dots with slashes.

    pipeline:
      processors:
        - label: reassemble_topic_and_filter_schema
          bloblang: |
            ######### Variables #########

            ## Change "default" to the name of the local instance
            let local_instance_name = "{{.Values._000_commonConfig.instanceName}}"

            ## Defaults to "_historian"
            let bridge_schema = "_historian"

            ######### END Variables #########
            meta "local_bridge_name" = "kafka_to_mqtt_bridge" + $bridge_schema + "_" + $local_instance_name
            meta "remote_bridge_name" = "mqtt_to_kafka_bridge" + $bridge_schema + "_" + $local_instance_name

            # Step 1: Reassemble the topic
            let kafka_topic = meta("kafka_topic")
            let kafka_key = meta("kafka_key").or("")
            let reassembled_topic = $kafka_topic + "." + $kafka_key
            let trimmed_topic = $reassembled_topic.trim(".")
            meta "trimmed_topic" = $trimmed_topic

            # Step 2: Check if the topic contains the schema
            let is_bridge_schema = $trimmed_topic.contains($bridge_schema)
            root = if $is_bridge_schema {
              root
            } else {
              deleted()
            }

        - label: validate_message_json
          bloblang: |
            # Step 3: Validate that the message is valid JSON
            let invalid_json = this.catch(true)
            if $invalid_json == true {
              meta "invalid_json_count" = 1
            } else {
              meta "invalid_json_count" = 0
            }
            root = this
        - label: increment_invalid_json_metric
          metric:
            type: counter_by
            name: invalid_json
            value: ${! meta("invalid_json_count") }
        - label: delete_if_invalid_json
          bloblang: |
            let invalid_json = meta("invalid_json_count")
            root = if $invalid_json.string() == "0" {
              root
            } else {
              deleted()
            }

        - label: check_and_delete_if_previously_bridged
          bloblang: |
            let local_bridge_name = meta("local_bridge_name")
            let remote_bridge_name = meta("remote_bridge_name")
            # Step 4: Check if the message was previously bridged
            let bridged_by = meta("bridged_by").or("[]")
            let bridged_by = $bridged_by.parse_json().or([])
            meta "bridged_by" = $bridged_by
            root = if $bridged_by.contains($local_bridge_name) || $bridged_by.contains($remote_bridge_name) {
              deleted()
            } else {
              root
            }

        - label: add_bridge_name_and_prepare_topic
          bloblang: |
            let bridged_by = meta("bridged_by")
            let bridged_by = $bridged_by.parse_json()
            let trimmed_topic = meta("trimmed_topic")
            let local_bridge_name = meta("local_bridge_name")
            root = this

            # Step 5: Add our own bridge name to the list of bridges in the payload
            root.bridged_by = $bridged_by.append($local_bridge_name)

            # Step 6: Prepare the MQTT topic by replacing dots with slashes
            let mqtt_topic = $trimmed_topic.replace(".", "/")
            meta "mqtt_topic" = $mqtt_topic


    output:
      broker:
        pattern: fan_out
        outputs:
          - mqtt:
              urls:
                - united-manufacturing-hub-mqtt.united-manufacturing-hub.svc.cluster.local:1883
              client_id: "kafka_to_mqtt_historian_{{.Values._000_commonConfig.instanceName}}"
              dynamic_client_id_suffix: "nanoid"
              topic: '${! meta("mqtt_topic") }'
{{end}}