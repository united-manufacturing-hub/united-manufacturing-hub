# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build Docker Images

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-docker:
    timeout-minutes: 60
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        component: [ 'factoryinsight', 'grafana-umh', 'hivemq-init' ]
        architecture: [ 'amd64', 'arm64' ]
        exclude:
          - component: 'factoryinsight'
            architecture: 'arm64'
          - component: 'kafka-init'
            architecture: 'arm64'
    runs-on:
      group: ${{ matrix.architecture == 'arm64' && 'arc-runners-small' || 'arc-runners' }}
    env:
      PR_ID: ${{ github.event.pull_request.number }}
    outputs:
      BUILD_TAG: ${{ steps.build-and-output.outputs.BUILD_TAG }}
      SHORT_TAG: ${{ steps.build-and-output.outputs.SHORT_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request && github.head_ref || github.ref_name }}

      - name: Check if Docker daemon is running
        id: check_docker
        run: |
          SECONDS=0
          TIMEOUT=120
          while ! docker info >/dev/null 2>&1; do
            if [ $SECONDS -ge $TIMEOUT ]; then
              echo "Docker daemon is not running after ${TIMEOUT} seconds, exiting..."
              docker info
              exit 1
            fi
            echo "Waiting for Docker daemon to start..."
            sleep 1
          done
          echo "Docker daemon is running."

      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: management.umh.app/oci/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup variables and build
        id: build-and-output
        run: |
          export GIT_TAG=$(git describe --tags --always)
          export DOCKER_FILE=./deployment/${{ matrix.component }}/Dockerfile
          export PLATFORM=${{ matrix.architecture }}

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            export BUILD_TAG=ghcr.io/united-manufacturing-hub/${{ matrix.component }}:latest-${PLATFORM}
          elif [[ ("${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/staging") || "${{ github.event.pull_request.head.ref }}" == "staging" ]]; then
            export BUILD_TAG=ghcr.io/united-manufacturing-hub/${{ matrix.component }}:staging-${PLATFORM}
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            export BUILD_TAG=ghcr.io/united-manufacturing-hub/${{ matrix.component }}:pr-${{ github.event.pull_request.number }}-${PLATFORM}
          elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
            export BUILD_TAG=ghcr.io/united-manufacturing-hub/${{ matrix.component }}:$(git rev-parse --abbrev-ref HEAD)-${PLATFORM}
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            export BUILD_TAG=ghcr.io/united-manufacturing-hub/${{ matrix.component }}:${GIT_TAG}-${PLATFORM}
          fi

          docker buildx build --platform linux/${PLATFORM} --provenance=false --progress=plain \
            --build-arg APP_VERSION=${GIT_TAG} -t ${BUILD_TAG} -f ${DOCKER_FILE} --push .

          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "BUILD_TAG=${BUILD_TAG}"

          # Short tag is build_tag without ghcr.io/united-manufacturing-hub/ prefix
          echo "SHORT_TAG=${BUILD_TAG#ghcr.io/united-manufacturing-hub/}" >> $GITHUB_OUTPUT
          echo "SHORT_TAG=${BUILD_TAG#ghcr.io/united-manufacturing-hub/}"

  create-manifests:
    needs: build-docker
    if: needs.build-docker.outputs.SHORT_TAG != ''
    permissions:
      contents: read
      packages: write
    runs-on:
      group: arc-runners
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        component: [ 'factoryinsight', 'grafana-umh', 'hivemq-init' ]
    steps:
      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if ARM64 image exists
        id: check_arm64
        run: |
          if docker manifest inspect ghcr.io/united-manufacturing-hub/${{ matrix.component}}:${{ needs.build-docker.outputs.SHORT_TAG }}-arm64 >/dev/null 2>&1; then
            echo "ARM64_EXISTS=true" >> $GITHUB_ENV
          else
            echo "ARM64_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create multiarch manifests
        run: |
          # Remove ghcr.io prefix from the tag
          TAG=${TAG#ghcr.io/united-manufacturing-hub/}
          if [ "${{ env.ARM64_EXISTS }}" = "true" ]; then
            docker buildx imagetools create -t ghcr.io/united-manufacturing-hub/${{ matrix.component}}:${{ needs.build-docker.outputs.SHORT_TAG }} \
              ghcr.io/united-manufacturing-hub/${{ matrix.component}}:${{ needs.build-docker.outputs.SHORT_TAG }}-amd64 \
              ghcr.io/united-manufacturing-hub/${{ matrix.component}}:${{ needs.build-docker.outputs.SHORT_TAG }}-arm64
          else
            docker buildx imagetools create -t ghcr.io/united-manufacturing-hub/${{ matrix.component}}:${{ needs.build-docker.outputs.SHORT_TAG }} \
              ghcr.io/united-manufacturing-hub/${{ matrix.component}}:${{ needs.build-docker.outputs.SHORT_TAG }}-amd64
          fi