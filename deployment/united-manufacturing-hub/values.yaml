---
# Please adjust the following lines
# _000_commonConfig contains the most common configuration options. To go into the details you can look into the configurations option after _000_commonConfig
_000_commonConfig:
  serialNumber: "default"  # usually the hostname
  # This allows to specify data sources, which is mostly used for instances running on the edge
  datasources:

    # barcodereader reads out connected USB barcodereaders emulating a keyboard
    barcodereader:
      enabled: false
      customUSBName: "Datalogic ADC, Inc. Handheld Barcode Scanner"
      customerID: "raw"
      location: "barcodereader"
      machineID: "barcodereader"
      brokerURL: "ssl://united-manufacturing-hub-vernemq-local-service.united-manufacturing-hub"
      brokerPort: 8883

    # sensorconnect searches for ifm IO-Link gateways and reads out the connected sensors
    sensorconnect:
      enabled: true
      iprange: "192.168.10.1/24"  # IP Range in CIDR notation

    # Warning: unstable
    # cameraconnect searches for GenICam compatible cameras and reads out the pictures
    cameraconnect:
      enabled: false
      trigger: "MQTT"
      acquisitionDelay: "0.0"
      cycleTime: "4"
      cameraInterface: "GenICam"
      imageWidth: "800"
      imageHeight: "800"
      imageChannels: "3"
      macAddress: "02-2625A-09849"
      exposureTime: "1000"
      exposureAuto: "Off"
      pixelFormat: "Mono8"

  # dataprocessing involves microservices, whose main purpose is to process the data
  dataprocessing:
    nodered:
      enabled: true
      defaultFlows: true

  # Infrastructure
  infrastructure:

    # vernemq
    mqtt:
      enabled: true
      AclConfig: |-
        pattern write ia/raw/%u/#
        pattern write ia/%u/#
        pattern $SYS/broker/connection/%c/state

        user TESTING
        topic ia/#
        topic $SYS/#
        topic read $share/TESTING/ia/#
        
        user ia_nodered
        topic ia/#
      CACert: |-
        -----BEGIN CERTIFICATE-----
        MIIDSzCCAjOgAwIBAgIUI2id6KFXw/nEv9bRhVsDhzM/ozkwDQYJKoZIhvcNAQEL
        BQAwFjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0EwHhcNMjEwNDA2MDkyNDM1WhcNMzEw
        NDA0MDkyNDM1WjAWMRQwEgYDVQQDDAtFYXN5LVJTQSBDQTCCASIwDQYJKoZIhvcN
        AQEBBQADggEPADCCAQoCggEBALh3vJroi6hcvcm3OmpXs26MsXmRiUhBgdrNSOzZ
        KjWpW+R9aMONu1KxoXAuj/pAwt5CkLAMQ5EI5H05OArYOKekLfMe3FRTEOUSvFU/
        qO0hBymJRJZRhECwWu01gL1OS4AXaxdjrXwx8H4URAiKa4FhJCWrSPCikNvzX4K2
        SSSZMbMXEddO9uoyBU83HcZdo8NX0QRUKXy6w/zVMsjyLSZCtk4BaLCmlidhcH91
        Hggl6JDk4CuYRfkmemyblzw2bKAlWqsppv/m1nkI3hEFvwN68cpfsNnQynfYpZkL
        ODuNnia+PIhl3XyDXkJCM2ylPObcmo0D9GV2/J0JZgu9y3ECAwEAAaOBkDCBjTAd
        BgNVHQ4EFgQUvW9fQDy1ACN7knRxApaEh3LxW78wUQYDVR0jBEowSIAUvW9fQDy1
        ACN7knRxApaEh3LxW7+hGqQYMBYxFDASBgNVBAMMC0Vhc3ktUlNBIENBghQjaJ3o
        oVfD+cS/1tGFWwOHMz+jOTAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkq
        hkiG9w0BAQsFAAOCAQEAfDsmd4FaA4R0rS84hGqileIaUdwhGE5IAlj3W8Wd2O63
        xqThR+qN7TzO5Nki7tXNC2qCpuJmbPqrbB0CgwiobkwV+3vwF+VW8lCjSfYSpXbs
        nUN9CXMkQVWwbx8cAc7LlmpxU9evD21cBGOvD9AjngJwcofUUYXIuwWDdd1DVOaK
        AJ2Xc2MEjeVXdQnFZLF2FEPy/znJ0EIW/PhGgFHyQWn1inJU00FNfGQsdO8Ruloi
        VNVYOyMINZIG0V91l29XCViuSUrR1BSvK+YG2wiFqHV0bUytbY7uuNCh3S/HZEhE
        zC5KEddzKtihzW3yP4baMAmvu7atS0Gy7MLXWG+SRw==
        -----END CERTIFICATE-----
      Cert: |-
        -----BEGIN CERTIFICATE-----
        MIIDjzCCAnegAwIBAgIQB6OLOw2bXBVXZD3ArV2i+jANBgkqhkiG9w0BAQsFADAW
        MRQwEgYDVQQDDAtFYXN5LVJTQSBDQTAeFw0yMTA0MDYxMTMxMDdaFw0yNDAzMjEx
        MTMxMDdaMCUxIzAhBgNVBAMMGmZhY3RvcnljdWJlLXNlcnZlci12ZXJuZW1xMIIB
        IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4EGKWn5ZSNtC5t3bsMjTMow3
        usMfM/1NzM9MYAvUMy71WHdCt/10bnIzRwYLUMtjAQURvyq+dXaj1DMz7452uzCC
        GE6r6SojReH7snAWMgrbDhE3psokW4LY6/tH5ihOBu1xfUtI1ac6rkHz4JsURpHj
        5HAGnPkfOiQZc10AxBxPz9i558a7J58Y4FZ0M51rgKaWAr+qDMzjfdNI/MUs1JTd
        Yn8QM0Sv2XjP4CziqWOa0Xf4MsoLgOqItZMLaYQwaUIkx0CV231D1cREZB2xbYSn
        DyK9DbXumK0tsVwgXh8Q+EY0ofW+M/noukJUxIbL8E1OKwbnS+2smpz5clc+BQID
        AQABo4HJMIHGMAkGA1UdEwQCMAAwHQYDVR0OBBYEFEPOUbp9SDAizKwHuiFhBPVH
        OKaTMFEGA1UdIwRKMEiAFL1vX0A8tQAje5J0cQKWhIdy8Vu/oRqkGDAWMRQwEgYD
        VQQDDAtFYXN5LVJTQSBDQYIUI2id6KFXw/nEv9bRhVsDhzM/ozkwEwYDVR0lBAww
        CgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMCUGA1UdEQQeMByCGmZhY3RvcnljdWJl
        LXNlcnZlci12ZXJuZW1xMA0GCSqGSIb3DQEBCwUAA4IBAQANaEiAIR+nADiGNeOk
        SSCRG5VeelFfO3X4wUiHrEKE6NkVVF+w6Wemogmtb+KB6NmjWAGiZep8p/R/7F75
        iAGUk4LEAcXFMw6NWZhODlv5ryo6V2X1EuqMwXOfccbUwu7l9md+j2UxY45vp1Z2
        +1eP/pjVmEt29HPUnWUT/rFeqlz605xYLauoSTsTxkGl5T8EoLwtvZOFnBIy7oGs
        QzW42IlfFKNlYKHMYJ8I6AQ89+cUUko/zqUPeiFl+fl1WpXCOofEiRUd/4Z6R0Rw
        moz/sNxvZ44GG47X2Gvc1Ewfc9rpgvSmyMTUgS4EP2p5LBQEDuFJz1DSW43QGOEx
        6OoQ
        -----END CERTIFICATE-----
      Privkey: |-
        -----BEGIN PRIVATE KEY-----
        MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDgQYpafllI20Lm
        3duwyNMyjDe6wx8z/U3Mz0xgC9QzLvVYd0K3/XRucjNHBgtQy2MBBRG/Kr51dqPU
        MzPvjna7MIIYTqvpKiNF4fuycBYyCtsOETemyiRbgtjr+0fmKE4G7XF9S0jVpzqu
        QfPgmxRGkePkcAac+R86JBlzXQDEHE/P2LnnxrsnnxjgVnQznWuAppYCv6oMzON9
        00j8xSzUlN1ifxAzRK/ZeM/gLOKpY5rRd/gyyguA6oi1kwtphDBpQiTHQJXbfUPV
        xERkHbFthKcPIr0Nte6YrS2xXCBeHxD4RjSh9b4z+ei6QlTEhsvwTU4rBudL7aya
        nPlyVz4FAgMBAAECggEAGr62SWSYMWA08mOzN7o7teOTIerzZbfn920hprLCc/g9
        unc+tcK8iA+GngnSf6hB/nUkULBAVrH3h+8zWnabImf+m/eF+SDVZBg3dGh5vS4e
        Qec7w+CHxYItbLdjM8fKxni6+D5qSVDQZsfm1fqoyGHN1AioQUBUwRJdFq0Y0kp0
        6BwZG2Kk43JQByeKX4/D2QgZEjFCgsw2Wihy8sQkX96aXbAdUO5Um7kzf7iIMXlI
        877uarOuCuIEYJSWjwrwu4I7CQ68lEA1pGSlEMKU9ju8KtoqaQ65ELx9PgK8df3+
        zIM8WnZzT/US0TPI+cWvsB6yYYGsohE25oGNYMnKAQKBgQD5RGOeAR4GhBm2tRR/
        6XzLWmru0sGif/7A/rPDjzWSlnkaqkTSK29xQZkDK9WJVLG3SWCV2XnwysLgVHyF
        J2DlPZVDnKvS5EXwGSenzpWMm6yHNZhsA1nxvSiZBXj8MPhF5NbOrnuZJVR9+xmA
        xQTspByMa9gwD8sXkWS+aq8+kQKBgQDmUDTfY8jtCXm9kXZPPgESGtYuDmBlvyf4
        40Gt79FmOt3ZYBr2do0BeUnyJOFwleQeUqRIneUsUHyUHj1VI/SpBuUAPWOT9w8s
        zlrLkmYnrOArKcZpCpWQZWyKXtomxdUlZJjFJGJfipJ1zu1G2IJZNjuuFpEJY4Jz
        xI3JO9OqNQKBgQC28UV3enRx7dP9b0sbUd7gVHz0yMOKowvy0zxWA64a5sr9Eggu
        g+hno/BMDojLINjJn1X+xL0lR3rdL8Sv6SXJOXhqRfspbZYS0DN1ij3iE4L9PQ2g
        AJmrvNul6wlPdhVRHtG0oQRfcrFfQMIH6xFhKFU3jhL9uymgI3pf8mapsQKBgQCV
        6ETR1mA0sQM1eVW5dFE8GI2qAp+J+mcpH7pjXYI9eTlnQJ+sJjPXbrvLyWeXYWjO
        t9nIjkVZl7XOrvQa08Fut1cc1dhXuep9rn74m/yz/FkYnyNOwZ3iE7IXSm/R5ti6
        cwTg5LLHHyn/VkWo5EnLiXpE8NlMdCG3+oqTHcbCtQKBgBoQrLzRsruiha6QP4OZ
        eCvOVIaxuH60A85QW5pgb0IlORXfX9zjA+M3v/G+tj6y5vxPOiVJaRd6iBqEDpMd
        337jNZKFr5EaVmF45PrcM060cbEcbdq8zCTEnQ6Y+bQiDTkfdgcE5CDJDJ7ol2I2
        MIzsw5gq+PcsyNV5g/IUX0PJ
        -----END PRIVATE KEY-----

    # apache kafka, mqttkafkabridge, kowl
    kafka:
      enabled: false

  # timescaledb, factoryinsight, mqtt-to-postgresql, grafana, redis
  # datastorage is the basic infrastructure to get messages from MQTT, storing them in a database and exposing a REST API with KPIs that can be used in Grafana (contains timescaledb, factoryinsight, mqtt-to-postgresql, grafana, vernemq, )
  # If you want to enable only some of these components, set enabled to false and enable them in the detailed configuration below 000_commonConfig
  datastorage:
    enabled: true
    db_password: "changeme"

  # mqtt-to-blob, minio, kafka-to-blob
  # blobstorage is the infrastructure to get image messages from MQTT and store them in a min.io blob storage (contains mqtt-to-blob, minio)
  blobstorage:
    enabled: false

  # factoryinput, grafanaproxy
  # datainput is the infrastructure to allow data entry via Grafana (contains factoryinput, grafanaproxy)
  datainput:
    enabled: false

  # mqttBridge allows connecting multiple United Manufacturing Hub clusters, e.g., the installations on the edge with the central cloud
  mqttBridge:
    enabled: false
    remoteBrokerURL: "ssl://united-manufacturing-hub-vernemq-local-service.united-manufacturing-hub:8883"
    localSubTopic: "ia/factoryinsight"  # /# will be automatically appended to the string specified here.
    oneWay: true
    localBrokerSSLEnabled: false
    localPubTopic: "ia"
    localCertificateName: "LOCAL"
    remoteBrokerSSLEnabled: true
    remoteSubTopic: "ia"
    remotePubTopic: "ia/factoryinsight"  # /# will be automatically appended to the string specified here.

    CAcert: |
      -----BEGIN CERTIFICATE-----
      -----END CERTIFICATE-----
    cert: |
      -----BEGIN CERTIFICATE-----
      -----END CERTIFICATE-----
    privkey: |
      -----BEGIN PRIVATE KEY-----
      -----END PRIVATE KEY-----


##### DO NOT CHANGE ANYTHING BELOW HERE (except when you know what you are doing) #####

serviceAccount:
  create: true

### mqttbridge ###
mqttbridge:
  enabled: false
  image: unitedmanufacturinghub/mqtt-bridge
  storageRequest: 1Gi
  resources:
    requests:
      cpu: "100m"
      memory: "20Mi"
    limits:
      cpu: "200m"
      memory: "100Mi"

### barcodereader ###
barcodereader:
  image: unitedmanufacturinghub/barcodereader
  resources:
    requests:
      cpu: "2m"
      memory: "30Mi"
    limits:
      cpu: "10m"
      memory: "60Mi"

### sensorconnect ###
sensorconnect:
  storageRequest: 1Gi
  image: unitedmanufacturinghub/sensorconnect
  ioddfilepath: "/ioddfiles"
  lowerPollingTime: 20 # Fastest time, sensors should be requested to serve data
  upperPollingTime: 1000 # Slowest time, sensors should be requested to serve data
  pollingSpeedStepUpMs: 20 # Time to add to actual stepping in case of failure
  pollingSpeedStepDownMs: 1 # Time to add to actual stepping in case of no-failure
  sensorInitialPollingTimeMs: 100 # Time to begin retrieving sensor data (Set higher then lowerTickSpeedMs to not kill sensors instantly, after they recovered from overload)
  deviceFinderTimeSec: 20 # Time in sec, before finding new devices
  deviceFinderTimeoutSec: 1 # HTTP timeout for finding new sensors. NEVER set lower then DeviceFinderFrequenceySec
  maxSensorErrorCount: 50 # Errors before a sensor is temporarily disabled
  allowSubTwentyMs: 0 # Set to 1 to allow lowerTickSpeedMs of under 20ms. THIS IS DANGEROUS !!!
  additionalSleepTimePerActivePortMs: 0.0 # Additional time to add to sleep time, based on active ports (especially helpful if you mix devices with 1-2 sensors and devices with 8 sensors)
  additionalSlowDownMap: [] # JSON map, allowing for slowing down/speeding up sensors based on serialnumber, productcode or url
                            # Example:
                            # [{"serialnumber":"000200610104","slowdown_ms":-10},{"url":"http://192.168.0.13","slowdown_ms":20},{"productcode":"AL13500","slowdown_ms":20.01}]
  debug: 0 # Set to 1 to enable debug output
  resources:
    requests:
      cpu: "10m"
      memory: "75Mi"
    limits:
      cpu: "100m"
      memory: "200Mi"

### cameraconnect ###
cameraconnect:
  image: unitedmanufacturinghub/cameraconnect
  # tag: development
  loggingLevel: "INFO"
  resources:
    requests:
      cpu: "10m"
      memory: "25Mi"
    limits:
      cpu: "100m"
      memory: "100Mi"

### nodered ###
nodered:
  pluginInstallEnabled: true
  tag: 2.0.6
  port: 1880
  storageRequest: 1Gi
  env:
    NODE_RED_ENABLE_SAFE_MODE: false
  timezone: Berlin/Europe
  serviceType: LoadBalancer
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  flows: |-
    [{"id":"41c9c6783cbe3070","type":"tab","label":"Example flow","disabled":false,"info":""},{"id":"45f7c4f7.dff1cc","type":"tab","label":"Machine data genenerator","disabled":false,"info":""},{"id":"587a158d.20327c","type":"subflow","name":"addShift","info":"","category":"","in":[{"x":40,"y":100,"wires":[{"id":"d4c91958.7b47b8"}]}],"out":[],"env":[],"meta":{},"color":"#D5F0FF","icon":"font-awesome/fa-calendar"},{"id":"9d0bf5c6.2530b8","type":"subflow","name":"output_to_activity","info":"","category":"ia: nodes","in":[],"out":[],"env":[{"name":"max_duration","type":"num","value":"10","ui":{"icon":"font-awesome/fa-clock-o","label":{"en-US":"max_duration"},"type":"input","opts":{"types":["num"]}}},{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red/sort.svg"},{"id":"882af5a6.a58b28","type":"subflow","name":"state_logic","info":"","category":"ia: nodes","in":[],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]}}}],"meta":{},"color":"#D5F0FF","icon":"node-red/status.svg"},{"id":"ae592577.420618","type":"subflow","name":"processvalue","info":"","category":"","in":[{"x":60,"y":60,"wires":[{"id":"d996e872.8c0c88"}]}],"out":[],"env":[{"name":"namePV","type":"str","value":"yourProcessValueName","ui":{"icon":"font-awesome/fa-text-width","type":"input","opts":{"types":["str"]}}},{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]}}}],"meta":{},"color":"#D5F0FF","icon":"font-awesome/fa-area-chart"},{"id":"fc9d8f9c.14845","type":"subflow","name":"count","info":"","category":"","in":[{"x":140,"y":120,"wires":[{"id":"a85c6ef3.fcf27"}]}],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red-dashboard/ui_chart.png"},{"id":"b60b06bc.cdb4c8","type":"subflow","name":"detectedAnomaly","info":"","category":"","in":[{"x":40,"y":80,"wires":[{"id":"c9fa6d5b.84b01"}]}],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red/alert.svg"},{"id":"b77cb6f5.685178","type":"subflow","name":"activity","info":"","category":"","in":[{"x":60,"y":80,"wires":[{"id":"6e72af6b.e6363"}]}],"out":[],"env":[{"name":"customerID","type":"str","value":"samplecustomerID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"location","type":"str","value":"samplelocation","ui":{"type":"input","opts":{"types":["str"]},"label":{}}},{"name":"AssetID","type":"str","value":"sampleAssetID","ui":{"type":"input","opts":{"types":["str"]},"label":{}}}],"color":"#D5F0FF","icon":"node-red/serial.svg"},{"id":"62375092.d1012","type":"group","z":"45f7c4f7.dff1cc","name":"Sample Data","style":{"stroke":"none","fill":"#DAECF0","label":true,"color":"#000000","label-position":"n"},"nodes":["6e3f046.47cecfc","f8283b61.08d9e8","5b0afc76.d39564","20f4ef35.92e22","5649a4d0.ce43ec","3b5e6754.ff4f18"],"x":34,"y":19},{"id":"7cef6b1d.d23a54","type":"group","z":"45f7c4f7.dff1cc","name":"United Manufacturing Hub Nodered-connectors","style":{"fill":"#2D393D","fill-opacity":"0.66","label":true,"color":"#ffffff","label-position":"n","stroke":"none"},"nodes":["96c50010.c50af","ae8cdaa6.a56a68","c8d8afe1.59fa","246a1685.58379a","7bb0392e.8a3bf8","b34237d9.7d2cc8","e61e8604.509d48"],"x":474,"y":19},{"id":"ba92812b.1beda","type":"group","z":"45f7c4f7.dff1cc","name":"Selection of standard interfaces","style":{"stroke":"none","fill":"#DAECF0","label":true,"label-position":"n","color":"#000000"},"nodes":["c3372d57.50822","37c52f75.d6a81","a8e1a854.89e108","cdd3a9a3.ceed18","28b0d095.a6f2e","15717681.474919","28ac3b5b.0c6e64","37c52f75.d6a81","6c82df5c.fb975","392b9fc.5171e6"],"x":54,"y":459},{"id":"5dff9791.d1b278","type":"mqtt-broker","name":"","broker":"united-manufacturing-hub-vernemq","port":"1883","clientid":"","usetls":false,"compatmode":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"d4c91958.7b47b8","type":"function","z":"587a158d.20327c","name":"Create Shift","func":"timestamp_ms = Date.now() \ntimestamp_ms_end = timestamp_ms + (msg.duration_in_minutes * 60*1000)\n\nmsg.payload = {\n \"timestamp_ms\": timestamp_ms, \n \"timestamp_ms_end\": timestamp_ms_end,\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/addShift\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":100,"wires":[["38e4349e.30f73c"]]},{"id":"38e4349e.30f73c","type":"mqtt out","z":"587a158d.20327c","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"1","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":450,"y":100,"wires":[]},{"id":"1a01904d.a305b","type":"json","z":"9d0bf5c6.2530b8","name":"","property":"payload","action":"","pretty":false,"x":250,"y":100,"wires":[["d5821e95.eb077"]]},{"id":"85638585.b5dfb8","type":"mqtt in","z":"9d0bf5c6.2530b8","name":"MQTT-IN: output","topic":"ia/+/+/+/count","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":100,"y":100,"wires":[["1a01904d.a305b"]]},{"id":"d5821e95.eb077","type":"function","z":"9d0bf5c6.2530b8","name":"Check for exakt Topic","func":"var topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/count\"\nif (topic == msg.topic) {\n msg.payload = msg.payload\n} else {\n msg.payload = null;\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":100,"wires":[["dc440bb.3e238f8"]]},{"id":"dc440bb.3e238f8","type":"switch","z":"9d0bf5c6.2530b8","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":590,"y":100,"wires":[["c52cba61.6b62d8"]]},{"id":"b9e10ec3.94988","type":"function","z":"9d0bf5c6.2530b8","name":"Format: activity ","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"activity\": msg.payload\n}\n\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/activity\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1400,"y":100,"wires":[["55c7ebc4.703714"]]},{"id":"55c7ebc4.703714","type":"mqtt out","z":"9d0bf5c6.2530b8","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","broker":"5dff9791.d1b278","x":1670,"y":100,"wires":[]},{"id":"a0736c99.0b8bc","type":"rbe","z":"9d0bf5c6.2530b8","name":"","func":"rbe","gap":"","start":"","inout":"out","property":"payload","x":1250,"y":100,"wires":[["b9e10ec3.94988"]]},{"id":"c52cba61.6b62d8","type":"function","z":"9d0bf5c6.2530b8","name":"","func":"flow.set(\"ts_last_output\", Date.now())\nreturn null;","outputs":1,"noerr":0,"x":720,"y":100,"wires":[[]]},{"id":"3f8212b6.7c6b8e","type":"function","z":"9d0bf5c6.2530b8","name":"","func":"if (flow.get(\"ts_last_output\")==undefined) {\n flow.set(\"ts_last_output\", Date.now())\n return null;\n} else if ((Date.now()-flow.get(\"ts_last_output\"))<env.get(\"max_duration\")*1000) {\n msg.payload = true;\n} else {\n msg.payload = false;\n}\nreturn msg;","outputs":1,"noerr":0,"x":1100,"y":100,"wires":[["a0736c99.0b8bc"]]},{"id":"1a8345c1.409d4a","type":"inject","z":"9d0bf5c6.2530b8","name":"","repeat":"0.25","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":930,"y":100,"wires":[["3f8212b6.7c6b8e"]]},{"id":"b3c8f72d.df9cb8","type":"function","z":"882af5a6.a58b28","name":"State logic","func":"msg.payload = msg.payload.detectedAnomaly\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1310,"y":120,"wires":[["8515bd04.5e05b"]]},{"id":"39cac321.c87fbc","type":"function","z":"882af5a6.a58b28","name":"get currentactivity","func":"msg.payload.currentActivity = flow.get(\"currentActivity\")\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":120,"wires":[["8f417e0a.f6dc9"]]},{"id":"8f417e0a.f6dc9","type":"switch","z":"882af5a6.a58b28","name":"Only when machine is not running","property":"payload.currentActivity","propertyType":"msg","rules":[{"t":"false"}],"checkall":"true","repair":false,"outputs":1,"x":1080,"y":120,"wires":[["b3c8f72d.df9cb8"]]},{"id":"e25eb0a9.c84f1","type":"function","z":"882af5a6.a58b28","name":"set currentactivity","func":"flow.set(\"currentActivity\",msg.payload.activity)\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":40,"wires":[["a53182a9.61bec"]]},{"id":"13ec32fe.d3a99d","type":"function","z":"882af5a6.a58b28","name":"Format: state (Machine Not Running with reason)","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"state\": parseInt(msg.payload)\n}\nflow.set(\"currentState\",msg.payload.state)\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/state\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1710,"y":120,"wires":[["dae1723d.6a99f"]]},{"id":"a53182a9.61bec","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload.activity","propertyType":"msg","rules":[{"t":"true"},{"t":"false"}],"checkall":"true","repair":false,"outputs":2,"x":910,"y":40,"wires":[["1a46ed5a.1bc5a3"],["947fea87.7b4ba8","4b651e29.d8987"]]},{"id":"1a46ed5a.1bc5a3","type":"function","z":"882af5a6.a58b28","name":"Format: state (Machine running)","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"state\": 0\n}\nflow.set(\"currentState\",msg.payload.state)\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/state\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":40,"wires":[["dae1723d.6a99f"]]},{"id":"de0540c3.06dbd","type":"function","z":"882af5a6.a58b28","name":"Format: state (Machine not running no reason specified)","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"state\": 40000\n}\nflow.set(\"currentState\",msg.payload.state)\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/state\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1490,"y":80,"wires":[["dae1723d.6a99f"]]},{"id":"dae1723d.6a99f","type":"mqtt out","z":"882af5a6.a58b28","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":2090,"y":80,"wires":[]},{"id":"8515bd04.5e05b","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":1450,"y":120,"wires":[["13ec32fe.d3a99d"]]},{"id":"998214b0.4c1f38","type":"json","z":"882af5a6.a58b28","name":"","property":"payload","action":"","pretty":false,"x":250,"y":40,"wires":[["c14538f4.87cec8"]]},{"id":"22e3fbe0.e64c64","type":"mqtt in","z":"882af5a6.a58b28","name":"MQTT-IN: activity","topic":"ia/+/+/+/activity","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":100,"y":40,"wires":[["998214b0.4c1f38"]]},{"id":"c14538f4.87cec8","type":"function","z":"882af5a6.a58b28","name":"Check for exakt Topic","func":"var topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/activity\"\nif (topic == msg.topic) {\n msg.payload = msg.payload\n} else {\n msg.payload = null;\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":40,"wires":[["e6293a0b.38e8b8"]]},{"id":"e6293a0b.38e8b8","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":590,"y":40,"wires":[["e25eb0a9.c84f1"]]},{"id":"5ae068fb.be12a8","type":"mqtt in","z":"882af5a6.a58b28","name":"MQTT-IN: detectedAnomaly","topic":"ia/+/+/+/detectedAnomaly","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":140,"y":120,"wires":[["8e9ed065.211af"]]},{"id":"8e9ed065.211af","type":"json","z":"882af5a6.a58b28","name":"","property":"payload","action":"","pretty":false,"x":330,"y":120,"wires":[["4a120d3d.8fad64"]]},{"id":"4a120d3d.8fad64","type":"function","z":"882af5a6.a58b28","name":"Check for exakt Topic","func":"var topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/detectedAnomaly\"\nif (topic == msg.topic) {\n msg.payload = msg.payload\n} else {\n msg.payload = null;\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":120,"wires":[["a82cfed9.9856a"]]},{"id":"a82cfed9.9856a","type":"switch","z":"882af5a6.a58b28","name":"","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":670,"y":120,"wires":[["39cac321.c87fbc"]]},{"id":"947fea87.7b4ba8","type":"debug","z":"882af5a6.a58b28","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":240,"wires":[]},{"id":"4b651e29.d8987","type":"function","z":"882af5a6.a58b28","name":"Was last state == machine running?","func":"if (flow.get(\"currentState\")==0) {\n return msg;\n} else {\n return null;\n}\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1120,"y":360,"wires":[["de0540c3.06dbd"]]},{"id":"4888b756.23e248","type":"mqtt out","z":"ae592577.420618","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"1","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":570,"y":60,"wires":[]},{"id":"d996e872.8c0c88","type":"function","z":"ae592577.420618","name":"Format: processValue","func":"var namePV = env.get(\"namePV\")\nvar tempJSON = {\n\"timestamp_ms\": Date.now(),\n}\ntempJSON[namePV]=msg.payload;\nmsg.payload= tempJSON;\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/processValue\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":60,"wires":[["4888b756.23e248"]]},{"id":"a85c6ef3.fcf27","type":"function","z":"fc9d8f9c.14845","name":"Format: count","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"count\": msg.payload\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/count\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":120,"wires":[["767ff1ad.008cd"]]},{"id":"767ff1ad.008cd","type":"mqtt out","z":"fc9d8f9c.14845","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","broker":"5dff9791.d1b278","x":550,"y":120,"wires":[]},{"id":"1222fb98.eff494","type":"mqtt out","z":"b60b06bc.cdb4c8","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"","retain":"","broker":"5dff9791.d1b278","x":470,"y":80,"wires":[]},{"id":"c9fa6d5b.84b01","type":"function","z":"b60b06bc.cdb4c8","name":"Format: detectedAnomaly","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"detectedAnomaly\": msg.payload\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/detectedAnomaly\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":80,"wires":[["1222fb98.eff494"]]},{"id":"6e72af6b.e6363","type":"function","z":"b77cb6f5.685178","name":"Format: Activity","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"activity\": msg.payload\n}\nmsg.topic = \"ia/\"+env.get(\"customerID\")+\"/\"+env.get(\"location\")+\"/\"+env.get(\"AssetID\")+\"/activity\"\nreturn msg;\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":340,"y":80,"wires":[["c68b3ec2.40d31"]]},{"id":"c68b3ec2.40d31","type":"mqtt out","z":"b77cb6f5.685178","name":"MQTT-OUT: Verarbeitete Daten","topic":"","qos":"2","retain":"","broker":"5dff9791.d1b278","x":570,"y":80,"wires":[]},{"id":"96c50010.c50af","type":"subflow:b77cb6f5.685178","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":550,"y":140,"wires":[]},{"id":"ae8cdaa6.a56a68","type":"subflow:b60b06bc.cdb4c8","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":590,"y":220,"wires":[]},{"id":"c8d8afe1.59fa","type":"subflow:fc9d8f9c.14845","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":550,"y":180,"wires":[]},{"id":"246a1685.58379a","type":"subflow:ae592577.420618","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":570,"y":260,"wires":[]},{"id":"7bb0392e.8a3bf8","type":"subflow:882af5a6.a58b28","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"},{"name":"customer_states","value":"","type":"str"}],"x":560,"y":100,"wires":[]},{"id":"b34237d9.7d2cc8","type":"subflow:9d0bf5c6.2530b8","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[{"name":"customerID","value":"factoryinsight","type":"str"},{"name":"location","value":"test","type":"str"},{"name":"AssetID","value":"test","type":"str"}],"x":580,"y":60,"wires":[]},{"id":"6e3f046.47cecfc","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"True","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"5","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":130,"y":60,"wires":[["96c50010.c50af"]]},{"id":"f8283b61.08d9e8","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"False","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"8","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"false","payloadType":"bool","x":130,"y":100,"wires":[["8dfcab17.6eb338"]]},{"id":"5b0afc76.d39564","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"Number","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"3","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"60000","payloadType":"num","x":140,"y":180,"wires":[["ae8cdaa6.a56a68"]]},{"id":"20f4ef35.92e22","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"True","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"15","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"1","payloadType":"num","x":130,"y":140,"wires":[["88623f34.27cac"]]},{"id":"5649a4d0.ce43ec","type":"inject","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"True","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"15","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":130,"y":220,"wires":[["246a1685.58379a"]]},{"id":"c3372d57.50822","type":"mqtt in","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"","topic":"ia/#","qos":"2","datatype":"auto","broker":"5dff9791.d1b278","nl":false,"rap":false,"x":150,"y":500,"wires":[[]]},{"id":"a8e1a854.89e108","type":"s7 in","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","endpoint":"","mode":"single","variable":"","diff":true,"name":"","x":150,"y":620,"wires":[[]]},{"id":"cdd3a9a3.ceed18","type":"s7 out","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","endpoint":"","variable":"","name":"","x":150,"y":660,"wires":[]},{"id":"28b0d095.a6f2e","type":"http request","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"REST","method":"GET","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","x":150,"y":700,"wires":[[]]},{"id":"15717681.474919","type":"tcp request","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","server":"","port":"","out":"time","splitc":"0","name":"TCP-IP","x":160,"y":740,"wires":[[]]},{"id":"28ac3b5b.0c6e64","type":"inject","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":170,"y":540,"wires":[["6c82df5c.fb975"]]},{"id":"37c52f75.d6a81","type":"modbus-read","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","name":"","topic":"","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"unitid":"","dataType":"","adr":"","quantity":"","rate":"","rateUnit":"","delayOnStart":false,"startDelayTime":"","server":"","useIOFile":false,"ioFile":"","useIOForPayload":false,"emptyMsgOnFail":false,"x":170,"y":580,"wires":[[],[]]},{"id":"3b5e6754.ff4f18","type":"cronplus","z":"45f7c4f7.dff1cc","g":"62375092.d1012","name":"Default shifts","outputField":"duration_in_minutes","timeZone":"Europe/Berlin","persistDynamic":false,"commandResponseMsgOutput":"output2","outputs":2,"options":[{"name":"shift_1","topic":"shift_1","payloadType":"num","payload":"180","expressionType":"cron","expression":"0 00 9 * * 1-5","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"},{"name":"schedule2","topic":"schedule2","payloadType":"num","payload":"400","expressionType":"cron","expression":"0 0 13 * * 1-5","location":"","offset":"0","solarType":"all","solarEvents":"sunrise,sunset"}],"x":150,"y":260,"wires":[["e61e8604.509d48"],[]]},{"id":"e61e8604.509d48","type":"subflow:587a158d.20327c","z":"45f7c4f7.dff1cc","g":"7cef6b1d.d23a54","name":"","env":[],"x":560,"y":300,"wires":[]},{"id":"8dfcab17.6eb338","type":"delay","z":"45f7c4f7.dff1cc","name":"","pauseType":"delay","timeout":"333","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":350,"y":140,"wires":[["96c50010.c50af"]]},{"id":"88623f34.27cac","type":"delay","z":"45f7c4f7.dff1cc","name":"","pauseType":"delay","timeout":"666","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":350,"y":180,"wires":[["c8d8afe1.59fa"]]},{"id":"6c82df5c.fb975","type":"OpcUa-Item","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","item":"","datatype":"","value":"","name":"","x":340,"y":540,"wires":[["392b9fc.5171e6"]]},{"id":"392b9fc.5171e6","type":"OpcUa-Client","z":"45f7c4f7.dff1cc","d":true,"g":"ba92812b.1beda","endpoint":"","action":"read","deadbandtype":"a","deadbandvalue":1,"time":10,"timeUnit":"s","certificate":"n","localfile":"","localkeyfile":"","securitymode":"None","securitypolicy":"None","name":"","x":520,"y":540,"wires":[[]]},{"id":"69acedbea0a497d9","type":"inject","z":"41c9c6783cbe3070","name":"","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"ia/factoryinsight/test/test/count","x":210,"y":180,"wires":[["2ec74b8f684fec8a"]]},{"id":"2ec74b8f684fec8a","type":"function","z":"41c9c6783cbe3070","name":"","func":"msg.payload = {\n\"timestamp_ms\": Date.now(),\n\"count\": 10\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":180,"wires":[["b5f390e651f93b89"]]},{"id":"b5f390e651f93b89","type":"mqtt out","z":"41c9c6783cbe3070","name":"","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"5dff9791.d1b278","x":530,"y":180,"wires":[]}]

  settings: |-
    module.exports = {
        // the tcp port that the Node-RED web server is listening on
        uiPort: process.env.PORT || 1880,
        // By default, the Node-RED UI accepts connections on all IPv4 interfaces.
        // To listen on all IPv6 addresses, set uiHost to "::",
        // The following property can be used to listen on a specific interface. For
        // example, the following would only allow connections from the local machine.
        //uiHost: "127.0.0.1",
        // Retry time in milliseconds for MQTT connections
        mqttReconnectTime: 15000,
        // Retry time in milliseconds for Serial port connections
        serialReconnectTime: 15000,
        // Retry time in milliseconds for TCP socket connections
        //socketReconnectTime: 10000,
        // Timeout in milliseconds for TCP server socket connections
        //  defaults to no timeout
        //socketTimeout: 120000,
        // Maximum number of messages to wait in queue while attempting to connect to TCP socket
        //  defaults to 1000
        //tcpMsgQueueSize: 2000,
        // Timeout in milliseconds for HTTP request connections
        //  defaults to 120 seconds
        //httpRequestTimeout: 120000,
        // The maximum length, in characters, of any message sent to the debug sidebar tab
        debugMaxLength: 1000,
        // The maximum number of messages nodes will buffer internally as part of their
        // operation. This applies across a range of nodes that operate on message sequences.
        //  defaults to no limit. A value of 0 also means no limit is applied.
        //nodeMessageBufferMaxLength: 0,
        // To disable the option for using local files for storing keys and certificates in the TLS configuration
        //  node, set this to true
        //tlsConfigDisableLocalFiles: true,
        // Colourise the console output of the debug node
        //debugUseColors: true,
        // The file containing the flows. If not set, it defaults to flows_<hostname>.json
        //flowFile: 'flows.json',
        // To enabled pretty-printing of the flow within the flow file, set the following
        //  property to true:
        //flowFilePretty: true,
        // By default, credentials are encrypted in storage using a generated key. To
        // specify your own secret, set the following property.
        // If you want to disable encryption of credentials, set this property to false.
        // Note: once you set this property, do not change it - doing so will prevent
        // node-red from being able to decrypt your existing credentials and they will be
        // lost.
        //credentialSecret: "a-secret-key",
        // By default, all user data is stored in a directory called `.node-red` under
        // the user's home directory. To use a different location, the following
        // property can be used
        //userDir: '/home/nol/.node-red/',
        // Node-RED scans the `nodes` directory in the userDir to find local node files.
        // The following property can be used to specify an additional directory to scan.
        //nodesDir: '/home/nol/.node-red/nodes',
        // By default, the Node-RED UI is available at http://localhost:1880/
        // The following property can be used to specify a different root path.
        // If set to false, this is disabled.
        //httpAdminRoot: '/admin',
        // Some nodes, such as HTTP In, can be used to listen for incoming http requests.
        // By default, these are served relative to '/'. The following property
        // can be used to specifiy a different root path. If set to false, this is
        // disabled.
        //httpNodeRoot: '/red-nodes',
        // The following property can be used in place of 'httpAdminRoot' and 'httpNodeRoot',
        // to apply the same root to both parts.
        httpRoot: '/nodered',
        // When httpAdminRoot is used to move the UI to a different root path, the
        // following property can be used to identify a directory of static content
        // that should be served at http://localhost:1880/.
        //httpStatic: '/home/nol/node-red-static/',
        // The maximum size of HTTP request that will be accepted by the runtime api.
        // Default: 5mb
        //apiMaxLength: '5mb',
        // If you installed the optional node-red-dashboard you can set it's path
        // relative to httpRoot
        ui: { path: "ui" },
        // Securing Node-RED
        // -----------------
        // To password protect the Node-RED editor and admin API, the following
        // property can be used. See http://nodered.org/docs/security.html for details.
        //adminAuth: {},
        // To password protect the node-defined HTTP endpoints (httpNodeRoot), or
        // the static content (httpStatic), the following properties can be used.
        // The pass field is a bcrypt hash of the password.
        // See http://nodered.org/docs/security.html#generating-the-password-hash
        //httpNodeAuth: {user:"user",pass:"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN."},
        //httpStaticAuth: {user:"user",pass:"$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN."},
        // The following property can be used to enable HTTPS
        // See http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
        // for details on its contents.
        // This property can be either an object, containing both a (private) key and a (public) certificate,
        // or a function that returns such an object:
        //// https object:
        //https: {
        //  key: require("fs").readFileSync('privkey.pem'),
        //  cert: require("fs").readFileSync('cert.pem')
        //},
        ////https function:
        // https: function() {
        //     // This function should return the options object, or a Promise
        //     // that resolves to the options object
        //     return {
        //         key: require("fs").readFileSync('privkey.pem'),
        //         cert: require("fs").readFileSync('cert.pem')
        //     }
        // },
        // The following property can be used to refresh the https settings at a
        // regular time interval in hours.
        // This requires:
        //   - the `https` setting to be a function that can be called to get
        //     the refreshed settings.
        //   - Node.js 11 or later.
        //httpsRefreshInterval : 12,
        // The following property can be used to cause insecure HTTP connections to
        // be redirected to HTTPS.
        //requireHttps: true,
        // The following property can be used to disable the editor. The admin API
        // is not affected by this option. To disable both the editor and the admin
        // API, use either the httpRoot or httpAdminRoot properties
        //disableEditor: false,
        // The following property can be used to configure cross-origin resource sharing
        // in the HTTP nodes.
        // See https://github.com/troygoode/node-cors#configuration-options for
        // details on its contents. The following is a basic permissive set of options:
        //httpNodeCors: {
        //    origin: "*",
        //    methods: "GET,PUT,POST,DELETE"
        //},
        // If you need to set an http proxy please set an environment variable
        // called http_proxy (or HTTP_PROXY) outside of Node-RED in the operating system.
        // For example - http_proxy=http://myproxy.com:8080
        // (Setting it here will have no effect)
        // You may also specify no_proxy (or NO_PROXY) to supply a comma separated
        // list of domains to not proxy, eg - no_proxy=.acme.co,.acme.co.uk
        // The following property can be used to add a custom middleware function
        // in front of all http in nodes. This allows custom authentication to be
        // applied to all http in nodes, or any other sort of common request processing.
        //httpNodeMiddleware: function(req,res,next) {
        //    // Handle/reject the request, or pass it on to the http in node by calling next();
        //    // Optionally skip our rawBodyParser by setting this to true;
        //    //req.skipRawBodyParser = true;
        //    next();
        //},
        // The following property can be used to add a custom middleware function
        // in front of all admin http routes. For example, to set custom http
        // headers
        // httpAdminMiddleware: function(req,res,next) {
        //    // Set the X-Frame-Options header to limit where the editor
        //    // can be embedded
        //    //res.set('X-Frame-Options', 'sameorigin');
        //    next();
        // },
        // The following property can be used to pass custom options to the Express.js
        // server used by Node-RED. For a full list of available options, refer
        // to http://expressjs.com/en/api.html#app.settings.table
        //httpServerOptions: { },
        // The following property can be used to verify websocket connection attempts.
        // This allows, for example, the HTTP request headers to be checked to ensure
        // they include valid authentication information.
        //webSocketNodeVerifyClient: function(info) {
        //    // 'info' has three properties:
        //    //   - origin : the value in the Origin header
        //    //   - req : the HTTP request
        //    //   - secure : true if req.connection.authorized or req.connection.encrypted is set
        //    //
        //    // The function should return true if the connection should be accepted, false otherwise.
        //    //
        //    // Alternatively, if this function is defined to accept a second argument, callback,
        //    // it can be used to verify the client asynchronously.
        //    // The callback takes three arguments:
        //    //   - result : boolean, whether to accept the connection or not
        //    //   - code : if result is false, the HTTP error status to return
        //    //   - reason: if result is false, the HTTP reason string to return
        //},
        // The following property can be used to seed Global Context with predefined
        // values. This allows extra node modules to be made available with the
        // Function node.
        // For example,
        //    functionGlobalContext: { os:require('os') }
        // can be accessed in a function block as:
        //    global.get("os")
        functionGlobalContext: {
            // os:require('os'),
            // jfive:require("johnny-five"),
            // j5board:require("johnny-five").Board({repl:false})
        },
        // `global.keys()` returns a list of all properties set in global context.
        // This allows them to be displayed in the Context Sidebar within the editor.
        // In some circumstances it is not desirable to expose them to the editor. The
        // following property can be used to hide any property set in `functionGlobalContext`
        // from being list by `global.keys()`.
        // By default, the property is set to false to avoid accidental exposure of
        // their values. Setting this to true will cause the keys to be listed.
        exportGlobalContextKeys: false,
        // Context Storage
        // The following property can be used to enable context storage. The configuration
        // provided here will enable file-based context that flushes to disk every 30 seconds.
        // Refer to the documentation for further options: https://nodered.org/docs/api/context/
        //
        //contextStorage: {
        //    default: {
        //        module:"localfilesystem"
        //    },
        //},
        // The following property can be used to order the categories in the editor
        // palette. If a node's category is not in the list, the category will get
        // added to the end of the palette.
        // If not set, the following default order is used:
        //paletteCategories: ['subflows', 'common', 'function', 'network', 'sequence', 'parser', 'storage'],
        // Configure the logging output
        logging: {
            // Only console logging is currently supported
            console: {
                // Level of logging to be recorded. Options are:
                // fatal - only those errors which make the application unusable should be recorded
                // error - record errors which are deemed fatal for a particular request + fatal errors
                // warn - record problems which are non fatal + errors + fatal errors
                // info - record information about the general running of the application + warn + error + fatal errors
                // debug - record information which is more verbose than info + info + warn + error + fatal errors
                // trace - record very detailed logging + debug + info + warn + error + fatal errors
                // off - turn off all logging (doesn't affect metrics or audit)
                level: "info",
                // Whether or not to include metric events in the log output
                metrics: false,
                // Whether or not to include audit events in the log output
                audit: false
            }
        },
        // Customising the editor
        editorTheme: {
            projects: {
                // To enable the Projects feature, set this value to true
                enabled: false
            }
        }
    }


### factoryinsight ###
factoryinsight:
  enabled: false
  image:
    repository: unitedmanufacturinghub/factoryinsight
    pullPolicy: IfNotPresent
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2
  replicas: 2
  user: "factoryinsight"
  # Password will be generated automatically
  db_host: "united-manufacturing-hub"
  db_database: "factoryinsight"
  db_user: "factoryinsight"
  redis:
    URI1: united-manufacturing-hub-redis-node-0.united-manufacturing-hub-redis-headless:26379
    URI2: united-manufacturing-hub-redis-node-1.united-manufacturing-hub-redis-headless:26379
    URI3: united-manufacturing-hub-redis-node-2.united-manufacturing-hub-redis-headless:26379
  service:
    annotations: {}
  pdb:
    enabled: true
    annotations: {}
    minAvailable: 2
  hpa:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
  ingress:
    enabled: false
    publicHost: ""
    publicHostSecretName: ""
  resources:
    limits:
      cpu: 1000m
    requests:
      cpu: 200m

### factoryinput ###
factoryinput:
  enabled: false
  user: factoryinsight
  service:
    annotations: {}
  image:
    repository: unitedmanufacturinghub/factoryinput
    pullPolicy: IfNotPresent
  replicas: 1
  storageRequest: 1Gi
  pdb:
    enabled: true
    minAvailable: 1

### mqtt-to-blob ###
mqtttoblob:
  enabled: false
  image:
    repository: unitedmanufacturinghub/mqtt-to-blob
    pullPolicy: Always
  replicas: 1
  pdb:
    enabled: true
    minAvailable: 1

### grafanaproxy ###
grafanaproxy:
  enabled: false
  image:
    repository: unitedmanufacturinghub/grafana-proxy
    pullPolicy: IfNotPresent
  replicas: 1
  service:
    annotations: {}
    type: LoadBalancer
    port: 2096
    targetPort: 80
    protocol: TCP
    labels: {}
    portName: service
    name: http
  resources:
    limits:
      cpu: 1000m
    requests:
      cpu: 200m

### mqtt-to-postresql ###
mqtttopostgresql:
  enabled: false
  image:
    repository: unitedmanufacturinghub/mqtt-to-postgresql
    pullPolicy: IfNotPresent
  # Only specify tag if you want to use a specific version. If not specified the latest stable version is automatically selected
  # tag: 0.3.2
  replicas: 1
  storageRequest: 1Gi
  pdb:
    enabled: true
    minAvailable: 1

### minio-operator ###
minio-operator:
  loadBalancerEnabled: false
  service:
    annotations: {}
  ## MinIO Tenant Definition
  tenants:
    # Tenant name
    - name: umhminio
      ## Registry location and Tag to download MinIO Server image
      ## Customize namespace for tenant deployment
      namespace: "united-manufacturing-hub"
      ## Customize any private registry image pull secret.
      ## currently only one secret registry is supported
      imagePullSecret: {}
      ## If a scheduler is specified here, Tenant pods will be dispatched by specified scheduler.
      ## If not specified, the Tenant pods will be dispatched by default scheduler.
      scheduler: {}
      ## Specification for MinIO Pool(s) in this Tenant.
      pools:
        ## Servers specifies the number of MinIO Tenant Pods / Servers in this pool.
        ## For standalone mode, supply 1. For distributed mode, supply 4 or more.
        ## Note that the operator does not support upgrading from standalone to distributed mode.
        - servers: 1
          ## volumesPerServer specifies the number of volumes attached per MinIO Tenant Pod / Server.
          volumesPerServer: 4
          ## size specifies the capacity per volume
          size: 1Gi
          ## storageClass specifies the storage class name to be used for this pool
          ## local-path only works in k3s / development setups. Change for production setups.
          storageClassName: ""
          ## Used to specify a toleration for a pod
          tolerations: {}
          ## nodeSelector parameters for MinIO Pods. It specifies a map of key-value pairs. For the pod to be
          ## eligible to run on a node, the node must have each of the
          ## indicated key-value pairs as labels.
          ## Read more here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          nodeSelector: {}
          ## Affinity settings for MinIO pods. Read more about affinity
          ## here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
          affinity: {}
          ## Configure resource requests and limits for MinIO containers
          resources: {}
          ## Configure security context
          securityContext: {}
      ## Mount path where PV will be mounted inside container(s).
      mountPath: /export
      ## Sub path inside Mount path where MinIO stores data.
      subPath: /data
      # pool secrets
      secrets:
        enabled: true
        name: umhminio-secret
        accessKey: minio
        secretKey: minio123
      # pool metrics to be read by Prometheus
      metrics:
        enabled: false
        port: 9000
      certificate:
        ## Use this field to provide one or more external CA certificates. This is used by MinIO
        ## to verify TLS connections with other applications:
        ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
        externalCaCertSecret: {}
        ## Use this field to provide a list of Secrets with external certificates. This can be used to to configure
        ## TLS for MinIO Tenant pods. Create secrets as explained here:
        ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
        externalCertSecret: {}
        ## Enable automatic Kubernetes based certificate generation and signing as explained in
        ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
        requestAutoCert: true
        ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
        ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
        ## not provided. DNS name format is *.minio.default.svc.cluster.local
        certConfig: {}
      ## Enable S3 specific features such as Bucket DNS which would allow `buckets` to be
      ## accessible as DNS entries of form `<bucketname>.minio.default.svc.cluster.local`
      s3:
        ## This feature is turned off by default
        bucketDNS: false
      ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
      ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
      ## for details.
      podManagementPolicy: Parallel
      ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific
      ## services created by the operator.
      serviceMetadata: {}
      ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
      env: {}
      ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
      ## This is applied to MinIO pods only.
      ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
      priorityClassName: ""

### timescaleDB ###
timescaledb-single:
  # This file and its contents are licensed under the Apache License 2.0.
  # Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

  replicaCount: 1

  # To prevent very long names, we override the name, otherwise it would default to
  # timescaledb-single (the name of the chart)
  nameOverride: timescaledb

  # The default Patroni name of the cluster ("scope") is derived from the name of the release,
  # but you can override this behaviour here
  # https://patroni.readthedocs.io/en/latest/SETTINGS.html#global-universal
  clusterName:

  # The major PostgreSQL version to use, defaults to the default version of the Docker image
  # However, in pg_upgrade scenarios, you may need to specify an explicit version
  version:

  # These secrets should exist before the Helm is used to deploy this TimescaleDB.
  # You can use generate_kustomization.sh to help in creating these secrets, or have
  # a look at kustomize/example to see how you could install them.
  secretNames:
    # This secret should contain environment variables that influence Patroni,
    # for example PATRONI_SUPERUSER_PASSWORD or PATRONI_REPLICATION_PASSWORD
    # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#postgresql
    credentials:  # defaults to RELEASE-credentials

    # This secret should be a Secret of type kubernetes.io/tls, containing
    # both a tls.key and a tls.crt
    certificate:  # defaults to RELEASE-certificate

    # This secret should contain environment variables that influence pgBackRest,
    # for example, PGBACKREST_REPO1_S3_KEY or PGBACKREST_REPO1_S3_KEY_SECRET
    pgbackrest:  # defaults to RELEASE-pgbackrest

  backup:
    enabled: false
    pgBackRest:
      # https://pgbackrest.org/configuration.html
      # Although not impossible, care should be taken not to include secrets
      # in these parameters. Use Kubernetes Secrets to specify S3 Keys, Secrets etc.
      compress-type: lz4
      process-max: 4
      start-fast: "y"
      repo1-retention-diff: 2
      repo1-retention-full: 2
      repo1-type: s3
      repo1-cipher-type: "none"
      repo1-s3-region: us-east-2
      repo1-s3-endpoint: s3.amazonaws.com

    # Overriding the archive-push/archive-get sections is most useful in
    # very high througput situations. Look at values/high_throuhgput_example.yaml for more details
    pgBackRest:archive-push: {}
    pgBackRest:archive-get: {}
    jobs:
      # name: needs to adhere to the kubernetes restrictions
      # type: can be full, incr or diff, see https://pgbackrest.org/user-guide.html
      # schedule: https://en.wikipedia.org/wiki/Cron#CRON_expression
      - name: full-weekly
        type: full
        schedule: "12 02 * * 0"
      - name: incremental-daily
        type: incr
        schedule: "12 02 * * 1-6"
    # Extra custom environment variables for the backup container.
    envFrom:
    # - secretRef:
    #     name: extra-pgbackrest-secrets

    # Alternatively, you can expose individual environment variables:
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
    # Although not impossible, care should be taken not to include secrets
    # in these parameters. Use Kubernetes Secrets to specify S3 Keys, Secrets etc.
    env:
    # - name: PGBACKREST_REPO1_S3_BUCKET
    #   value: my_example_s3_bucket_for_backups
    # - name: PGBACKREST_REPO1_S3_KEY_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name: pgbackrest-dev-secrets
    #       key: repo1-s3-key-secret

  # When creating a *new* deployment, the default is to initialize (using initdb) the database.
  # If however, you want to initialize the database using an existing backup, you can do so by
  # configuring this section.
  #
  # WARNING: You *should not* run 2 identically named deployments in separate Kubernetes
  #          clusters using the same S3 bucket for backups.
  bootstrapFromBackup:
    enabled: false
    # Setting the s3 path is mandatory to avoid overwriting an already existing backup,
    # and to be sure the restore is explicitly the one requested.
    repo1-path:
    # Here you can (optionally) provide a Secret to configure the restore process further.
    # For example, if you need to specify a different restore bucket, you should set
    # PGBACKREST_REPO1_S3_BUCKET: <base64 encoded value of the bucket> in these secrets
    secretName: pgbackrest-bootstrap


  # Extra custom environment variables.
  # These should be an EnvVar, as this allows you to inject secrets into the environment
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
  env:
  #  - name: NOT_A_SECRET
  #    value: "test"
  #  - name: MYAPPLICATION_STANDBY_PASSWORDS
  #    valueFrom:
  #      secretKeyRef:
  #        name: myapplication-passwords
  #        key: standby

  # Externally created Kubernetes secrets will be injected into the pods by referencing them here. You
  # can also add more configuration options and secrets this way (see https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables)
  envFrom:
  #  - configMapRef:
  #      name: my-deployment-settings
  #      optional: true


  # This configuration will be passed on to Patroni directly, there are a few things that are
  # injected/changed, these are:
  #   - archive_command will be set to /bin/true if backup is disabled
  #   - any context sensitive parameter (scope, namespace, name) will be overridden by the Kubernetes context
  # https://patroni.readthedocs.io/en/latest/SETTINGS.html#settings
  patroni:
    log:
      level: WARNING
    # https://patroni.readthedocs.io/en/latest/replica_bootstrap.html#bootstrap
    bootstrap:
      method: restore_or_initdb
      restore_or_initdb:
        command: >
          /etc/timescaledb/scripts/restore_or_initdb.sh
          --encoding=UTF8
          --locale=C.UTF-8
        keep_existing_recovery_conf: true
      post_init: /etc/timescaledb/scripts/post_init.sh
      dcs:
        loop_wait: 10
        maximum_lag_on_failover: 33554432
        postgresql:
          parameters:
            archive_command: "/etc/timescaledb/scripts/pgbackrest_archive.sh %p"
            archive_mode: 'on'
            archive_timeout: 1800s
            #
            # Autovacuuming is very important to PostgreSQL. For TimescaleDB, in
            # most usecases the vacuuming part is of less importance (there are no deleted tuples to prune)
            # however, the autoanalyze bit (updating the statistics of the chunks) is important to help
            # in planning queries. Therefore we do some tuning of autovacuum to address these
            # TimescaleDB specific concerns.
            # We'd rather have autovacuum do things early, as this increases the changes that autovacuum
            # will find the buffers it needs in shared_buffers, instead of having to fetch them from disk.
            #
            autovacuum_analyze_scale_factor: 0.02
            # This allows us to auto-analyze at most 120 (pretty much empty) chunks every 5 seconds
            # This will ensure that we can have up-to-date statistics on inserts very, very quickly
            autovacuum_naptime: 5s
            autovacuum_max_workers: 10
            # We don't want vacuum work to be building up, therefore we increase
            # the cost limit so that the work to be done for vacuum will be done quickly.
            autovacuum_vacuum_cost_limit: 500
            autovacuum_vacuum_scale_factor: 0.05
            log_autovacuum_min_duration: 1min
            hot_standby: 'on'
            log_checkpoints: 'on'
            log_connections: 'on'
            log_disconnections: 'on'
            log_line_prefix: "%t [%p]: [%c-%l] %u@%d,app=%a [%e] "
            log_lock_waits: 'on'
            log_min_duration_statement: '1s'
            log_statement: ddl
            max_connections: 100
            max_prepared_transactions: 150
            shared_preload_libraries: timescaledb,pg_stat_statements
            ssl: 'on'
            ssl_cert_file: '/etc/certificate/tls.crt'
            ssl_key_file: '/etc/certificate/tls.key'
            tcp_keepalives_idle: 900
            tcp_keepalives_interval: 100
            temp_file_limit: 1GB
            timescaledb.passfile: '../.pgpass'
            unix_socket_directories: "/var/run/postgresql"
            unix_socket_permissions: '0750'
            wal_level: hot_standby
            wal_log_hints: 'on'
          use_pg_rewind: true
          use_slots: true
        retry_timeout: 10
        ttl: 30
    kubernetes:
      role_label: role
      scope_label: cluster-name
      use_endpoints: true
    postgresql:
      create_replica_methods:
        - basebackup
      pgbackrest:
        command: /etc/timescaledb/scripts/pgbackrest_restore.sh
        keep_data: true
        no_params: true
        no_master: true
      basebackup:
        - waldir: "/var/lib/postgresql/wal/pg_wal"
      recovery_conf:
        restore_command: /etc/timescaledb/scripts/pgbackrest_archive_get.sh %f "%p"
      callbacks:
        on_role_change: /etc/timescaledb/scripts/patroni_callback.sh
        on_start: /etc/timescaledb/scripts/patroni_callback.sh
        on_reload: /etc/timescaledb/scripts/patroni_callback.sh
        on_restart: /etc/timescaledb/scripts/patroni_callback.sh
        on_stop: /etc/timescaledb/scripts/patroni_callback.sh
      authentication:
        replication:
          username: standby
        superuser:
          username: postgres
      listen: 0.0.0.0:5432
      pg_hba:
        - local     all             postgres                              peer
        - local     all             all                                   md5
        - hostnossl all,replication all                all                reject
        - hostssl   all             all                127.0.0.1/32       md5
        - hostssl   all             all                ::1/128            md5
        - hostssl   replication     standby            all                md5
        - hostssl   all             all                all                md5
      use_unix_socket: true
    restapi:
      listen: 0.0.0.0:8008

  callbacks:
    # If set, this configMap will be used for the Patroni callbacks.
    configMap:  # example-patroni-callbacks

  postInit:
    # A list of sources, that contain post init scripts.
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#projectedvolumesource-v1-core
    # These scripts are all projected to the same directory and will be executed
    # in sorted order only once: After a cluster initialization
    # Some examples:
    - configMap:
        name: timescale-post-init
        optional: false
    - secret:
        name: timescale-post-init-pw
        optional: false


  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  persistentVolumes:
    # For sanity reasons, the actual PGDATA and wal directory will be subdirectories of the Volume mounts,
    # this allows Patroni/a human/an automated operator to move directories during bootstrap, which cannot
    # be done if we did not use subdirectories
    # https://www.postgresql.org/docs/current/creating-cluster.html#CREATING-CLUSTER-MOUNT-POINTS
    data:
      enabled: true
      size: 2Gi
      ## database data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      subPath: ""
      mountPath: "/var/lib/postgresql"
      annotations: {}
      accessModes:
        - ReadWriteOnce
    # WAL will be a subdirectory of the data volume, which means enabling a separate
    # volume for the WAL files should just work for new pods.
    wal:
      enabled: true
      size: 1Gi
      subPath: ""
      storageClass:
      # When changing this mountPath ensure you also change the following key to reflect this:
      # patroni.postgresql.basebackup.[].waldir
      mountPath: "/var/lib/postgresql/wal"
      annotations: {}
      accessModes:
        - ReadWriteOnce
      # Any tablespace mentioned here requires a volume that will be associated with it.
      # tablespaces:
      # example1:
      #   size: 5Gi
      #   storageClass: gp2
      # example2:
      #   size: 5Gi
      #   storageClass: gp2

  # EXPERIMENTAL, please do *not* enable on production environments
  # if enabled, fullWalPrevention will switch the default transaction mode from read write
  # to read only if thresholds are breached.
  fullWalPrevention:
    enabled: false
    checkFrequency: 30
    # To prevent the default transaction mode from switching constantly, we have separate
    # thresholds for switching to read-only and read-write
    thresholds:
      readOnlyFreePercent: 5
      readOnlyFreeMB: 64
      readWriteFreePercent: 8
      readWriteFreeMB: 128

  resources: {}
    # If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
  #   memory: 128Mi

  sharedMemory:
    # By default Kubernetes only provides 64MB to /dev/shm
    # /dev/shm is only used by PostgreSQL for work_mem for parallel workers,
    # so most will not run into this issue.
    # https://github.com/kubernetes/kubernetes/issues/28272
    #
    # If you do however run into:
    #
    #   SQLSTATE 53100
    #   ERROR:  could not resize shared memory segment "/PostgreSQL.12345" to 4194304 bytes:
    #   No space left on device
    #
    # you may wish to use a mount to Memory, by setting useMount to true
    useMount: false

  # timescaledb-tune will be run with the Pod resources requests or - if not set - its limits.
  # This should give a reasonably tuned PostgreSQL instance.
  # Any PostgreSQL parameter that is explicitly set in the Patroni configuration will override
  # the auto-tuned variables.
  timescaledbTune:
    enabled: true
    # For full flexibility, we allow you to override any timescaledb-tune parameter below.
    # However, these parameters only take effect on newly scheduled pods and their settings are
    # only visibible inside those new pods.
    # Therefore you probably want to set explicit overrides in patroni.bootstrap.dcs.postgresql.parameters,
    # as those will take effect as soon as possible.
    # https://github.com/timescale/timescaledb-tune
    args: {}
      # max-conns: 120
      # cpus: 5
    # memory: 4GB

  # pgBouncer does connection pooling for PostgreSQL
  # https://www.pgbouncer.org/
  # enabling pgBouncer will run an extra container in every Pod, serving a pgBouncer
  # pass-through instance
  pgBouncer:
    enabled: false
    port: 6432
    config:
      # DANGER: The below settings are considered to be safe to set, and we recommend
      # you do set these to appropriate values for you.
      # However, for flexibility, we do allow the override of any pg_bouncer setting
      # many of which are vital to the operation of this helm chart.
      # The values we do not suggest altering are set in the template
      # https://github.com/timescale/timescaledb-kubernetes/blob/master/charts/timescaledb-single/templates/configmap-pgbouncer.yaml#L35-L50
      # Only override these settings if you are confident of  what you are doing.
      server_reset_query: DISCARD ALL
      max_client_conn: 500
      default_pool_size: 12
      pool_mode: transaction
    pg_hba:
      - local     all postgres                   peer
      - host      all postgres,standby 0.0.0.0/0 reject
      - host      all postgres,standby ::0/0     reject
      - hostssl   all all              0.0.0.0/0 md5
      - hostssl   all all              ::0/0     md5
      - hostnossl all all              0.0.0.0/0 reject
      - hostnossl all all              ::0/0     reject
    # Secret should contain user/password pairs in the format expected by pgbouncer
    # https://www.pgbouncer.org/config.html#authentication-file-format
    # example:
    # userlist.txt: |
    #   "username" "hashedpassword"
    #   "username2" "hashedpassword2"
    userListSecretName:

  networkPolicy:
    enabled: false
    prometheusApp: prometheus
    # Below you can specify a whitelist of Ingress rules, for more information:
    # https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource
    ingress:
    # - from:
    #   - podSelector:
    #       matchLabels:
    #         app: foo
    #   ports:
    #   - protocol: TCP
    #       port: 11111

  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  # Prometheus exporter for PostgreSQL server metrics.
  # https://github.com/wrouesnel/postgres_exporter
  prometheus:
    enabled: false
    # Extra custom environment variables for prometheus.
    # These should be an EnvVar, as this allows you to inject secrets into the environment
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#envvar-v1-core
    env:
    # - name: NOT_A_SECRET
    #   value: "test"
    # - name: MYAPPLICATION_STANDBY_PASSWORDS
    #   valueFrom:
    #     secretKeyRef:
    #       name: myapplication-passwords
    #       key: standby
    # Additional volumes for prometheus, e.g., to support additional queries.
    # These should be a Volume, as this allows you to inject any kind of Volume
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#volume-v1-core
    volumes:
    # - name: exporter-config
    #   configMap:
    #     name: exporter-prometheus
    #     items:
    #       - key: metrics_queries
    #         path: queries.yaml
    # Additional volume mounts, to be used in conjunction with the above variable.
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#volumemount-v1-core
    volumeMounts:
    # - name: exporter-config
    #   mountPath: /var/exporter

  # For new deployments, we would advise Parallel here, however as that change breaks previous
  # deployments, it is set to OrderedReady here
  podManagementPolicy: OrderedReady

  # Annotations that are applied to each pod in the stateful set
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}

  # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinityTemplate: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchLabels:
              app: {{ template "timescaledb.fullname" . }}
              release: {{ .Release.Name | quote }}
              cluster-name: {{ template "clusterName" . }}
      - weight: 50
        podAffinityTerm:
          topologyKey: failure-domain.beta.kubernetes.io/zone
          labelSelector:
            matchLabels:
              app: {{ template "timescaledb.fullname" . }}
              release: {{ .Release.Name | quote }}
              cluster-name: {{ template "clusterName" . }}
  affinity: {}

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  rbac:
    # Specifies whether RBAC resources should be created
    create: true

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  # Setting unsafe to true will generate some random credentials. This is meant
  # for development or first evaluation of the Helm Charts. It should *not* be
  # used for anything beyong the evaluation phase.
  unsafe: false

  debug:
    # This setting is mainly for during development, debugging or troubleshooting.
    # This command will be executed *before* the main container starts. In the
    # example below, we can mimick a slow restore by sleeping for 5 minutes before starting
    execStartPre:  # sleep 300

### grafana ###
grafana:
  rbac:
    create: true
    ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
    # useExistingRole: name-of-some-(cluster)role
    pspEnabled: true
    pspUseAppArmor: true
    namespaced: false
    extraRoleRules: []
    # - apiGroups: []
    #   resources: []
    #   verbs: []
    extraClusterRoleRules: []
    # - apiGroups: []
    #   resources: []
    #   verbs: []
  serviceAccount:
    create: true
    name:
    nameTest:
  #  annotations:
  #    eks.amazonaws.com/role-arn: arn:aws:iam::123456789000:role/iam-role-name-here

  replicas: 1

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget:
    minAvailable: 1
  #  maxUnavailable: 1

  ## See `kubectl explain deployment.spec.strategy` for more
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  deploymentStrategy:
    type: RollingUpdate

  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000

  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 10

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName: "default-scheduler"

  image:

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  testFramework:
    enabled: false

  securityContext:
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472

  containerSecurityContext:
    {}

  extraConfigmapMounts: []
    # - name: certs-configmap
    #   mountPath: /etc/grafana/ssl/
    #   subPath: certificates.crt # (optional)
    #   configMap: certs-configmap
  #   readOnly: true


  extraEmptyDirMounts: []
    # - name: provisioning-notifiers
  #   mountPath: /etc/grafana/provisioning/notifiers


  # Apply extra labels to common labels.
  extraLabels: {}

  ## Assign a PriorityClassName to pods if set
  # priorityClassName:

  downloadDashboards:
    env: {}
    envFromSecret: ""
    resources: {}

  ## Pod Annotations
  # podAnnotations: {}

  ## Pod Labels
  # podLabels: {}

  podPortName: grafana

  ## Deployment annotations
  # annotations: {}

  ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: LoadBalancer
    port: 8080
    targetPort: 3000
    # targetPort: 4181 To be used with a proxy extraContainer
    annotations: {}
    labels: {}
    portName: service

  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: false
    path: /metrics
    #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
    labels: {}
    interval: 1m
    scheme: http
    tlsConfig: {}
    scrapeTimeout: 30s
    relabelings: []

  extraExposePorts: []
    # - name: keycloak
    #   port: 8080
    #   targetPort: 8080
  #   type: ClusterIP

  # overrides pod.spec.hostAliases in the grafana deployment's pods
  hostAliases: []
    # - ip: "1.2.3.4"
    #   hostnames:
  #     - "my.host.com"

  ingress:
    enabled: false
    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx
    # Values can be templated
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    labels: {}
    path: /

    # pathType is only for k8s > 1.19
    pathType: Prefix

    hosts:
      - chart-example.local
    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    ## Or for k8s > 1.19
    # - path: /*
    #   pathType: Prefix
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: service


    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  extraInitContainers:
    - args:
        - mkdir -p /var/lib/grafana/plugins && wget -O /var/lib/grafana/umh-datasource.zip "https://github.com/united-manufacturing-hub/united-manufacturing-hub-datasource/releases/latest/download/umh-datasource.zip" && unzip -n /var/lib/grafana/umh-datasource.zip -d /var/lib/grafana/plugins/ && wget -O /var/lib/grafana/umh-factoryinput-panel.zip "https://github.com/united-manufacturing-hub/umh-factoryinput-panel/releases/latest/download/umh-factoryinput-panel.zip" && unzip -n /var/lib/grafana/umh-factoryinput-panel.zip -d /var/lib/grafana/plugins/
      command:
        - /bin/sh
        - -c
      image: busybox
      imagePullPolicy: IfNotPresent
      name: init-umh-datasource
      volumeMounts:
        - mountPath: /var/lib/grafana
          name: storage

          # subPath: ia-factoryinsight-datasource.zip
  ## Enable an Specify container in extraContainers. This is meant to allow adding an authentication proxy to a grafana pod
  extraContainers: |
  # - name: proxy
  #   image: quay.io/gambol99/keycloak-proxy:latest
  #   args:
  #   - -provider=github
  #   - -client-id=
  #   - -client-secret=
  #   - -github-org=<ORG_NAME>
  #   - -email-domain=*
  #   - -cookie-secret=
  #   - -http-address=http://0.0.0.0:4181
  #   - -upstream-url=http://127.0.0.1:3000
  #   ports:
  #     - name: proxy-web
  #       containerPort: 4181


  ## Enable persistence using Persistent Volume Claims0
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    type: pvc
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    # annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    # selectorLabels: {}
    # subPath: ""
    # existingClaim:

    ## If persistence is not enabled, this allows to mount the
    ## local storage in-memory to improve performance
    ##
    inMemory:
      enabled: false
      ## The maximum usage on memory medium EmptyDir would be
      ## the minimum value between the SizeLimit specified
      ## here and the sum of memory limits of all containers in a pod
      ##
      # sizeLimit: 300Mi

  initChownData:
    ## If false, data ownership will not be reset at startup
    ## This allows the prometheus-server to be run with an arbitrary user
    ##
    enabled: true


    ## initChownData resource requests and limits
    ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: {}
    #  limits:
    #    cpu: 100m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 128Mi


  # Administrator credentials when not using an existing secret (see below)
  adminUser: admin
  # adminPassword: strongpassword

  # Use an existing secret for the admin user.
  admin:
    existingSecret: "grafana-secret"
    userKey: adminuser
    passwordKey: adminpassword

  ## Define command to be executed at startup by grafana container
  ## Needed if using `vault-env` to manage secrets (ref: https://banzaicloud.com/blog/inject-secrets-into-pods-vault/)
  ## Default is "run.sh" as defined in grafana's Dockerfile
  # command:
  # - "sh"
  # - "/run.sh"

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Extra environment variables that will be pass onto deployment pods
  ##
  ## to provide grafana with access to CloudWatch on AWS EKS:
  ## 1. create an iam role of type "Web identity" with provider oidc.eks.* (note the provider for later)
  ## 2. edit the "Trust relationships" of the role, add a line inside the StringEquals clause using the
  ## same oidc eks provider as noted before (same as the existing line)
  ## also, replace NAMESPACE and prometheus-operator-grafana with the service account namespace and name
  ##
  ##  "oidc.eks.us-east-1.amazonaws.com/id/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:sub": "system:serviceaccount:NAMESPACE:prometheus-operator-grafana",
  ##
  ## 3. attach a policy to the role, you can use a built in policy called CloudWatchReadOnlyAccess
  ## 4. use the following env: (replace 123456789000 and iam-role-name-here with your aws account number and role name)
  ##
  ## env:
  ##   AWS_ROLE_ARN: arn:aws:iam::123456789000:role/iam-role-name-here
  ##   AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
  ##   AWS_REGION: us-east-1
  ##
  ## 5. uncomment the EKS section in extraSecretMounts: below
  ## 6. uncomment the annotation section in the serviceAccount: above
  ## make sure to replace arn:aws:iam::123456789000:role/iam-role-name-here with your role arn

  env:
    GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: umh-datasource,umh-factoryinput-panel

  ## "valueFrom" environment variable references that will be added to deployment pods
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#envvarsource-v1-core
  ## Renders in container spec as:
  ##   env:
  ##     ...
  ##     - name: <key>
  ##       valueFrom:
  ##         <value rendered as YAML>
  envValueFrom:
    FACTORYINSIGHT_BASEURL:
      secretKeyRef:
        name: factoryinsight-secret
        key: baseURL
    FACTORYINSIGHT_APIKEY:
      secretKeyRef:
        name: factoryinsight-secret
        key: apiKey
    FACTORYINSIGHT_CUSTOMERID:
      secretKeyRef:
        name: factoryinsight-secret
        key: customerID
    FACTORYINSIGHT_PASSWORD:
      secretKeyRef:
        name: factoryinsight-secret
        key: password


  ## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
  ## This can be useful for auth tokens, etc. Value is templated.
  envFromSecret: ""

  ## Sensible environment variables that will be rendered as new secret object
  ## This can be useful for auth tokens, etc
  envRenderSecret: {}

  ## Additional grafana server secret mounts
  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
  extraSecretMounts: []
    # - name: secret-files
    #   mountPath: /etc/secrets
    #   secretName: grafana-secret-files
    #   readOnly: true
    #   subPath: ""
    #
    # for AWS EKS (cloudwatch) use the following (see also instruction in env: above)
    # - name: aws-iam-token
    #   mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
    #   readOnly: true
    #   projected:
    #     defaultMode: 420
    #     sources:
    #       - serviceAccountToken:
    #           audience: sts.amazonaws.com
    #           expirationSeconds: 86400
    #           path: token
    #
    # for CSI e.g. Azure Key Vault use the following
    # - name: secrets-store-inline
    #  mountPath: /run/secrets
    #  readOnly: true
    #  csi:
    #    driver: secrets-store.csi.k8s.io
    #    readOnly: true
    #    volumeAttributes:
    #      secretProviderClass: "akv-grafana-spc"
    #    nodePublishSecretRef:                       # Only required when using service principal mode
  #       name: grafana-akv-creds                  # Only required when using service principal mode

  ## Additional grafana server volume mounts
  # Defines additional volume mounts.
  extraVolumeMounts: []
    # - name: extra-volume-0
    #   mountPath: /mnt/volume0
    #   readOnly: true
    #   existingClaim: volume-claim
    # - name: extra-volume-1
    #   mountPath: /mnt/volume1
    #   readOnly: true
  #   hostPath: /usr/shared/

  ## Pass the plugins you want installed as a list.
  ##
  plugins:
    - grafana-worldmap-panel
    - grafana-piechart-panel
    - aceiot-svg-panel
    - grafana-worldmap-panel
    - natel-discrete-panel
    - isaozler-paretochart-panel
    - williamvenner-timepickerbuttons-panel
    - agenty-flowcharting-panel
    - marcusolsson-dynamictext-panel
    - factry-untimely-panel
    - cloudspout-button-panel

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        # <string, required> name of the datasource. Required
        - name: umh-datasource
          # <string, required> datasource type. Required
          type: umh-datasource
          # <string, required> access mode. proxy or direct (Server or Browser in the UI). Required
          access: proxy
          # <int> org id. will default to orgId 1 if not specified
          orgId: 1
          url: "http://united-manufacturing-hub-factoryinsight-service/"
          # <string> custom UID which can be used to reference this datasource in other parts of the configuration, if not specified will be generated automatically
          jsonData:
            customerId: $FACTORYINSIGHT_CUSTOMERID
            apiKey: $FACTORYINSIGHT_PASSWORD
            serverURL: "http://united-manufacturing-hub-factoryinsight-service/"
            apiKeyConfigured: true
          version: 1
          # <bool> allow users to edit datasources from the UI.
          isDefault: true
          editable: false

  ## Configure notifiers
  ## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
  ##
  notifiers: {}
  #  notifiers.yaml:
  #    notifiers:
  #    - name: email-notifier
  #      type: email
  #      uid: email1
  #      # either:
  #      org_id: 1
  #      # or
  #      org_name: Main Org.
  #      is_default: true
  #      settings:
  #        addresses: an_email_address@example.com
  #    delete_notifiers:

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders: {}
  #  dashboardproviders.yaml:
  #    apiVersion: 1
  #    providers:
  #    - name: 'default'
  #      orgId: 1
  #      folder: ''
  #      type: file
  #      disableDeletion: false
  #      editable: true
  #      options:
  #        path: /var/lib/grafana/dashboards/default

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  ## dashboards per provider, use provider name as key.
  ##
  dashboards: {}
    # default:
    #   some-dashboard:
    #     json: |
    #       $RAW_JSON
    #   custom-dashboard:
    #     file: dashboards/custom-dashboard.json
    #   prometheus-stats:
    #     gnetId: 2
    #     revision: 2
    #     datasource: Prometheus
    #   local-dashboard:
    #     url: https://example.com/repository/test.json
    #     token: ''
    #   local-dashboard-base64:
    #     url: https://example.com/repository/test-b64.json
    #     token: ''
  #     b64content: true

  ## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
  ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
  ## ConfigMap data example:
  ##
  ## data:
  ##   example-dashboard.json: |
  ##     RAW_JSON
  ##
  dashboardsConfigMaps: {}
  #  default: ""

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    database:
      host: united-manufacturing-hub
      user: "grafana"
      name: "grafana"
      password: "changeme"
      ssl_mode: require
      type: postgres
        ## grafana Authentication can be enabled with the following values on grafana.ini
        # server:
      # The full public facing url you use in browser, used for redirects and emails
    #    root_url:
    # https://grafana.com/docs/grafana/latest/auth/github/#enable-github-in-grafana
    # auth.github:
    #    enabled: false
    #    allow_sign_up: false
    #    scopes: user:email,read:org
    #    auth_url: https://github.com/login/oauth/authorize
    #    token_url: https://github.com/login/oauth/access_token
    #    api_url: https://api.github.com/user
    #    team_ids:
    #    allowed_organizations:
    #    client_id:
    #    client_secret:
    ## LDAP Authentication can be enabled with the following values on grafana.ini
    ## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
    # auth.ldap:
    #   enabled: true
    #   allow_sign_up: true
    #   config_file: /etc/grafana/ldap.toml

  ## Grafana's LDAP configuration
  ## Templated by the template in _helpers.tpl
  ## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
  ## ref: http://docs.grafana.org/installation/ldap/#configuration
  ldap:
    enabled: false
    # `existingSecret` is a reference to an existing secret containing the ldap configuration
    # for Grafana in a key `ldap-toml`.
    existingSecret: ""
    # `config` is the content of `ldap.toml` that will be stored in the created secret
    config: ""
    # config: |-
    #   verbose_logging = true

    #   [[servers]]
    #   host = "my-ldap-server"
    #   port = 636
    #   use_ssl = true
    #   start_tls = false
    #   ssl_skip_verify = false
    #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  smtp:
    # `existingSecret` is a reference to an existing secret containing the smtp configuration
    # for Grafana.
    existingSecret: ""
    userKey: "user"
    passwordKey: "password"

  ## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
  ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
  sidecar:
    imagePullPolicy: IfNotPresent
    resources: {}
    #   limits:
    #     cpu: 100m
    #     memory: 100Mi
    #   requests:
    #     cpu: 50m
    #     memory: 50Mi
    # skipTlsVerify Set to true to skip tls verification for kube api calls
    # skipTlsVerify: true
    enableUniqueFilenames: false
    dashboards:
      enabled: false
      SCProvider: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
      # value of label that the configmaps with dashboards are set to
      labelValue: null
      # folder in the pod that should hold the collected dashboards (unless `defaultFolderName` is set)
      folder: /tmp/dashboards
      # The default folder name, it will create a subfolder under the `folder` and put dashboards in there instead
      defaultFolderName: null
      # If specified, the sidecar will search for dashboard config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
      # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
      # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
      folderAnnotation: null
      # provider configuration that lets grafana manage the dashboards
      provider:
        # name of the provider, should be unique
        name: sidecarProvider
        # orgid as configured in grafana
        orgid: 1
        # folder in which the dashboards should be imported in grafana
        folder: ''
        # type of the provider
        type: file
        # disableDelete to activate a import-only behaviour
        disableDelete: false
        # allow updating provisioned dashboards from the UI
        allowUiUpdates: false
        # allow Grafana to replicate dashboard structure from filesystem
        foldersFromFilesStructure: false
    datasources:
      enabled: false
      # label that the configmaps with datasources are marked with
      label: grafana_datasource
      # value of label that the configmaps with datasources are set to
      labelValue: null
      # If specified, the sidecar will search for datasource config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
    notifiers:
      enabled: false
      # label that the configmaps with notifiers are marked with
      label: grafana_notifier
      # If specified, the sidecar will search for notifier config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null

  ## Override the deployment namespace
  ##
  namespaceOverride: ""

  ## Number of old ReplicaSets to retain
  ##
  revisionHistoryLimit: 10

  ## Add a seperate remote image renderer deployment/service
  imageRenderer:
    # Enable the image-renderer deployment & service
    enabled: false
    replicas: 1
    # extra environment variables
    env:
      HTTP_HOST: "0.0.0.0"
      # RENDERING_ARGS: --disable-gpu,--window-size=1280x758
      # RENDERING_MODE: clustered
    # image-renderer deployment serviceAccount
    serviceAccountName: ""
    # image-renderer deployment securityContext
    securityContext: {}
    # image-renderer deployment Host Aliases
    hostAliases: []
    # image-renderer deployment priority class
    priorityClassName: ''
    service:
      # image-renderer service port name
      portName: 'http'
      # image-renderer service port used by both service and deployment
      port: 8081
      targetPort: 8081
    # In case a sub_path is used this needs to be added to the image renderer callback
    grafanaSubPath: ""
    # name of the image-renderer port on the pod
    podPortName: http
    # number of image-renderer replica sets to keep
    revisionHistoryLimit: 10
    networkPolicy:
      # Enable a NetworkPolicy to limit inbound traffic to only the created grafana pods
      limitIngress: true
      # Enable a NetworkPolicy to limit outbound traffic to only the created grafana pods
      limitEgress: false
    resources: {}
  #   limits:
  #     cpu: 100m
  #     memory: 100Mi
  #   requests:
  #     cpu: 50m
  #     memory: 50Mi

### kowl ###
kowl:
  enabled: false
  kowl:
    config:
      kafka:
        brokers:
          - united-manufacturing-hub-kafka:9092


### mqtt-kafka-bridge ###
mqttkafkabridge:
  enabled: false
  image:
    repository: unitedmanufacturinghub/mqtt-kafka-bridge
    pullPolicy: IfNotPresent
  pdb:
    enabled: true
    minAvailable: 1

### kafka-to-blob ###
kafkatoblob:
  enabled: false
  image:
    repository: unitedmanufacturinghub/kafka-to-blob
    pullPolicy: IfNotPresent
  replicas: 1
  pdb:
    enabled: true
    minAvailable: 1

##### CONFIG FOR APACHE KAFKA #####
kafka:
  replicas: 1
  storageRequest: 1Gi
  allowPlaintextListener: true
  service:
    type: ClusterIP
    ports:
      client: 9092
      internal: 9093
      external: 9094
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
  provisioning:
    enabled: false
    numPartitions: 1
    replicationFactor: 1
  zookeeper:
    enabled: true
    auth:
      enabled: false
  externalZookeeper:
    servers: []
  autoCreateTopicsEnable: true

##### CONFIG FOR REDIS #####
redis:
  cluster:
    enabled: true
    slaveCount: 1
  master:
    command: /run.sh
    extraFlags:
      - --maxmemory 4gb
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: true
      path: /data
      size: 8Gi
      subPath: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 100m
        memory: 1Gi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      ports:
        redis: 6379
      type: ClusterIP
  metrics:
    enabled: true
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    serviceMonitor:
      enabled: false
  networkPolicy:
    enabled: false
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: true
    minAvailable: 2
  podSecurityPolicy:
    create: false
  rbac:
    create: false
    role:
      rules: []
  sentinel:
    downAfterMilliseconds: 1000
    enabled: true
    failoverTimeout: 18000
    initialCheckTimeout: 5
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    containerPorts:
      sentinel: 26379
    preExecCmds: ""
    quorum: 1
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      labels: {}
      redisPort: 6379
      sentinelPort: 26379
      type: ClusterIP
  serviceAccount:
    create: false
  replica:
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: true
      path: /data
      size: 8Gi
      subPath: ""
    containerPorts:
      redis: 6379
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 100m
        memory: 1Gi
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      ports:
        redis: 6379
      type: ClusterIP
    shareProcessNamespace: false
    updateStrategy:
      type: RollingUpdate
  sysctl:
    enabled: false
  tls:
    authClients: true
    enabled: false
  auth:
    enabled: true
    usePasswordFiles: false
    existingSecret: redis-secret
    existingSecretPasswordKey: redispassword
  volumePermissions:
    enabled: false


##### CONFIG FOR VERNEMQ #####
vernemq:
  additionalEnv:
    - name: DOCKER_VERNEMQ_ALLOW_REGISTER_DURING_NETSPLIT
      value: "on"
    - name: DOCKER_VERNEMQ_ALLOW_PUBLISH_DURING_NETSPLIT
      value: "on"
    - name: DOCKER_VERNEMQ_ALLOW_SUBSCRIBE_DURING_NETSPLIT
      value: "on"
    - name: DOCKER_VERNEMQ_ALLOW_UNSUBSCRIBE_DURING_NETSPLIT
      value: "on"
    - name: DOCKER_VERNEMQ_ALLOW_ANONYMOUS
      value: "on"
    - name: DOCKER_VERNEMQ_MAX_ONLINE_MESSAGES
      value: "-1"
    - name: DOCKER_VERNEMQ_MAX_OFFLINE_MESSAGES
      value: "-1"
    - name: DOCKER_VERNEMQ_LISTENER__SSL__CAFILE
      value: /etc/ssl/vernemq/ca.crt
    - name: DOCKER_VERNEMQ_LISTENER__SSL__CERTFILE
      value: /etc/ssl/vernemq/tls.crt
    - name: DOCKER_VERNEMQ_LISTENER__SSL__KEYFILE
      value: /etc/ssl/vernemq/tls.key
    - name: DOCKER_VERNEMQ_ACCEPT_EULA
      value: "yes"
    - name: DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__USE_IDENTITY_AS_USERNAME
      value: "on"
    - name: DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__REQUIRE_CERTIFICATE
      value: "on"
  extraVolumeMounts:
    - mountPath: /vernemq/etc/vmq.acl
      name: vernemq-acl
      readOnly: true
      subPath: vernemq-acl
  extraVolumes:
    - configMap:
        name: vernemq-acl
      name: vernemq-acl
  fullnameOverride: ""
  ingress:
    annotations: {}
    enabled: false
    hosts: []
    labels: {}
    paths:
      - /
    tls: []
  nameOverride: ""
  nodeSelector: {}
  pdb:
    enabled: true
    minAvailable: 1
  persistentVolume:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: false
    size: 5Gi
  podAntiAffinity: soft
  rbac:
    create: true
    serviceAccount:
      create: true
  replicaCount: 1
  resources: {}
  secretMounts:
    - name: vernemq-certificates
      path: /etc/ssl/vernemq
      secretName: vernemq-certificates-secret
  securityContext:
    fsGroup: 10000
    runAsGroup: 10000
    runAsUser: 10000
  service:
    annotations:
      prometheus.io/port: "8888"
      prometheus.io/scrape: "true"
    labels: {}
    mqtt:
      enabled: true
      nodePort: 1883
      port: 1883
    mqtts:
      enabled: true
      nodePort: 8883
      port: 8883
    type: LoadBalancer
    ws:
      enabled: false
      nodePort: 8080
      port: 8080
    wss:
      enabled: false
      nodePort: 8443
      port: 8443
  serviceMonitor:
    create: false
  statefulset:
    annotations: {}
    labels: {}
    lifecycle: {}
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    podAnnotations: {}
    podManagementPolicy: OrderedReady
    prometheus.io/port: "8888"
    prometheus.io/scrape: "true"
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 90
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 60
    updateStrategy: RollingUpdate
  tolerations: []
