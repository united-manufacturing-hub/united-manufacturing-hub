name: Run and Test kafka-to-postgresql-v2

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create Docker Network
        run: docker network create my_network

      - name: Start PostgreSQL
        run: |
          docker run -d --name=postgres --network=my_network \
          -e POSTGRES_USER=youruser \
          -e POSTGRES_PASSWORD=yourpassword \
          -e POSTGRES_DB=yourdb \
          postgres:latest

      - name: Start Redpanda
        run: |
          docker run -d --name=redpanda-1 --network=my_network --rm \
          -p 8081:8081 \
          -p 8082:8082 \
          -p 9092:9092 \
          -p 9644:9644 \
          docker.redpanda.com/redpandadata/redpanda:latest \
          redpanda start \
          --overprovisioned \
          --smp 1  \
          --memory 1G \
          --reserve-memory 0M \
          --node-id 0 \
          --check=false

      # Build the Docker image
      - name: Build Docker Image
        run: docker build -t kafka-to-postgresql-v2:latest -f ./deployment/kafka-to-postgresql-v2/Dockerfile .

      # Wait for 5 seconds (give redpanda some time)
      - name: Wait for 5 seconds
        run: sleep 5

      # Run the Docker image
      - name: Run Docker Image
        run: |
          docker run -d --name=kafka-to-postgresql-v2-1 --network=my_network \
          -e POSTGRES_HOST=postgres \
          -e POSTGRES_PORT=5432 \
          -e POSTGRES_USER=youruser \
          -e POSTGRES_PASSWORD=yourpassword \
          -e POSTGRES_DATABASE=yourdb \
          -e POSTGRES_SSL_MODE=disable \
          -e KAFKA_BROKERS=redpanda-1:9092 \
          -e KAFKA_HTTP_BROKERS=redpanda-1:8082 \
          kafka-to-postgresql-v2:latest

      # Install Redpanda tool (rpk)
      - name: Install Redpanda Tool
        run: |
          cd /tmp
          curl -fL https://github.com/redpanda-data/redpanda/releases/latest/download/rpk-linux-amd64.zip -o rpk.zip
          unzip -o rpk.zip
          chmod +x rpk
          sudo mv rpk /usr/bin

      # Get ip of kafka
      - name: Get Redpanda IP Address
        id: redpanda_ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' redpanda-1)
          echo "REDPANDA_IP=$IP" >> $GITHUB_ENV

      # Send message to Kafka
      - name: Use Redpanda IP with rpk
        run: |
          echo "Redpanda IP: ${{ env.REDPANDA_IP }}"
          /usr/bin/rpk topic create umh.v1.test._historian --brokers ${{ env.REDPANDA_IP }}:9092
          (echo '{"timestamp_ms": 1, "hello":"world"}' & sleep 2; kill -INT $!) | /usr/bin/rpk topic produce umh.v1.test._historian --brokers ${{ env.REDPANDA_IP }}:9092 &

      # Wait for 10 seconds
      - name: Wait for 10 seconds
        run: sleep 10

      # Check for entries in the tag table
      - name: Check Database
        env:
          PGPASSWORD: yourpassword
        run: |
          docker exec postgres psql -U youruser -d yourdb -c "SELECT * FROM tag;"
          docker exec postgres psql -U youruser -d yourdb -c "SELECT * FROM tag_string;"
          docker exec postgres psql -U youruser -d yourdb -c "SELECT * FROM asset;"

      # Teardown, allowing for repeated local testing
      - name: Teardown
        if: always()
        run: |
          echo "Logging and stopping redpanda"
          #docker logs redpanda-1
          docker stop redpanda-1
                    
          echo "Logging and stopping postgres"          
          #docker logs $(docker ps -q --filter ancestor=postgres:latest)
          docker stop $(docker ps -q --filter ancestor=postgres:latest)
          
          echo "Logging and stopping kafka-to-postgresql-v2"
          #docker logs kafka-to-postgresql-v2-1
          docker stop kafka-to-postgresql-v2-1
          
          docker container prune -f
          docker volume prune -f
          docker system prune -f