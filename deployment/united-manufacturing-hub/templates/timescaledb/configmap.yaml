# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
{{if .Values.tags.classic }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: timescale-post-init
  labels:
    {{- include "united-manufacturing-hub.labels.common" . | nindent 4}}
    {{- include "united-manufacturing-hub.labels.timescaledb" . | nindent 4}}
data:
  0_create_dbs.sh: |-
    #!/bin/bash
    psql -d "$1" <<__SQL__

    CREATE USER {{index .Values "grafana" "grafana.ini" "database" "user"}};
    CREATE DATABASE {{index .Values "grafana" "grafana.ini" "database" "name"}} OWNER {{index .Values "grafana" "grafana.ini" "database" "user"}};
    GRANT ALL PRIVILEGES ON DATABASE {{index .Values "grafana" "grafana.ini" "database" "name"}} TO {{index .Values "grafana" "grafana.ini" "database" "user"}};
    \c {{index .Values "grafana" "grafana.ini" "database" "name"}}
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{index .Values "grafana" "grafana.ini" "database" "user"}};
    
    CREATE USER factoryinsight;
    CREATE DATABASE factoryinsight OWNER factoryinsight;
    GRANT ALL PRIVILEGES ON DATABASE factoryinsight TO factoryinsight;

    \c factoryinsight

    -- Extend the database with TimescaleDB
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;

    -- Enable pg_stat_statements plugin for observability;
    CREATE EXTENSION IF NOT EXISTS pg_stat_statements CASCADE;

    -------------------- Table with all assets --------------------
    CREATE TABLE IF NOT EXISTS assetTable
    (
        id SERIAL PRIMARY KEY,
        assetID TEXT NOT NULL,
        location TEXT NOT NULL,
        customer TEXT NOT NULL,
        unique (assetID, location, customer)
    );

    -------------------- TimescaleDB table for states --------------------
    CREATE TABLE IF NOT EXISTS stateTable
    (
        timestamp                TIMESTAMPTZ                         NOT NULL,
        asset_id            SERIAL REFERENCES assetTable (id),
        state INTEGER CHECK (state >= 0),
        UNIQUE(timestamp, asset_id)
    );
    -- creating hypertable
    SELECT create_hypertable('stateTable', 'timestamp', if_not_exists => TRUE);;

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON stateTable (asset_id, timestamp DESC);

    -------------------- TimescaleDB table for counts --------------------
    CREATE TABLE IF NOT EXISTS countTable
    (
        timestamp                TIMESTAMPTZ                         NOT NULL,
        asset_id            SERIAL REFERENCES assetTable (id),
        count INTEGER CHECK (count > 0),
        UNIQUE(timestamp, asset_id)
    );
    -- creating hypertable
    SELECT create_hypertable('countTable', 'timestamp', if_not_exists => TRUE);;

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON countTable (asset_id, timestamp DESC);

    -------------------- TimescaleDB table for process values --------------------
    CREATE TABLE IF NOT EXISTS processValueTable
    (
        timestamp               TIMESTAMPTZ                         NOT NULL,
        asset_id                SERIAL                              REFERENCES assetTable (id),
        valueName               TEXT                                NOT NULL,
        value                   DOUBLE PRECISION                    NULL,
        UNIQUE(timestamp, asset_id, valueName)
    );
    -- creating hypertable
    SELECT create_hypertable('processValueTable', 'timestamp', if_not_exists => TRUE);;

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON processValueTable (asset_id, timestamp DESC);

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON processValueTable (valuename);

    -- create an index to increase performance
    CREATE INDEX IF NOT EXISTS ON processvaluetable(valuename, asset_id) WITH (timescaledb.transaction_per_chunk);

    -------------------- TimescaleDB table for uniqueProduct --------------------
    CREATE TABLE IF NOT EXISTS uniqueProductTable
    (
        uid TEXT NOT NULL,
        asset_id            SERIAL REFERENCES assetTable (id),
        begin_timestamp_ms                TIMESTAMPTZ NOT NULL,
        end_timestamp_ms                TIMESTAMPTZ                         NOT NULL,
        product_id TEXT NOT NULL,
        is_scrap BOOLEAN NOT NULL,
        quality_class TEXT NOT NULL,
        station_id TEXT NOT NULL,
        UNIQUE(uid, asset_id, station_id),
        CHECK (begin_timestamp_ms < end_timestamp_ms)
    );

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON uniqueProductTable (asset_id, uid, station_id);


    -------------------- TimescaleDB table for recommendations  --------------------
    CREATE TABLE IF NOT EXISTS recommendationTable
    (
        uid                     TEXT                                PRIMARY KEY,
        timestamp               TIMESTAMPTZ                         NOT NULL,
        recommendationType      INTEGER                             NOT NULL,
        enabled                 BOOLEAN                             NOT NULL,
        recommendationValues    TEXT,
        diagnoseTextDE          TEXT,
        diagnoseTextEN          TEXT,
        recommendationTextDE    TEXT,
        recommendationTextEN    TEXT
    );

    -------------------- TimescaleDB table for shifts --------------------
    -- Using btree_gist to avoid overlapping shifts
    -- Source: https://gist.github.com/fphilipe/0a2a3d50a9f3834683bf
    CREATE EXTENSION btree_gist;
    CREATE TABLE IF NOT EXISTS shiftTable
    (
        id SERIAL PRIMARY KEY,
        type INTEGER,
        begin_timestamp TIMESTAMPTZ NOT NULL,
        end_timestamp TIMESTAMPTZ,
        asset_id SERIAL REFERENCES assetTable (id),
        unique (begin_timestamp, asset_id),
        CHECK (begin_timestamp < end_timestamp),
    	EXCLUDE USING gist (asset_id WITH =, tstzrange(begin_timestamp, end_timestamp) WITH &&)
    );


    -------------------- TimescaleDB table for products --------------------
    CREATE TABLE IF NOT EXISTS productTable
    (
        product_id SERIAL PRIMARY KEY,
        product_name TEXT NOT NULL,
    	asset_id SERIAL REFERENCES assetTable (id),
        time_per_unit_in_seconds REAL NOT NULL,
    	UNIQUE(product_name, asset_id),
    	CHECK (time_per_unit_in_seconds > 0)
    );

    -------------------- TimescaleDB table for orders --------------------
    CREATE TABLE IF NOT EXISTS orderTable
    (
        order_id SERIAL PRIMARY KEY,
        order_name TEXT NOT NULL,
        product_id SERIAL REFERENCES productTable (product_id),
        begin_timestamp TIMESTAMPTZ,
        end_timestamp TIMESTAMPTZ,
        target_units INTEGER,
        asset_id SERIAL REFERENCES assetTable (id),
        unique (asset_id, order_name),
        CHECK (begin_timestamp < end_timestamp),
    	CHECK (target_units > 0),
        EXCLUDE USING gist (asset_id WITH =, tstzrange(begin_timestamp, end_timestamp) WITH &&) WHERE (begin_timestamp IS NOT NULL AND end_timestamp IS NOT NULL)
    );

    -------------------- TimescaleDB table for configuration --------------------
    CREATE TABLE IF NOT EXISTS configurationTable
    (
        customer TEXT PRIMARY KEY,
        MicrostopDurationInSeconds INTEGER DEFAULT 60*2,
        IgnoreMicrostopUnderThisDurationInSeconds INTEGER DEFAULT -1, --do not apply
        MinimumRunningTimeInSeconds INTEGER DEFAULT 0, --do not apply
        ThresholdForNoShiftsConsideredBreakInSeconds INTEGER DEFAULT 60*35,
    	LowSpeedThresholdInPcsPerHour INTEGER DEFAULT -1, --do not apply
        AutomaticallyIdentifyChangeovers BOOLEAN DEFAULT true,
        LanguageCode INTEGER DEFAULT 1, -- english
    	AvailabilityLossStates INTEGER[] DEFAULT '{40000, 180000, 190000, 200000, 210000, 220000}',
        PerformanceLossStates INTEGER[] DEFAULT '{20000, 50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000, 140000, 150000}'
    );


    --- MIGRATIONS
    -- Add here your migrations

    -- #2
    ALTER TABLE configurationTable ADD IF NOT EXISTS AutomaticallyIdentifyChangeovers BOOLEAN DEFAULT true;

    -- #51 state table
    -- function called by trigger
    CREATE OR REPLACE FUNCTION rm_duplicate() RETURNS trigger AS \$rm_duplicate\$
    DECLARE
    last_state int;
    next_state int;
    BEGIN
    SELECT last(state, timestamp) INTO last_state FROM statetable WHERE asset_id = NEW.asset_id AND timestamp < NEW.timestamp;
    SELECT first(state, timestamp) INTO next_state FROM statetable WHERE asset_id = NEW.asset_id AND timestamp > NEW.timestamp;
    if last_state = NEW.state OR next_state = NEW.state THEN
    RAISE unique_violation USING MESSAGE = 'Duplicate state detected for asset_id ' || NEW.asset_id;
    END if;
    RETURN NEW;
    END;
    \$rm_duplicate\$
    LANGUAGE plpgsql;

    -- trigger before inserting
    CREATE TRIGGER rm_duplicate_trigger BEFORE INSERT ON statetable
    FOR EACH ROW
    EXECUTE FUNCTION rm_duplicate();

    -- #74
    ALTER TABLE counttable ADD IF NOT EXISTS scrap INTEGER DEFAULT 0;

    -- #297
    ALTER TABLE uniqueProductTable ADD COLUMN IF NOT EXISTS uniqueProductAlternativeID TEXT NOT NULL DEFAULT 'beforeMigration';
    ALTER TABLE uniqueProductTable DROP COLUMN IF EXISTS quality_class RESTRICT;
    ALTER TABLE uniqueProductTable DROP COLUMN IF EXISTS station_id RESTRICT;
    ALTER TABLE uniqueProductTable DROP COLUMN IF EXISTS uid CASCADE;
    ALTER TABLE uniqueProductTable ADD COLUMN IF NOT EXISTS uniqueProductID SERIAL PRIMARY KEY;
    ALTER TABLE uniqueProductTable DROP CONSTRAINT IF EXISTS uniqueproducttable_check;
    ALTER TABLE uniqueProductTable ALTER COLUMN end_timestamp_ms DROP NOT NULL;
    ALTER TABLE uniqueProductTable ALTER COLUMN product_id SET DATA TYPE INTEGER USING (product_id::integer);
    ALTER TABLE uniqueProductTable ADD CONSTRAINT productID_reference FOREIGN KEY (product_id) REFERENCES productTable (product_id);
    ALTER TABLE uniqueProductTable ALTER COLUMN  end_timestamp_ms DROP NOT NULL;
    ALTER TABLE uniqueProductTable ADD CONSTRAINT checkTimestampOrder CHECK ((begin_timestamp_ms < end_timestamp_ms) OR (end_timestamp_ms IS NULL));

    -------------------- TimescaleDB table for product tags --------------------
    CREATE TABLE IF NOT EXISTS productTagTable
    (
    timestamp               TIMESTAMPTZ                         NOT NULL,
    product_uid             SERIAL                              REFERENCES uniqueProductTable (uniqueProductID),
    valueName               TEXT                                NOT NULL,
    value                   DOUBLE PRECISION                    NOT NULL,
    UNIQUE(product_uid, valueName)
    );
    -- creating hypertable
    SELECT create_hypertable('productTagTable', 'product_uid', chunk_time_interval => 100000, if_not_exists => TRUE);;

    -------------------- TimescaleDB table for product tags strings --------------------
    CREATE TABLE IF NOT EXISTS productTagStringTable
    (
    timestamp               TIMESTAMPTZ                         NOT NULL,
    product_uid             SERIAL                              REFERENCES uniqueProductTable (uniqueProductID),
    valueName               TEXT                                NOT NULL,
    value                   TEXT                                NOT NULL,
    UNIQUE(product_uid, valueName)
    );
    -- creating hypertable
    SELECT create_hypertable('productTagStringTable', 'product_uid', chunk_time_interval => 100000, if_not_exists => TRUE);;

    -------------------- TimescaleDB table for product inheritance info --------------------
    CREATE TABLE IF NOT EXISTS productInheritanceTable
    (
    timestamp               TIMESTAMPTZ                         NOT NULL,
    parent_uid              SERIAL                              REFERENCES uniqueProductTable (uniqueProductID),
    child_uid               SERIAL                              REFERENCES uniqueProductTable (uniqueProductID),
    UNIQUE(parent_uid, child_uid)
    );
    -- creating hypertable
    CREATE INDEX IF NOT EXISTS ON productInheritanceTable (parent_uid, timestamp DESC);
    CREATE INDEX IF NOT EXISTS ON productInheritanceTable (child_uid, timestamp DESC);

    -------------------- TimescaleDB table for process values string --------------------
    CREATE TABLE IF NOT EXISTS processValueStringTable
    (
    timestamp               TIMESTAMPTZ                         NOT NULL,
    asset_id                SERIAL                              REFERENCES assetTable (id),
    valueName               TEXT                                NOT NULL,
    value                   TEXT                                NOT NULL,
    UNIQUE(timestamp, asset_id, valueName)
    );
    -- creating hypertable
    SELECT create_hypertable('processValueStringTable', 'timestamp', if_not_exists => TRUE);;
    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON processValueStringTable (asset_id, timestamp DESC);

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS ON processValueStringTable (valueName);


    -------------------- TimescaleDB table for components --------------------

    CREATE TABLE IF NOT EXISTS componenttable
    (
    id                          SERIAL                              PRIMARY KEY ,
    asset_id                    SERIAL,
    componentname               TEXT                         NOT NULL,
    CONSTRAINT componenttable_asset_id_componentname_key UNIQUE (asset_id, componentname),
    CONSTRAINT componenttable_asset_id_fkey FOREIGN KEY (asset_id)
    REFERENCES public.assettable (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    );

    -------------------- TimescaleDB table for maintenance activities --------------------
    CREATE TABLE IF NOT EXISTS maintenanceactivities
    (
    id                        SERIAL                              PRIMARY KEY,
    component_id              SERIAL,
    activitytype              integer,
    "timestamp"               TIMESTAMPTZ                         NOT NULL,
    CONSTRAINT maintenanceactivities_component_id_activitytype_timestamp_key UNIQUE (component_id, activitytype, "timestamp"),
    CONSTRAINT maintenanceactivities_component_id_fkey FOREIGN KEY (component_id)
    REFERENCES componenttable (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    );

    -------------------- TimescaleDB table for time based maintenance --------------------
    CREATE TABLE IF NOT EXISTS timebasedmaintenance
    (
    id                          SERIAL                              PRIMARY KEY ,
    component_id                SERIAL,
    activitytype integer,
    intervallinhours integer,
    CONSTRAINT timebasedmaintenance_component_id_activitytype_key UNIQUE (component_id, activitytype),
    CONSTRAINT timebasedmaintenance_component_id_fkey FOREIGN KEY (component_id)
    REFERENCES componenttable (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    );

    -- TEST DATA
    -- assetTable
    INSERT INTO assetTable(assetID,location,customer) VALUES ('testMachine', 'testLocation', 'factoryinsight');

    -- productTable
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107782',1,600);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107118',1,2946);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107793',1,7290);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107791',1,16872);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107119',1,1908);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107117',1,2946);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107829',1,478);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107823',1,2544);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107765',1,4098);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107796',1,6576);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107792',1,5112);
    INSERT INTO productTable(product_name,asset_id,time_per_unit_in_seconds) VALUES ('product107799',1,4008);

    -- orderTable
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107117,6,1,1,'2020-11-23 00:05:43+00','2020-11-23 01:25:11+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107118,2,1,1,'2020-11-23 01:25:30+00','2020-11-23 03:06:11+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107119,5,1,1,'2020-11-25 00:52:59+00','2020-11-25 01:22:29+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107765,9,1,1,'2020-11-26 00:55:42+00','2020-11-26 02:31:36+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107782,1,1,1,'2020-11-25 21:43:12+00','2020-11-26 00:02:24+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107791,4,1,1,'2020-11-26 16:23:47+00','2020-11-26 18:51:02+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107792,11,1,1,'2020-11-24 18:42:01+00','2020-11-24 21:26:21+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107793,3,1,1,'2020-11-24 22:11:28+00','2020-11-25 00:52:45+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107796,10,1,1,'2020-11-25 01:53:09+00','2020-11-25 04:37:09+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107799,12,1,1,'2020-11-26 03:40:37+00','2020-11-26 05:06:48+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107823,8,1,1,'2020-11-26 02:31:52+00','2020-11-26 03:11:37+00');
    INSERT INTO orderTable(order_name,product_id,target_units,asset_id,begin_timestamp,end_timestamp) VALUES (107829,7,1,1,'2020-11-25 18:51:15+00','2020-11-25 19:24:43+00');

    -- shiftTable
    INSERT INTO shiftTable(product_id,product_name,asset_id,time_per_unit_in_seconds) VALUES (1,'2020-11-25 05:00:00+00','2020-11-26 05:00:00+00',1);
    INSERT INTO shiftTable(product_id,product_name,asset_id,time_per_unit_in_seconds) VALUES (1,'2020-11-27 05:00:00+00','2020-11-27 21:00:00+00',1);
    INSERT INTO shiftTable(product_id,product_name,asset_id,time_per_unit_in_seconds) VALUES (1,'2020-11-28 05:00:00+00','2020-11-28 12:00:00+00',1);
    INSERT INTO shiftTable(product_id,product_name,asset_id,time_per_unit_in_seconds) VALUES (1,'2020-11-26 05:00:00+00','2020-11-27 05:00:00+00',1);
    INSERT INTO shiftTable(product_id,product_name,asset_id,time_per_unit_in_seconds) VALUES (1,'2020-11-24 05:00:00+00','2020-11-25 05:00:00+00',1);

    -- stateTable
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-25 23:59:01+00',1,40000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-25 23:59:00+00',1,10000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-25 23:58:59+00',1,40000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-25 23:58:58+00',1,10000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-25 23:58:57+00',1,40000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-25 23:58:56+00',1,10000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-26 00:01:05+00',1,40000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-26 00:01:04+00',1,10000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-26 00:01:03+00',1,40000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-26 00:01:01+00',1,10000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-26 00:00:05+00',1,40000);
    INSERT INTO stateTable(timestamp,asset_id,state) VALUES ('2020-11-26 00:00:04+00',1,10000);

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO factoryinsight;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO factoryinsight;

    ------------------------------------------------------
    -------------------- DATAMODEL V2 --------------------
    ------------------------------------------------------
    CREATE USER kafkatopostgresqlv2;
    CREATE DATABASE umh_v2 OWNER kafkatopostgresqlv2;
    GRANT ALL PRIVILEGES ON DATABASE umh_v2 TO kafkatopostgresqlv2;

    CREATE USER grafanareader;
    GRANT USAGE ON SCHEMA public TO grafanareader;

    \c umh_v2

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO kafkatopostgresqlv2;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO kafkatopostgresqlv2;

    -------------------- ASSET TABLE --------------------
    CREATE TABLE IF NOT EXISTS asset (
      id SERIAL PRIMARY KEY,
      enterprise TEXT NOT NULL,
      site TEXT DEFAULT '' NOT NULL,
      area TEXT DEFAULT '' NOT NULL,
      line TEXT DEFAULT '' NOT NULL,
      workcell TEXT DEFAULT '' NOT NULL,
      origin_id TEXT DEFAULT '' NOT NULL,
      UNIQUE (enterprise, site, area, line, workcell, origin_id)
    );

    -- Cleanup of old constraints
    ALTER TABLE asset DROP CONSTRAINT IF EXISTS asset_enterprise_key;
    ALTER TABLE asset DROP CONSTRAINT IF EXISTS asset_enterprise_site_key;
    ALTER TABLE asset DROP CONSTRAINT IF EXISTS asset_enterprise_site_area_key;
    ALTER TABLE asset DROP CONSTRAINT IF EXISTS asset_enterprise_site_area_line_key;
    ALTER TABLE asset DROP CONSTRAINT IF EXISTS asset_enterprise_site_area_line_workcell_key;

    -------------------- HISTORIAN --------------------

    -------------------- TAG TABLE --------------------
    -- This has been moved into the kafka_to_postgresq benthos worker

    -------------------- TAG STRING TABLE --------------------
    -- This has been moved into the kafka_to_postgresq benthos worker
    
    CREATE OR REPLACE FUNCTION get_asset_id(
        _enterprise text,
        _site text DEFAULT '',
        _area text DEFAULT '',
        _line text DEFAULT '',
        _workcell text DEFAULT '',
        _origin_id text DEFAULT ''
    )
    RETURNS integer AS '
    DECLARE
        result_id integer;
    BEGIN
        SELECT id INTO result_id FROM asset
        WHERE enterprise = _enterprise
        AND site = _site
        AND area = _area
        AND line = _line
        AND workcell = _workcell
        AND origin_id = _origin_id
        LIMIT 1; -- Ensure only one id is returned

        RETURN result_id;
    END;
    ' LANGUAGE plpgsql;

    GRANT EXECUTE ON FUNCTION umh_v2.public.get_asset_id(text, text, text, text, text, text) TO grafanareader;

    -- $$
    CREATE OR REPLACE FUNCTION get_asset_id_stable(
        _enterprise text,
        _site text DEFAULT '',
        _area text DEFAULT '',
        _line text DEFAULT '',
        _workcell text DEFAULT '',
        _origin_id text DEFAULT ''
    ) RETURNS integer AS '
    DECLARE
        result_id integer;
    BEGIN
        SELECT id INTO result_id FROM asset
        WHERE enterprise = _enterprise
        AND site = _site
        AND area = _area
        AND line = _line
        AND workcell = _workcell
        AND origin_id = _origin_id
        LIMIT 1;

        IF NOT FOUND THEN
            RAISE EXCEPTION ''No asset found with the given parameters'';
        END IF;

        RETURN result_id;
    END;
    ' LANGUAGE plpgsql STABLE;

    GRANT EXECUTE ON FUNCTION umh_v2.public.get_asset_id_stable(text, text, text, text, text, text) TO grafanareader;

    -- $$
    CREATE OR REPLACE FUNCTION get_asset_id_immutable(
        _enterprise text,
        _site text DEFAULT '',
        _area text DEFAULT '',
        _line text DEFAULT '',
        _workcell text DEFAULT '',
        _origin_id text DEFAULT ''
    ) RETURNS integer AS '
    DECLARE
        result_id integer;
    BEGIN
        SELECT id INTO result_id FROM asset
        WHERE enterprise = _enterprise
        AND site = _site
        AND area = _area
        AND line = _line
        AND workcell = _workcell
        AND origin_id = _origin_id
        LIMIT 1;

        IF NOT FOUND THEN
            RAISE EXCEPTION ''No asset found with the given parameters'';
        END IF;

        RETURN result_id;
    END;
    ' LANGUAGE plpgsql IMMUTABLE;

    GRANT EXECUTE ON FUNCTION umh_v2.public.get_asset_id_immutable(text, text, text, text, text, text) TO grafanareader;
    -- $$

    CREATE OR REPLACE FUNCTION get_asset_ids(
        _enterprise text,
        _site text DEFAULT '',
        _area text DEFAULT '',
        _line text DEFAULT '',
        _workcell text DEFAULT '',
        _origin_id text DEFAULT ''
    )
    RETURNS SETOF integer AS '
    BEGIN
        RETURN QUERY
        SELECT id FROM asset
        WHERE enterprise = _enterprise
        AND (_site = '''' OR site = _site)
        AND (_area = '''' OR area = _area)
        AND (_line = '''' OR line = _line)
        AND (_workcell = '''' OR workcell = _workcell)
        AND (_origin_id = '''' OR origin_id = _origin_id);
    END;
    ' LANGUAGE plpgsql;

    GRANT EXECUTE ON FUNCTION umh_v2.public.get_asset_ids(text, text, text, text, text, text) TO grafanareader;

    -- $$

    CREATE OR REPLACE FUNCTION get_asset_ids_stable(
        _enterprise text,
        _site text DEFAULT '',
        _area text DEFAULT '',
        _line text DEFAULT '',
        _workcell text DEFAULT '',
        _origin_id text DEFAULT ''
    )
    RETURNS SETOF integer AS '
    BEGIN
        RETURN QUERY
        SELECT id FROM asset
        WHERE enterprise = _enterprise
        AND (_site = '''' OR site = _site)
        AND (_area = '''' OR area = _area)
        AND (_line = '''' OR line = _line)
        AND (_workcell = '''' OR workcell = _workcell)
        AND (_origin_id = '''' OR origin_id = _origin_id);
    END;
    ' LANGUAGE plpgsql STABLE;

    GRANT EXECUTE ON FUNCTION umh_v2.public.get_asset_ids_stable(text, text, text, text, text, text) TO grafanareader;

    -------------------- ANALYTICS --------------------


    -------------------- PRODUCT TYPES TABLE --------------------
    CREATE TABLE IF NOT EXISTS product_type (
      product_type_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      external_product_type_id TEXT NOT NULL,
      cycle_time_ms INTEGER NOT NULL,
      asset_id INTEGER REFERENCES asset(id),
      CONSTRAINT external_product_asset_uniq UNIQUE (external_product_type_id, asset_id),
      CHECK (cycle_time_ms > 0)
    );

    -------------------- WORK ORDER TABLE --------------------
    CREATE EXTENSION IF NOT EXISTS btree_gist;

    -- This table stores information about manufacturing orders. The ISA-95 model defines work orders in terms of production requests.
    -- Here, each work order is linked to a specific asset and product type
    CREATE TABLE IF NOT EXISTS work_order (
      work_order_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      external_work_order_id TEXT NOT NULL,
      asset_id INTEGER NOT NULL REFERENCES asset(id),
      product_type_id INTEGER NOT NULL REFERENCES product_type(product_type_id),
      quantity INTEGER NOT NULL,
      status INTEGER NOT NULL DEFAULT 0, -- 0: planned, 1: in progress, 2: completed
      start_time TIMESTAMPTZ,
      end_time TIMESTAMPTZ,
      CONSTRAINT asset_workorder_uniq UNIQUE (asset_id, external_work_order_id),
      CHECK (quantity > 0),
      CHECK (status BETWEEN 0 AND 2),
      UNIQUE (asset_id, start_time),
      EXCLUDE USING gist (asset_id WITH =, tstzrange(start_time, end_time) WITH &&) WHERE (start_time IS NOT NULL AND end_time IS NOT NULL)
    );


    -------------------- PRODUCTS TABLE --------------------

    -- -- Tracks individual products produced. This table captures production output, quality (through bad_quantity), and timing
    CREATE TABLE IF NOT EXISTS product (
      product_type_id INTEGER REFERENCES product_type(product_type_id),
      product_batch_id TEXT,
      asset_id INTEGER REFERENCES asset(id),
      start_time TIMESTAMPTZ,
      end_time TIMESTAMPTZ NOT NULL,
      quantity INTEGER NOT NULL,
      bad_quantity INTEGER DEFAULT 0,
      CHECK (quantity > 0),
      CHECK (bad_quantity >= 0),
      CHECK (bad_quantity <= quantity),
      CHECK (start_time <= end_time),
      UNIQUE (asset_id, end_time, product_batch_id)
    );

    -- creating hypertable
    SELECT create_hypertable('product', 'end_time', if_not_exists => TRUE);;

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS idx_products_asset_end_time ON product(asset_id, end_time DESC);


    -------------------- SHIFTS TABLE --------------------

    -- Using btree_gist to avoid overlapping shifts
    -- Source: https://gist.github.com/fphilipe/0a2a3d50a9f3834683bf

    -- Manages work shifts for assets. Shift scheduling is a key operational aspect under ISA-95, impacting resource planning and allocation.
    CREATE TABLE IF NOT EXISTS shift (
      shift_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
      asset_id INTEGER REFERENCES asset(id),
      start_time TIMESTAMPTZ NOT NULL,
      end_time TIMESTAMPTZ NOT NULL,
      CONSTRAINT shift_start_asset_uniq UNIQUE (start_time, asset_id),
      CHECK (start_time < end_time),
      EXCLUDE USING gist (asset_id WITH =, tstzrange(start_time, end_time) WITH &&)
    );

    -------------------- STATES TABLE --------------------


    -- Records the state changes of assets over time. State tracking supports ISA-95's goal of detailed monitoring and control of manufacturing operations.
    -- State Table
    -- It assumes that a state continues until a new state is recorded.
    CREATE TABLE IF NOT EXISTS state (
      asset_id INTEGER REFERENCES asset(id),
      start_time TIMESTAMPTZ NOT NULL,
      state INT NOT NULL,
      CHECK (state >= 0),
      UNIQUE (start_time, asset_id)
    );

    -- creating hypertable
    SELECT create_hypertable('state', 'start_time', if_not_exists => TRUE);;

    -- creating an index to increase performance
    CREATE INDEX IF NOT EXISTS idx_states_asset_start_time ON state(asset_id, start_time DESC);



    -------------------- FIX OWNERS --------------------

    ALTER TABLE asset OWNER TO kafkatopostgresqlv2;
    ALTER TABLE tag OWNER TO kafkatopostgresqlv2;
    ALTER TABLE tag_string OWNER TO kafkatopostgresqlv2;

    ALTER TABLE work_order OWNER TO kafkatopostgresqlv2;
    ALTER TABLE product_type OWNER TO kafkatopostgresqlv2;
    ALTER TABLE product OWNER TO kafkatopostgresqlv2;
    ALTER TABLE shift OWNER TO kafkatopostgresqlv2;
    ALTER TABLE state OWNER TO kafkatopostgresqlv2;


    GRANT SELECT ON umh_v2.public.asset TO grafanareader;
    GRANT SELECT ON umh_v2.public.tag TO grafanareader;
    GRANT SELECT ON umh_v2.public.tag_string TO grafanareader;


    GRANT SELECT ON umh_v2.public.work_order TO grafanareader;
    GRANT SELECT ON umh_v2.public.product_type TO grafanareader;
    GRANT SELECT ON umh_v2.public.product TO grafanareader;
    GRANT SELECT ON umh_v2.public.shift TO grafanareader;
    GRANT SELECT ON umh_v2.public.state TO grafanareader;


    __SQL__
{{end}}
