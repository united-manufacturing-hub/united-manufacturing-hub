---
# See https://github.com/rancher/k3os/blob/master/README.md#configuration


# This will be used as serial number as well
# HOSTNAME DOES NOT ALLOW UNDERSCORES
hostname: development

write_files:

# Write Helm values file
- content: |
    ---
    # Please adjust the following lines
    # _000_commonConfig contains the most common configuration options. To go into the details you can look into the configurations option after _000_commonConfig
    _000_commonConfig:
      serialNumber: "default"  # usually the hostname
      # This allows to specify data sources, which is mostly used for instances running on the edge
      datasources:
    
        # barcodereader reads out connected USB barcodereaders emulating a keyboard
        barcodereader:
          enabled: false
          USBDeviceName: "Datalogic ADC, Inc. Handheld Barcode Scanner"
          USBDevicePath: "" # Linux device path, if empty, USBDeviceName is used
          customerID: "raw"
          location: "barcodereader"
          machineID: "barcodereader"
    
        # sensorconnect searches for ifm IO-Link gateways and reads out the connected sensors
        sensorconnect:
          enabled: false
          iprange: "192.168.10.1/24"  # IP Range in CIDR notation
          enableKafka: true
          enableMQTT: false
    
        # Warning: unstable
        # cameraconnect searches for GenICam compatible cameras and reads out the pictures
        cameraconnect:
          enabled: false
          trigger: "MQTT"
          acquisitionDelay: "0.0"
          cycleTime: "4"
          cameraInterface: "GenICam"
          imageWidth: "800"
          imageHeight: "800"
          imageChannels: "3"
          macAddress: "02-2625A-09849"
          exposureTime: "1000"
          exposureAuto: "Off"
          pixelFormat: "Mono8"
    
      # dataprocessing involves microservices, whose main purpose is to process the data
      dataprocessing:
        nodered:
          enabled: true
          defaultFlows: false
    
      # Infrastructure
      infrastructure:
    
        # vernemq
        mqtt:
          enabled: true
          AclConfig: |-
            pattern write ia/raw/%u/#
            pattern write ia/%u/#
            pattern $SYS/broker/connection/%c/state
    
            user TESTING
            topic ia/#
            topic $SYS/#
            topic read $share/TESTING/ia/#
            
            user ia_nodered
            topic ia/#
          CACert: |-
            -----BEGIN CERTIFICATE-----
            MIIDSzCCAjOgAwIBAgIUI2id6KFXw/nEv9bRhVsDhzM/ozkwDQYJKoZIhvcNAQEL
            BQAwFjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0EwHhcNMjEwNDA2MDkyNDM1WhcNMzEw
            NDA0MDkyNDM1WjAWMRQwEgYDVQQDDAtFYXN5LVJTQSBDQTCCASIwDQYJKoZIhvcN
            AQEBBQADggEPADCCAQoCggEBALh3vJroi6hcvcm3OmpXs26MsXmRiUhBgdrNSOzZ
            KjWpW+R9aMONu1KxoXAuj/pAwt5CkLAMQ5EI5H05OArYOKekLfMe3FRTEOUSvFU/
            qO0hBymJRJZRhECwWu01gL1OS4AXaxdjrXwx8H4URAiKa4FhJCWrSPCikNvzX4K2
            SSSZMbMXEddO9uoyBU83HcZdo8NX0QRUKXy6w/zVMsjyLSZCtk4BaLCmlidhcH91
            Hggl6JDk4CuYRfkmemyblzw2bKAlWqsppv/m1nkI3hEFvwN68cpfsNnQynfYpZkL
            ODuNnia+PIhl3XyDXkJCM2ylPObcmo0D9GV2/J0JZgu9y3ECAwEAAaOBkDCBjTAd
            BgNVHQ4EFgQUvW9fQDy1ACN7knRxApaEh3LxW78wUQYDVR0jBEowSIAUvW9fQDy1
            ACN7knRxApaEh3LxW7+hGqQYMBYxFDASBgNVBAMMC0Vhc3ktUlNBIENBghQjaJ3o
            oVfD+cS/1tGFWwOHMz+jOTAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkq
            hkiG9w0BAQsFAAOCAQEAfDsmd4FaA4R0rS84hGqileIaUdwhGE5IAlj3W8Wd2O63
            xqThR+qN7TzO5Nki7tXNC2qCpuJmbPqrbB0CgwiobkwV+3vwF+VW8lCjSfYSpXbs
            nUN9CXMkQVWwbx8cAc7LlmpxU9evD21cBGOvD9AjngJwcofUUYXIuwWDdd1DVOaK
            AJ2Xc2MEjeVXdQnFZLF2FEPy/znJ0EIW/PhGgFHyQWn1inJU00FNfGQsdO8Ruloi
            VNVYOyMINZIG0V91l29XCViuSUrR1BSvK+YG2wiFqHV0bUytbY7uuNCh3S/HZEhE
            zC5KEddzKtihzW3yP4baMAmvu7atS0Gy7MLXWG+SRw==
            -----END CERTIFICATE-----
          Cert: |-
            -----BEGIN CERTIFICATE-----
            MIIDjzCCAnegAwIBAgIQB6OLOw2bXBVXZD3ArV2i+jANBgkqhkiG9w0BAQsFADAW
            MRQwEgYDVQQDDAtFYXN5LVJTQSBDQTAeFw0yMTA0MDYxMTMxMDdaFw0yNDAzMjEx
            MTMxMDdaMCUxIzAhBgNVBAMMGmZhY3RvcnljdWJlLXNlcnZlci12ZXJuZW1xMIIB
            IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4EGKWn5ZSNtC5t3bsMjTMow3
            usMfM/1NzM9MYAvUMy71WHdCt/10bnIzRwYLUMtjAQURvyq+dXaj1DMz7452uzCC
            GE6r6SojReH7snAWMgrbDhE3psokW4LY6/tH5ihOBu1xfUtI1ac6rkHz4JsURpHj
            5HAGnPkfOiQZc10AxBxPz9i558a7J58Y4FZ0M51rgKaWAr+qDMzjfdNI/MUs1JTd
            Yn8QM0Sv2XjP4CziqWOa0Xf4MsoLgOqItZMLaYQwaUIkx0CV231D1cREZB2xbYSn
            DyK9DbXumK0tsVwgXh8Q+EY0ofW+M/noukJUxIbL8E1OKwbnS+2smpz5clc+BQID
            AQABo4HJMIHGMAkGA1UdEwQCMAAwHQYDVR0OBBYEFEPOUbp9SDAizKwHuiFhBPVH
            OKaTMFEGA1UdIwRKMEiAFL1vX0A8tQAje5J0cQKWhIdy8Vu/oRqkGDAWMRQwEgYD
            VQQDDAtFYXN5LVJTQSBDQYIUI2id6KFXw/nEv9bRhVsDhzM/ozkwEwYDVR0lBAww
            CgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMCUGA1UdEQQeMByCGmZhY3RvcnljdWJl
            LXNlcnZlci12ZXJuZW1xMA0GCSqGSIb3DQEBCwUAA4IBAQANaEiAIR+nADiGNeOk
            SSCRG5VeelFfO3X4wUiHrEKE6NkVVF+w6Wemogmtb+KB6NmjWAGiZep8p/R/7F75
            iAGUk4LEAcXFMw6NWZhODlv5ryo6V2X1EuqMwXOfccbUwu7l9md+j2UxY45vp1Z2
            +1eP/pjVmEt29HPUnWUT/rFeqlz605xYLauoSTsTxkGl5T8EoLwtvZOFnBIy7oGs
            QzW42IlfFKNlYKHMYJ8I6AQ89+cUUko/zqUPeiFl+fl1WpXCOofEiRUd/4Z6R0Rw
            moz/sNxvZ44GG47X2Gvc1Ewfc9rpgvSmyMTUgS4EP2p5LBQEDuFJz1DSW43QGOEx
            6OoQ
            -----END CERTIFICATE-----
          Privkey: |-
            -----BEGIN PRIVATE KEY-----
            MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDgQYpafllI20Lm
            3duwyNMyjDe6wx8z/U3Mz0xgC9QzLvVYd0K3/XRucjNHBgtQy2MBBRG/Kr51dqPU
            MzPvjna7MIIYTqvpKiNF4fuycBYyCtsOETemyiRbgtjr+0fmKE4G7XF9S0jVpzqu
            QfPgmxRGkePkcAac+R86JBlzXQDEHE/P2LnnxrsnnxjgVnQznWuAppYCv6oMzON9
            00j8xSzUlN1ifxAzRK/ZeM/gLOKpY5rRd/gyyguA6oi1kwtphDBpQiTHQJXbfUPV
            xERkHbFthKcPIr0Nte6YrS2xXCBeHxD4RjSh9b4z+ei6QlTEhsvwTU4rBudL7aya
            nPlyVz4FAgMBAAECggEAGr62SWSYMWA08mOzN7o7teOTIerzZbfn920hprLCc/g9
            unc+tcK8iA+GngnSf6hB/nUkULBAVrH3h+8zWnabImf+m/eF+SDVZBg3dGh5vS4e
            Qec7w+CHxYItbLdjM8fKxni6+D5qSVDQZsfm1fqoyGHN1AioQUBUwRJdFq0Y0kp0
            6BwZG2Kk43JQByeKX4/D2QgZEjFCgsw2Wihy8sQkX96aXbAdUO5Um7kzf7iIMXlI
            877uarOuCuIEYJSWjwrwu4I7CQ68lEA1pGSlEMKU9ju8KtoqaQ65ELx9PgK8df3+
            zIM8WnZzT/US0TPI+cWvsB6yYYGsohE25oGNYMnKAQKBgQD5RGOeAR4GhBm2tRR/
            6XzLWmru0sGif/7A/rPDjzWSlnkaqkTSK29xQZkDK9WJVLG3SWCV2XnwysLgVHyF
            J2DlPZVDnKvS5EXwGSenzpWMm6yHNZhsA1nxvSiZBXj8MPhF5NbOrnuZJVR9+xmA
            xQTspByMa9gwD8sXkWS+aq8+kQKBgQDmUDTfY8jtCXm9kXZPPgESGtYuDmBlvyf4
            40Gt79FmOt3ZYBr2do0BeUnyJOFwleQeUqRIneUsUHyUHj1VI/SpBuUAPWOT9w8s
            zlrLkmYnrOArKcZpCpWQZWyKXtomxdUlZJjFJGJfipJ1zu1G2IJZNjuuFpEJY4Jz
            xI3JO9OqNQKBgQC28UV3enRx7dP9b0sbUd7gVHz0yMOKowvy0zxWA64a5sr9Eggu
            g+hno/BMDojLINjJn1X+xL0lR3rdL8Sv6SXJOXhqRfspbZYS0DN1ij3iE4L9PQ2g
            AJmrvNul6wlPdhVRHtG0oQRfcrFfQMIH6xFhKFU3jhL9uymgI3pf8mapsQKBgQCV
            6ETR1mA0sQM1eVW5dFE8GI2qAp+J+mcpH7pjXYI9eTlnQJ+sJjPXbrvLyWeXYWjO
            t9nIjkVZl7XOrvQa08Fut1cc1dhXuep9rn74m/yz/FkYnyNOwZ3iE7IXSm/R5ti6
            cwTg5LLHHyn/VkWo5EnLiXpE8NlMdCG3+oqTHcbCtQKBgBoQrLzRsruiha6QP4OZ
            eCvOVIaxuH60A85QW5pgb0IlORXfX9zjA+M3v/G+tj6y5vxPOiVJaRd6iBqEDpMd
            337jNZKFr5EaVmF45PrcM060cbEcbdq8zCTEnQ6Y+bQiDTkfdgcE5CDJDJ7ol2I2
            MIzsw5gq+PcsyNV5g/IUX0PJ
            -----END PRIVATE KEY-----
    
        # apache kafka, mqttkafkabridge, kowl, kafkatopostgresql
        kafka:
          enabled: true
          useSSL: false
          defaultTopics: ia.test.test.test.processValue;ia.test.test.test.count
    
    
      certificates:
        CACert: |-
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        kafka:
          cert: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
          privkey: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----

        barcodereader:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        kafkabridge:
          sslKeyPasswordLocal: ""
          sslKeyPemLocal: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePemLocal: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
          sslCACertRemote: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
          sslCertificatePemRemote: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslKeyPasswordRemote: ""
          sslKeyPemRemote: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----

        kafkadebug:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        kafkainit:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        kafkastatedetector:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
    
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        kafkatoblob:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
    
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        kafkatopostgresql:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
    
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        kowl:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
    
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        mqttkafkabridge:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
    
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----

        nodered:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
        sensorconnect:
          sslKeyPassword: ""
          sslKeyPem: |-
            -----BEGIN PRIVATE KEY-----
            -----END PRIVATE KEY-----
    
          sslCertificatePem: |-
            -----BEGIN CERTIFICATE-----
            -----END CERTIFICATE-----
    
    
      # timescaledb, factoryinsight, grafana, redis
      # datastorage is the basic infrastructure to get messages from MQTT, storing them in a database and exposing a REST API with KPIs that can be used in Grafana (contains timescaledb, factoryinsight, mqtt-to-postgresql, grafana, vernemq, )
      # If you want to enable only some of these components, set enabled to false and enable them in the detailed configuration below 000_commonConfig
      datastorage:
        enabled: true
        db_password: "changeme"
    
      # mqtt-to-blob, minio, kafka-to-blob
      # blobstorage is the infrastructure to get image messages from MQTT and store them in a min.io blob storage (contains mqtt-to-blob, minio)
      blobstorage:
        enabled: false
    
      # factoryinput, grafanaproxy
      # datainput is the infrastructure to allow data entry via Grafana (contains factoryinput, grafanaproxy)
      datainput:
        enabled: false
    
      # mqttBridge allows connecting multiple United Manufacturing Hub clusters, e.g., the installations on the edge with the central cloud
      mqttBridge:
        enabled: false
        remoteBrokerURL: "ssl://united-manufacturing-hub-vernemq-local-service.united-manufacturing-hub:8883"
        localSubTopic: "ia/factoryinsight"  # /# will be automatically appended to the string specified here.
        oneWay: true
        localBrokerSSLEnabled: false
        localPubTopic: "ia"
        localCertificateName: "LOCAL"
        remoteBrokerSSLEnabled: true
        remoteSubTopic: "ia"
        remotePubTopic: "ia/factoryinsight"  # /# will be automatically appended to the string specified here.
    
        CAcert: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        cert: |
          -----BEGIN CERTIFICATE-----
          -----END CERTIFICATE-----
        privkey: |
          -----BEGIN PRIVATE KEY-----
          -----END PRIVATE KEY-----
    
      kafkaBridge:
        enabled: false
        remotebootstrapServer: ""
        topicCreationLocalList: ia.test.test.test.processValue;ia.test.test.test.count # ; seperated list of topics to create on local broker, if they do not exist
        topicCreationRemoteList: ia.test.test.test.processValue;ia.test.test.test.count # ; seperated list of topics to create on remote broker, if they do not exist
        topicmap:
      # Example topic map
      #  - bidirectional: false
      #    name: HighIntegrity
      #    send_direction: to_remote
      #    topic: ^ia\..+\..+\..+\.((addMaintenanceActivity)|(addOrder)|(addParentToChild)|(addProduct)|(addShift)|(count)|(deleteShiftByAssetIdAndBeginTimestamp)|(deleteShiftById)|(endOrder)|(modifyProducedPieces)|(modifyState)|(productTag)|(productTagString)|(recommendation)|(scrapCount)|(startOrder)|(state)|(uniqueProduct)|(scrapUniqueProduct))$
      #  - bidirectional: false
      #    name: HighThroughput
      #    send_direction: to_remote
      #    topic: ^ia\..+\..+\..+\.(processValue).*$
    
      kafkaStateDetector:
        enabled: false
    
    ##### Disable SSL #####
    kowl:
      kowl:
        config:
          kafka:
            tls:
              enabled: false
    kafka:
      auth:
        clientProtocol: plaintext

  path: /home/rancher/configs/united-manufacturing-hub-development.yaml

- content: |
      #!/bin/bash
      LOCKDIR=/home/rancher/DO_NOT_DELETE

      # This runs as root

      if [ -d $LOCKDIR ]; then
      echo "Already configured. If you want to reconfigure delete /home/rancher/DO_NOT_DELETE"
      exit
      fi


      # Restart as rancher
      if [ $UID -eq 0 ]; then
      echo "Initial setup! Waiting 60 seconds for full startup..."
      sleep 60


      ###
      # Check if NTP server is reachable
      ###

      # Get both ntp servers from config
      NTP1=$(cat /k3os/system/config.yaml | grep ntp_servers -A2 | tail -n2 | grep - | sed 's/  - //g' | sed -n 1p)
      NTP2=$(cat /k3os/system/config.yaml | grep ntp_servers -A2 | tail -n2 | grep - | sed 's/  - //g' | sed -n 2p)

      echo "Testing NTP server $NTP1"
      echo "Testing NTP server $NTP2"

      # Try 5 times to reach either of them
      i="0"
      reachable_ntp_server_found=0
      while [ $i -lt 5 ]
      do
      if ! ping -c1 -W1 $NTP1 > /dev/null 2>&1 ; then
      echo "$NTP1 not reachable !"
      sleep 10
      else
      echo "$NTP1 is reachable !"
      reachable_ntp_server_found=1
      fi

      if ! ping -c1 -W1 $NTP2 > /dev/null 2>&1 ; then
      echo "$NTP2 not reachable !"
      sleep 10
      else
      echo "$NTP2 is reachable !"
      reachable_ntp_server_found=1
      fi
      if [ $reachable_ntp_server_found -eq 1 ]; then
      break
      fi
      i=$[$i+1]
      done

      if [ $reachable_ntp_server_found -eq 0 ]; then
      echo "No reachable NTP server found."
      echo "This can happen when you either have no connection to the internet or when you are in a limited network"
      echo "that blocks NTP requests (some universities do that). The solution is to connect ot the internet and / or"
      echo "to specify the allowed NTP servers manually in the development.yaml. Fore more information visit docs.umh.app"
      fi


      echo "Testing DNS lookup of umh.app"
      i="0"
      dns_query_successfull=0
      while [ $i -lt 10 ]
      do
      if ! nslookup umh.app  > /dev/null 2>&1 ; then
      echo "Failed to lookup umh.app"
      sleep 10
      else
      echo "DNS lookup successfull"
      dns_query_successfull=1
      break
      fi
      i=$[$i+1]
      done

      if [ $dns_query_successfull -eq 0 ]; then
      echo "Failed to resolve umh.app."
      echo "This can happen when you either have no connection to the internet or when you are in a limited network"
      echo "that blocks DNS requests (some universities do that). The solution is to connect ot the internet and / or"
      echo "to specify the allowed DNS servers manually in the development.yaml. Fore more information visit docs.umh.app"
      exit
      fi

      if [ $(date +%s) -lt 1609455600 ]; then
      echo "Current Date is < 01.01.2021, aborting setup"
      exit
      fi

      exec su "rancher" "$0" -- "$@"
      exit
      fi

      # The following code is run as rancher
      echo "Continuing with installation. Installing helm..."
      export VERIFY_CHECKSUM=false
      if ! curl -fsSL -o /home/rancher/get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 ; then
      echo "Failed to download helm installer, aborting setup"
      exit
      fi

      if ! chmod 700 /home/rancher/get_helm.sh ; then
      echo "Failed to change permission on get_helm.sh, aborting setup"
      exit
      fi

      if ! /home/rancher/get_helm.sh ; then
      echo "Failed to execute get_helm.sh, aborting setup"
      exit
      fi
      echo "Helm installed!"

      echo "Adding helm repo..."
      if ! helm repo add united-manufacturing-hub https://repo.umh.app/ ; then
      echo "Failed to add umh repository, aborting setup"
      exit
      fi
      echo "Added helm repo!"

      echo "Creating namespace united-manufacturing-hub..."
      if ! kubectl create namespace united-manufacturing-hub; then
      echo "Failed to create kubernetes namespace for united-manufacturing-hub, aborting setup"
      exit
      fi
      echo "Created namespace!"

      echo "Install Helm chart united-manufacturing-hub..."
      if ! helm install united-manufacturing-hub united-manufacturing-hub/united-manufacturing-hub --values "/home/rancher/configs/united-manufacturing-hub-development.yaml" --set serialNumber=$(hostname) --kubeconfig /etc/rancher/k3s/k3s.yaml -n united-manufacturing-hub ; then
      echo "Failed to install united-manufacturing-hub using helm, aborting setup"
      exit
      fi
      echo "Installed Helm chart!"

      echo "Enabling SSH password authentification..."
      if ! sudo sed -i 's/PasswordAuthentication  no/PasswordAuthentication  yes/g' /etc/ssh/sshd_config ; then
      echo "Failed to enable password authentication, aborting setup"
      exit
      fi
      if ! sudo service sshd restart ; then
      echo "Failed to restart sshd, aborting setup"
      exit
      fi
      echo "Enabled SSH password authentification!"

      if ! mkdir $LOCKDIR ; then
      echo "Failed to create $LOCKDIR, setup failed !"
      exit
      fi

      echo "Initial setup finished! This might take now awhile..."

      num1=$(k3s -v | grep -o 'v1.[0-9][0-9]' | sed 's/v//g')
      num2="1.20"
      num3="1.21"

      if (( $(echo "$num1 < $num2" |bc -l) )); then
      echo "k3os version outdated ! This can cause various issues."
      echo "Installed version:   $num1"
      echo "Minimal version:     $num2"
      echo "Maximal version:     $num3"
      fi

      if (( $(echo "$num1 > $num3" |bc -l) )); then
      echo "k3os version too new! This can cause various issues."
      echo "Installed version:   $num1"
      echo "Minimal version:     $num2"
      echo "Maximal version:     $num3"
      fi

  path: /home/rancher/initial_setup.sh

run_cmd:
- "chmod +x /home/rancher/initial_setup.sh && /home/rancher/initial_setup.sh &"

k3os:
  password: rancher
  dns_nameservers:
  - 8.8.8.8
  - 1.1.1.1
  ntp_servers:
  - pool.ntp.org
  - ntp1.rwth-aachen.de
